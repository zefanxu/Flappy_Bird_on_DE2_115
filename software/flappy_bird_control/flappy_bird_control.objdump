
flappy_bird_control.elf:     file format elf32-littlenios2
flappy_bird_control.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0800022c

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000057b0 memsz 0x000057b0 flags r-x
    LOAD off    0x000067d0 vaddr 0x080057d0 paddr 0x08006e88 align 2**12
         filesz 0x000016b8 memsz 0x000016b8 flags rw-
    LOAD off    0x00008540 vaddr 0x08008540 paddr 0x08008540 align 2**12
         filesz 0x00000000 memsz 0x00000188 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000546c  0800022c  0800022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000016b8  080057d0  08006e88  000067d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000188  08008540  08008540  00008540  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00007e88  2**0
                  CONTENTS
  7 .sdram        00000000  080086c8  080086c8  00007e88  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007e88  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000770  00000000  00000000  00007eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009fcb  00000000  00000000  00008620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000037eb  00000000  00000000  000125eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003ca0  00000000  00000000  00015dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000e8c  00000000  00000000  00019a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000217a  00000000  00000000  0001a904  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000051e8  00000000  00000000  0001ca7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00021c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000930  00000000  00000000  00021c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0002493a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0002493d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00024949  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002494a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002494b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0002494f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00024953  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00024957  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00024962  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0002496d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000013  00000000  00000000  00024978  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003c  00000000  00000000  0002498b  2**0
                  CONTENTS, READONLY
 30 .jdi          00004a39  00000000  00000000  000249c7  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000d6164  00000000  00000000  00029400  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
0800022c l    d  .text	00000000 .text
08005698 l    d  .rodata	00000000 .rodata
080057d0 l    d  .rwdata	00000000 .rwdata
08008540 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080086c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../flappy_bird_control_bsp//obj/HAL/src/crt0.o
08000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08008540 l     O .bss	00000008 timeCount
08008548 l     O .bss	00000008 yPosition
08008550 l     O .bss	00000008 pipeXposition
08008558 l     O .bss	00000008 timeCount2
08008560 l     O .bss	00000008 yPosition2
08008568 l     O .bss	00000004 y_init
0800856c l     O .bss	00000004 jump
08008570 l     O .bss	00000004 gameover
08008574 l     O .bss	00000004 gamestart
08008578 l     O .bss	00000004 score
0800857c l     O .bss	00000004 AIPlay
08008580 l     O .bss	00000004 tempHeight
08008584 l     O .bss	00000004 y_init2
08008588 l     O .bss	00000004 jump2
0800858c l     O .bss	00000004 dead
08008590 l     O .bss	00000004 dead2
08008594 l     O .bss	00000004 score2
08008598 l     O .bss	00000004 pressed
0800859c l     O .bss	00000004 too_high
080085a0 l     O .bss	00000004 two_players
080085a4 l     O .bss	00000004 bestscore
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
08001360 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 impure.c
080057d0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
08003434 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08003590 l     F .text	00000038 alt_dev_reg
08005bf4 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800386c l     F .text	00000204 altera_avalon_jtag_uart_irq
08003a70 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
080041d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08004314 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08004340 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080047d8 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08004930 l     F .text	00000050 alt_get_errno
08004980 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080085c0 g     O .bss	00000004 alt_instruction_exception_handler
08003518 g     F .text	00000078 alt_main
080085c8 g     O .bss	00000100 alt_irq
08006e88 g       *ABS*	00000000 __flash_rwdata_start
08006e44 g     O .rwdata	00000004 ScoreY2
080002cc g     F .text	00000040 randomHeight
08006e30 g     O .rwdata	00000004 ScoreY
08006e20 g     O .rwdata	00000004 keycode
08006dfc g     O .rwdata	00000004 birdy
08001d28 g     F .text	000000e0 .hidden __gtdf2
08004df0 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080085c4 g     O .bss	00000004 errno
08006e58 g     O .rwdata	00000004 third2
080085ac g     O .bss	00000004 alt_argv
0800edfc g       *ABS*	00000000 _gp
08006c7c g     O .rwdata	00000180 alt_fd_list
08006e10 g     O .rwdata	00000004 pipe1
08004e10 g     F .text	00000090 alt_find_dev
080051ec g     F .text	00000138 memcpy
080030ac g     F .text	000000d0 .hidden __floatsidf
080048b8 g     F .text	00000078 alt_io_redirect
08001e08 g     F .text	000000e0 .hidden __ltdf2
08005698 g       *ABS*	00000000 __DTOR_END__
08005088 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08003c6c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800147c g     F .text	00000008 .hidden __udivsi3
080012ec g     F .text	00000074 .hidden __fixunsdfsi
08006e18 g     O .rwdata	00000004 pipe5
08006e48 g     O .rwdata	00000004 ScoreX2
08006e74 g     O .rwdata	00000004 alt_max_fd
08006e08 g     O .rwdata	00000004 pipe3
08000268 g     F .text	00000064 debouncer
0800148c g     F .text	0000089c .hidden __adddf3
08006e3c g     O .rwdata	00000004 second
08006e2c g     O .rwdata	00000004 TextY
08000584 g     F .text	000000c4 bird_alive
08006e34 g     O .rwdata	00000004 ScoreX
08006e5c g     O .rwdata	00000004 _global_impure_ptr
080086c8 g       *ABS*	00000000 __bss_end
080046e8 g     F .text	000000f0 alt_iic_isr_register
08004cec g     F .text	00000104 alt_tick
0800317c g     F .text	000000a4 .hidden __floatunsidf
0800469c g     F .text	0000004c alt_ic_irq_enabled
08004c54 g     F .text	00000098 alt_alarm_stop
080085b4 g     O .bss	00000004 alt_irq_active
0800030c g     F .text	00000174 initialize_game
080000fc g     F .exceptions	000000d0 alt_irq_handler
08006c54 g     O .rwdata	00000028 alt_dev_null
080042f8 g     F .text	0000001c alt_dcache_flush_all
08003024 g     F .text	00000088 .hidden __fixdfsi
08006e88 g       *ABS*	00000000 __ram_rwdata_end
08006e4c g     O .rwdata	00000004 birdy2
08006e6c g     O .rwdata	00000008 alt_dev_list
080057d0 g       *ABS*	00000000 __ram_rodata_end
08001e08 g     F .text	000000e0 .hidden __ledf2
08006e14 g     O .rwdata	00000004 pipe4
08001484 g     F .text	00000008 .hidden __umodsi3
08006e50 g     O .rwdata	00000004 first2
080086c8 g       *ABS*	00000000 end
080037a8 g     F .text	000000c4 altera_avalon_jtag_uart_init
080001cc g     F .exceptions	00000060 alt_instruction_exception_entry
08005698 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08003220 g     F .text	00000064 .hidden __clzsi2
08003e78 g     F .text	00000218 altera_avalon_jtag_uart_write
080054d0 g     F .text	00000194 __call_exitprocs
0800022c g     F .text	0000003c _start
080085b8 g     O .bss	00000004 _alt_tick_rate
080032c4 g     F .text	00000064 rand
080085bc g     O .bss	00000004 _alt_nticks
080035fc g     F .text	00000048 alt_sys_init
080053bc g     F .text	00000114 __register_exitproc
08003b18 g     F .text	00000068 altera_avalon_jtag_uart_close
08003284 g     F .text	00000028 .hidden __mulsi3
080057d0 g       *ABS*	00000000 __ram_rwdata_start
08005698 g       *ABS*	00000000 __ram_rodata_start
08003644 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08004fb4 g     F .text	000000d4 alt_get_fd
08006e00 g     O .rwdata	00000004 birdx
08005170 g     F .text	0000007c memcmp
08000480 g     F .text	00000104 AIPlayer
08003704 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080086c8 g       *ABS*	00000000 __alt_stack_base
08003754 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001ee8 g     F .text	0000086c .hidden __muldf3
08004ea0 g     F .text	00000114 alt_find_file
08004390 g     F .text	000000a4 alt_dev_llist_insert
08008540 g       *ABS*	00000000 __bss_start
08000648 g     F .text	00000ca4 main
080085b0 g     O .bss	00000004 alt_envp
080036a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080032ac g     F .text	00000018 srand
08006e28 g     O .rwdata	00000004 TextX
08006e04 g     O .rwdata	00000004 pipe_x
08006e78 g     O .rwdata	00000004 alt_errno
08006e0c g     O .rwdata	00000004 pipe2
080013cc g     F .text	00000054 .hidden __divsi3
08005698 g       *ABS*	00000000 __CTOR_END__
08005698 g       *ABS*	00000000 __flash_rodata_start
08005698 g       *ABS*	00000000 __DTOR_LIST__
080035c8 g     F .text	00000034 alt_irq_init
08004bd4 g     F .text	00000080 alt_release_fd
08005698 g     O .rodata	00000100 .hidden __clz_tab
08005124 g     F .text	00000014 atexit
08006e60 g     O .rwdata	00000004 _impure_ptr
080085a8 g     O .bss	00000004 alt_argc
08004490 g     F .text	0000005c _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08006e24 g     O .rwdata	00000004 press
08006e64 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08006e38 g     O .rwdata	00000004 third
08004508 g     F .text	00000050 alt_ic_isr_register
08006e40 g     O .rwdata	00000004 first
08006e54 g     O .rwdata	00000004 second2
08006e88 g       *ABS*	00000000 _edata
080086c8 g       *ABS*	00000000 _end
0800022c g       *ABS*	00000000 __ram_exceptions_end
08003b80 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080045f8 g     F .text	000000a4 alt_ic_irq_disable
08005138 g     F .text	00000038 exit
08001420 g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
08005664 g     F .text	00000034 _exit
08004090 g     F .text	00000140 alt_alarm_start
08003328 g     F .text	0000010c .hidden __muldi3
08005324 g     F .text	00000098 strlen
08004a74 g     F .text	00000160 open
08001d28 g     F .text	000000e0 .hidden __gedf2
080044ec g     F .text	0000001c alt_icache_flush_all
08006e7c g     O .rwdata	00000004 alt_priority_mask
08004558 g     F .text	000000a0 alt_ic_irq_enable
08002754 g     F .text	000008d0 .hidden __subdf3
08006e80 g     O .rwdata	00000008 alt_alarm_list
08004434 g     F .text	0000005c _do_ctors
08006e1c g     O .rwdata	00000004 status
08004220 g     F .text	000000d8 close
08003498 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408b14 	ori	at,at,556
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001cc0 	call	80001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10a17204 	addi	r2,r2,-31288
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10a17204 	addi	r2,r2,-31288
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	e037883a 	mov	sp,fp
 80001bc:	dfc00117 	ldw	ra,4(sp)
 80001c0:	df000017 	ldw	fp,0(sp)
 80001c4:	dec00204 	addi	sp,sp,8
 80001c8:	f800283a 	ret

080001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001cc:	defffb04 	addi	sp,sp,-20
 80001d0:	dfc00415 	stw	ra,16(sp)
 80001d4:	df000315 	stw	fp,12(sp)
 80001d8:	df000304 	addi	fp,sp,12
 80001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e0:	00bfffc4 	movi	r2,-1
 80001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001ec:	d0a5f117 	ldw	r2,-26684(gp)
 80001f0:	10000726 	beq	r2,zero,8000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f4:	d0a5f117 	ldw	r2,-26684(gp)
 80001f8:	e0fffd17 	ldw	r3,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	e17fff17 	ldw	r5,-4(fp)
 8000204:	e1bffe17 	ldw	r6,-8(fp)
 8000208:	103ee83a 	callr	r2
 800020c:	00000206 	br	8000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000214:	0005883a 	mov	r2,zero
}
 8000218:	e037883a 	mov	sp,fp
 800021c:	dfc00117 	ldw	ra,4(sp)
 8000220:	df000017 	ldw	fp,0(sp)
 8000224:	dec00204 	addi	sp,sp,8
 8000228:	f800283a 	ret

Disassembly of section .text:

0800022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 800022c:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000234:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 8000238:	d6bb7f14 	ori	gp,gp,60924
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 800023c:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000240:	10a15014 	ori	r2,r2,34112

    movhi r3, %hi(__bss_end)
 8000244:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000248:	18e1b214 	ori	r3,r3,34504

    beq r2, r3, 1f
 800024c:	10c00326 	beq	r2,r3,800025c <_start+0x30>

0:
    stw zero, (r2)
 8000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000258:	10fffd36 	bltu	r2,r3,8000250 <__alt_data_end+0xfc000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 800025c:	80034980 	call	8003498 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000260:	80035180 	call	8003518 <alt_main>

08000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000264:	003fff06 	br	8000264 <__alt_data_end+0xfc000264>

08000268 <debouncer>:
 static int pressed = false;
 static int too_high = false;
 static int two_players;
 static int bestscore = 0;

 int debouncer(){
 8000268:	defffe04 	addi	sp,sp,-8
 800026c:	df000115 	stw	fp,4(sp)
 8000270:	df000104 	addi	fp,sp,4

	 pressed = pressed | (*press);
 8000274:	d0a00a17 	ldw	r2,-32728(gp)
 8000278:	10800017 	ldw	r2,0(r2)
 800027c:	d0e5e717 	ldw	r3,-26724(gp)
 8000280:	10c4b03a 	or	r2,r2,r3
 8000284:	d0a5e715 	stw	r2,-26724(gp)
	 int released = !(*press);
 8000288:	d0a00a17 	ldw	r2,-32728(gp)
 800028c:	10800017 	ldw	r2,0(r2)
 8000290:	1005003a 	cmpeq	r2,r2,zero
 8000294:	10803fcc 	andi	r2,r2,255
 8000298:	e0bfff15 	stw	r2,-4(fp)
	 if (pressed){
 800029c:	d0a5e717 	ldw	r2,-26724(gp)
 80002a0:	10000526 	beq	r2,zero,80002b8 <debouncer+0x50>
		 if (released){
 80002a4:	e0bfff17 	ldw	r2,-4(fp)
 80002a8:	10000326 	beq	r2,zero,80002b8 <debouncer+0x50>
			 pressed = false;
 80002ac:	d025e715 	stw	zero,-26724(gp)
			 return 1;
 80002b0:	00800044 	movi	r2,1
 80002b4:	00000106 	br	80002bc <debouncer+0x54>
		 }
	 }
	 return 0;
 80002b8:	0005883a 	mov	r2,zero
 }
 80002bc:	e037883a 	mov	sp,fp
 80002c0:	df000017 	ldw	fp,0(sp)
 80002c4:	dec00104 	addi	sp,sp,4
 80002c8:	f800283a 	ret

080002cc <randomHeight>:

 int randomHeight(){
 80002cc:	defffd04 	addi	sp,sp,-12
 80002d0:	dfc00215 	stw	ra,8(sp)
 80002d4:	df000115 	stw	fp,4(sp)
 80002d8:	df000104 	addi	fp,sp,4
 	int out = 120 + rand() % 180;
 80002dc:	80032c40 	call	80032c4 <rand>
 80002e0:	1009883a 	mov	r4,r2
 80002e4:	01402d04 	movi	r5,180
 80002e8:	80014200 	call	8001420 <__modsi3>
 80002ec:	10801e04 	addi	r2,r2,120
 80002f0:	e0bfff15 	stw	r2,-4(fp)
 	return out;
 80002f4:	e0bfff17 	ldw	r2,-4(fp)
 }
 80002f8:	e037883a 	mov	sp,fp
 80002fc:	dfc00117 	ldw	ra,4(sp)
 8000300:	df000017 	ldw	fp,0(sp)
 8000304:	dec00204 	addi	sp,sp,8
 8000308:	f800283a 	ret

0800030c <initialize_game>:

 void initialize_game(){
 800030c:	defffd04 	addi	sp,sp,-12
 8000310:	dfc00215 	stw	ra,8(sp)
 8000314:	df000115 	stw	fp,4(sp)
 8000318:	dc000015 	stw	r16,0(sp)
 800031c:	df000104 	addi	fp,sp,4
 	y_init = 280;
 8000320:	00804604 	movi	r2,280
 8000324:	d0a5db15 	stw	r2,-26772(gp)
 	*birdx = 0;
 8000328:	d0a00117 	ldw	r2,-32764(gp)
 800032c:	10000015 	stw	zero,0(r2)
 	*birdy = y_init;
 8000330:	d0a00017 	ldw	r2,-32768(gp)
 8000334:	d0e5db17 	ldw	r3,-26772(gp)
 8000338:	10c00015 	stw	r3,0(r2)
 	timeCount = 0;
 800033c:	d025d115 	stw	zero,-26812(gp)
 8000340:	d0a5d204 	addi	r2,gp,-26808
 8000344:	10000015 	stw	zero,0(r2)
 	yPosition = y_init;
 8000348:	d0a5db17 	ldw	r2,-26772(gp)
 800034c:	1009883a 	mov	r4,r2
 8000350:	80030ac0 	call	80030ac <__floatsidf>
 8000354:	1009883a 	mov	r4,r2
 8000358:	180b883a 	mov	r5,r3
 800035c:	d125d315 	stw	r4,-26804(gp)
 8000360:	d0a5d404 	addi	r2,gp,-26800
 8000364:	11400015 	stw	r5,0(r2)

 	y_init2 = 200;
 8000368:	00803204 	movi	r2,200
 800036c:	d0a5e215 	stw	r2,-26744(gp)
 	*birdy2 = y_init2;
 8000370:	d0a01417 	ldw	r2,-32688(gp)
 8000374:	d0e5e217 	ldw	r3,-26744(gp)
 8000378:	10c00015 	stw	r3,0(r2)
 	timeCount2 = 0;
 800037c:	d025d715 	stw	zero,-26788(gp)
 8000380:	d0a5d804 	addi	r2,gp,-26784
 8000384:	10000015 	stw	zero,0(r2)
 	yPosition2 = y_init2;
 8000388:	d0a5e217 	ldw	r2,-26744(gp)
 800038c:	1009883a 	mov	r4,r2
 8000390:	80030ac0 	call	80030ac <__floatsidf>
 8000394:	1009883a 	mov	r4,r2
 8000398:	180b883a 	mov	r5,r3
 800039c:	d125d915 	stw	r4,-26780(gp)
 80003a0:	d0a5da04 	addi	r2,gp,-26776
 80003a4:	11400015 	stw	r5,0(r2)

 	*pipe_x = 980;
 80003a8:	d0a00217 	ldw	r2,-32760(gp)
 80003ac:	00c0f504 	movi	r3,980
 80003b0:	10c00015 	stw	r3,0(r2)
 	*pipe1 = randomHeight();
 80003b4:	d4200517 	ldw	r16,-32748(gp)
 80003b8:	80002cc0 	call	80002cc <randomHeight>
 80003bc:	80800015 	stw	r2,0(r16)
 	*pipe2 = randomHeight();
 80003c0:	d4200417 	ldw	r16,-32752(gp)
 80003c4:	80002cc0 	call	80002cc <randomHeight>
 80003c8:	80800015 	stw	r2,0(r16)
 	*pipe3 = randomHeight();
 80003cc:	d4200317 	ldw	r16,-32756(gp)
 80003d0:	80002cc0 	call	80002cc <randomHeight>
 80003d4:	80800015 	stw	r2,0(r16)
 	*pipe4 = randomHeight();
 80003d8:	d4200617 	ldw	r16,-32744(gp)
 80003dc:	80002cc0 	call	80002cc <randomHeight>
 80003e0:	80800015 	stw	r2,0(r16)
 	*pipe5 = randomHeight();
 80003e4:	d4200717 	ldw	r16,-32740(gp)
 80003e8:	80002cc0 	call	80002cc <randomHeight>
 80003ec:	80800015 	stw	r2,0(r16)
 	pipeXposition = *pipe_x;
 80003f0:	d0a00217 	ldw	r2,-32760(gp)
 80003f4:	10800017 	ldw	r2,0(r2)
 80003f8:	1009883a 	mov	r4,r2
 80003fc:	800317c0 	call	800317c <__floatunsidf>
 8000400:	1009883a 	mov	r4,r2
 8000404:	180b883a 	mov	r5,r3
 8000408:	d125d515 	stw	r4,-26796(gp)
 800040c:	d0a5d604 	addi	r2,gp,-26792
 8000410:	11400015 	stw	r5,0(r2)

 	score = 0;
 8000414:	d025df15 	stw	zero,-26756(gp)
 	score2 = 0;
 8000418:	d025e615 	stw	zero,-26728(gp)
 	jump = false;
 800041c:	d025dc15 	stw	zero,-26768(gp)
	gameover = false;
 8000420:	d025dd15 	stw	zero,-26764(gp)
	gamestart = false;
 8000424:	d025de15 	stw	zero,-26760(gp)
	AIPlay = false;
 8000428:	d025e015 	stw	zero,-26752(gp)
	jump2 = false;
 800042c:	d025e315 	stw	zero,-26740(gp)
	dead = false;
 8000430:	d025e415 	stw	zero,-26736(gp)
	dead2 = false;
 8000434:	d025e515 	stw	zero,-26732(gp)

	tempHeight = 0;
 8000438:	d025e115 	stw	zero,-26748(gp)
	*ScoreX = 100;
 800043c:	d0a00e17 	ldw	r2,-32712(gp)
 8000440:	00c01904 	movi	r3,100
 8000444:	10c00015 	stw	r3,0(r2)
	*ScoreY = 0;
 8000448:	d0a00d17 	ldw	r2,-32716(gp)
 800044c:	10000015 	stw	zero,0(r2)
	*ScoreX2 = 600;
 8000450:	d0a01317 	ldw	r2,-32692(gp)
 8000454:	00c09604 	movi	r3,600
 8000458:	10c00015 	stw	r3,0(r2)
	*ScoreY2 = 0;
 800045c:	d0a01217 	ldw	r2,-32696(gp)
 8000460:	10000015 	stw	zero,0(r2)

	two_players = false;
 8000464:	d025e915 	stw	zero,-26716(gp)
 }
 8000468:	e6ffff04 	addi	sp,fp,-4
 800046c:	dfc00217 	ldw	ra,8(sp)
 8000470:	df000117 	ldw	fp,4(sp)
 8000474:	dc000017 	ldw	r16,0(sp)
 8000478:	dec00304 	addi	sp,sp,12
 800047c:	f800283a 	ret

08000480 <AIPlayer>:

 int AIPlayer(int birdy, int pipex){
 8000480:	defffb04 	addi	sp,sp,-20
 8000484:	dfc00415 	stw	ra,16(sp)
 8000488:	df000315 	stw	fp,12(sp)
 800048c:	df000304 	addi	fp,sp,12
 8000490:	e13ffe15 	stw	r4,-8(fp)
 8000494:	e17fff15 	stw	r5,-4(fp)
	int nextHeight;
 	if (pipex >= 450 ) nextHeight = *pipe5 + 90 - 36;
 8000498:	e0bfff17 	ldw	r2,-4(fp)
 800049c:	10807090 	cmplti	r2,r2,450
 80004a0:	1000051e 	bne	r2,zero,80004b8 <AIPlayer+0x38>
 80004a4:	d0a00717 	ldw	r2,-32740(gp)
 80004a8:	10800017 	ldw	r2,0(r2)
 80004ac:	10800d84 	addi	r2,r2,54
 80004b0:	e0bffd15 	stw	r2,-12(fp)
 80004b4:	00000f06 	br	80004f4 <AIPlayer+0x74>
 	else if (pipex <= 180 && pipex >= 100) nextHeight = *pipe3 + 90 - 36;
 80004b8:	e0bfff17 	ldw	r2,-4(fp)
 80004bc:	10802d48 	cmpgei	r2,r2,181
 80004c0:	1000081e 	bne	r2,zero,80004e4 <AIPlayer+0x64>
 80004c4:	e0bfff17 	ldw	r2,-4(fp)
 80004c8:	10801910 	cmplti	r2,r2,100
 80004cc:	1000051e 	bne	r2,zero,80004e4 <AIPlayer+0x64>
 80004d0:	d0a00317 	ldw	r2,-32756(gp)
 80004d4:	10800017 	ldw	r2,0(r2)
 80004d8:	10800d84 	addi	r2,r2,54
 80004dc:	e0bffd15 	stw	r2,-12(fp)
 80004e0:	00000406 	br	80004f4 <AIPlayer+0x74>
 	else nextHeight = *pipe2 + 90 - 36;
 80004e4:	d0a00417 	ldw	r2,-32752(gp)
 80004e8:	10800017 	ldw	r2,0(r2)
 80004ec:	10800d84 	addi	r2,r2,54
 80004f0:	e0bffd15 	stw	r2,-12(fp)
 	if (!jump && (birdy >= (nextHeight - 10))) {
 80004f4:	d0a5dc17 	ldw	r2,-26768(gp)
 80004f8:	1000121e 	bne	r2,zero,8000544 <AIPlayer+0xc4>
 80004fc:	e0bffd17 	ldw	r2,-12(fp)
 8000500:	10bffd84 	addi	r2,r2,-10
 8000504:	e0fffe17 	ldw	r3,-8(fp)
 8000508:	18800e16 	blt	r3,r2,8000544 <AIPlayer+0xc4>
 		timeCount = 0;
 800050c:	d025d115 	stw	zero,-26812(gp)
 8000510:	d0a5d204 	addi	r2,gp,-26808
 8000514:	10000015 	stw	zero,0(r2)
 		y_init = yPosition;
 8000518:	d0a5d317 	ldw	r2,-26804(gp)
 800051c:	d125d404 	addi	r4,gp,-26800
 8000520:	20c00017 	ldw	r3,0(r4)
 8000524:	1009883a 	mov	r4,r2
 8000528:	180b883a 	mov	r5,r3
 800052c:	80030240 	call	8003024 <__fixdfsi>
 8000530:	d0a5db15 	stw	r2,-26772(gp)
 		jump = true;
 8000534:	00800044 	movi	r2,1
 8000538:	d0a5dc15 	stw	r2,-26768(gp)
 		tempHeight = birdy;
 800053c:	e0bffe17 	ldw	r2,-8(fp)
 8000540:	d0a5e115 	stw	r2,-26748(gp)
 	}
 	if (birdy < (nextHeight - 10)) {
 8000544:	e0bffd17 	ldw	r2,-12(fp)
 8000548:	10bffd84 	addi	r2,r2,-10
 800054c:	e0fffe17 	ldw	r3,-8(fp)
 8000550:	1880020e 	bge	r3,r2,800055c <AIPlayer+0xdc>
 		jump = false;
 8000554:	d025dc15 	stw	zero,-26768(gp)
 8000558:	00000506 	br	8000570 <AIPlayer+0xf0>
 	}
 	else if (birdy < (tempHeight - 51)) {
 800055c:	d0a5e117 	ldw	r2,-26748(gp)
 8000560:	10bff344 	addi	r2,r2,-51
 8000564:	e0fffe17 	ldw	r3,-8(fp)
 8000568:	1880010e 	bge	r3,r2,8000570 <AIPlayer+0xf0>
 		jump = false;
 800056c:	d025dc15 	stw	zero,-26768(gp)
 	}
 }
 8000570:	e037883a 	mov	sp,fp
 8000574:	dfc00117 	ldw	ra,4(sp)
 8000578:	df000017 	ldw	fp,0(sp)
 800057c:	dec00204 	addi	sp,sp,8
 8000580:	f800283a 	ret

08000584 <bird_alive>:

 int bird_alive(int birdy, int pipex){
 8000584:	defffd04 	addi	sp,sp,-12
 8000588:	df000215 	stw	fp,8(sp)
 800058c:	df000204 	addi	fp,sp,8
 8000590:	e13ffe15 	stw	r4,-8(fp)
 8000594:	e17fff15 	stw	r5,-4(fp)
	 //printf("pipex : %d, birdy: %d, pipe5: %d, pipe2: %d \n", pipex, birdy, *pipe5, *pipe2);
 	if (pipex <= 540 + 51 && pipex >= 450){
 8000598:	e0bfff17 	ldw	r2,-4(fp)
 800059c:	10809408 	cmpgei	r2,r2,592
 80005a0:	1000111e 	bne	r2,zero,80005e8 <bird_alive+0x64>
 80005a4:	e0bfff17 	ldw	r2,-4(fp)
 80005a8:	10807090 	cmplti	r2,r2,450
 80005ac:	10000e1e 	bne	r2,zero,80005e8 <bird_alive+0x64>
 		if ((birdy > *pipe5 - 90 + 33) && (birdy < *pipe5 + 90 - 36)) return 1;
 80005b0:	e0bffe17 	ldw	r2,-8(fp)
 80005b4:	d0e00717 	ldw	r3,-32740(gp)
 80005b8:	18c00017 	ldw	r3,0(r3)
 80005bc:	18fff1c4 	addi	r3,r3,-57
 80005c0:	1880072e 	bgeu	r3,r2,80005e0 <bird_alive+0x5c>
 80005c4:	e0fffe17 	ldw	r3,-8(fp)
 80005c8:	d0a00717 	ldw	r2,-32740(gp)
 80005cc:	10800017 	ldw	r2,0(r2)
 80005d0:	10800d84 	addi	r2,r2,54
 80005d4:	1880022e 	bgeu	r3,r2,80005e0 <bird_alive+0x5c>
 80005d8:	00800044 	movi	r2,1
 80005dc:	00001606 	br	8000638 <bird_alive+0xb4>
 		else return 0;
 80005e0:	0005883a 	mov	r2,zero
 80005e4:	00001406 	br	8000638 <bird_alive+0xb4>
 	}
 	else if ((pipex <= 270 + 51 && pipex >= 180)){
 80005e8:	e0bfff17 	ldw	r2,-4(fp)
 80005ec:	10805088 	cmpgei	r2,r2,322
 80005f0:	1000111e 	bne	r2,zero,8000638 <bird_alive+0xb4>
 80005f4:	e0bfff17 	ldw	r2,-4(fp)
 80005f8:	10802d10 	cmplti	r2,r2,180
 80005fc:	10000e1e 	bne	r2,zero,8000638 <bird_alive+0xb4>
 		if ((birdy > *pipe2 - 90 + 33) && (birdy < *pipe2 + 90 - 36)) return 1;
 8000600:	e0bffe17 	ldw	r2,-8(fp)
 8000604:	d0e00417 	ldw	r3,-32752(gp)
 8000608:	18c00017 	ldw	r3,0(r3)
 800060c:	18fff1c4 	addi	r3,r3,-57
 8000610:	1880072e 	bgeu	r3,r2,8000630 <bird_alive+0xac>
 8000614:	e0fffe17 	ldw	r3,-8(fp)
 8000618:	d0a00417 	ldw	r2,-32752(gp)
 800061c:	10800017 	ldw	r2,0(r2)
 8000620:	10800d84 	addi	r2,r2,54
 8000624:	1880022e 	bgeu	r3,r2,8000630 <bird_alive+0xac>
 8000628:	00800044 	movi	r2,1
 800062c:	00000206 	br	8000638 <bird_alive+0xb4>
 		else return 0;
 8000630:	0005883a 	mov	r2,zero
 8000634:	00000006 	br	8000638 <bird_alive+0xb4>
 	}
 }
 8000638:	e037883a 	mov	sp,fp
 800063c:	df000017 	ldw	fp,0(sp)
 8000640:	dec00104 	addi	sp,sp,4
 8000644:	f800283a 	ret

08000648 <main>:

 int main(){
 8000648:	defffb04 	addi	sp,sp,-20
 800064c:	dfc00415 	stw	ra,16(sp)
 8000650:	df000315 	stw	fp,12(sp)
 8000654:	dc400215 	stw	r17,8(sp)
 8000658:	dc000115 	stw	r16,4(sp)
 800065c:	df000304 	addi	fp,sp,12
 	while (1){
 		while (!gamestart){
 8000660:	0000ac06 	br	8000914 <main+0x2cc>
 			if (*keycode == 90 && debouncer()) {
 8000664:	d0a00917 	ldw	r2,-32732(gp)
 8000668:	10800017 	ldw	r2,0(r2)
 800066c:	10801698 	cmpnei	r2,r2,90
 8000670:	1000071e 	bne	r2,zero,8000690 <main+0x48>
 8000674:	80002680 	call	8000268 <debouncer>
 8000678:	10000526 	beq	r2,zero,8000690 <main+0x48>
 				initialize_game();
 800067c:	800030c0 	call	800030c <initialize_game>
 				gamestart = true;
 8000680:	00800044 	movi	r2,1
 8000684:	d0a5de15 	stw	r2,-26760(gp)
 				gameover = false;
 8000688:	d025dd15 	stw	zero,-26764(gp)
 800068c:	0000a106 	br	8000914 <main+0x2cc>
 			}
 			else if ((*keycode == 30 || *keycode == 114) && debouncer()){
 8000690:	d0a00917 	ldw	r2,-32732(gp)
 8000694:	10800017 	ldw	r2,0(r2)
 8000698:	108007a0 	cmpeqi	r2,r2,30
 800069c:	1000041e 	bne	r2,zero,80006b0 <main+0x68>
 80006a0:	d0a00917 	ldw	r2,-32732(gp)
 80006a4:	10800017 	ldw	r2,0(r2)
 80006a8:	10801c98 	cmpnei	r2,r2,114
 80006ac:	1000091e 	bne	r2,zero,80006d4 <main+0x8c>
 80006b0:	80002680 	call	8000268 <debouncer>
 80006b4:	10000726 	beq	r2,zero,80006d4 <main+0x8c>
 				initialize_game();
 80006b8:	800030c0 	call	800030c <initialize_game>
 				gamestart = true;
 80006bc:	00800044 	movi	r2,1
 80006c0:	d0a5de15 	stw	r2,-26760(gp)
 				gameover = false;
 80006c4:	d025dd15 	stw	zero,-26764(gp)
 				two_players = true;
 80006c8:	00800044 	movi	r2,1
 80006cc:	d0a5e915 	stw	r2,-26716(gp)
 80006d0:	00009006 	br	8000914 <main+0x2cc>
 			}
 			else{
 				*ScoreX = 600;
 80006d4:	d0a00e17 	ldw	r2,-32712(gp)
 80006d8:	00c09604 	movi	r3,600
 80006dc:	10c00015 	stw	r3,0(r2)
 				*ScoreY = 0;
 80006e0:	d0a00d17 	ldw	r2,-32716(gp)
 80006e4:	10000015 	stw	zero,0(r2)
 				*TextX = 260;
 80006e8:	d0a00b17 	ldw	r2,-32724(gp)
 80006ec:	00c04104 	movi	r3,260
 80006f0:	10c00015 	stw	r3,0(r2)
 				*TextY = 200;
 80006f4:	d0a00c17 	ldw	r2,-32720(gp)
 80006f8:	00c03204 	movi	r3,200
 80006fc:	10c00015 	stw	r3,0(r2)
 				*status = 1;
 8000700:	d0a00817 	ldw	r2,-32736(gp)
 8000704:	00c00044 	movi	r3,1
 8000708:	10c00015 	stw	r3,0(r2)
 				if (yPosition < 280) timeCount = 0;
 800070c:	d0a5d317 	ldw	r2,-26804(gp)
 8000710:	d125d404 	addi	r4,gp,-26800
 8000714:	20c00017 	ldw	r3,0(r4)
 8000718:	1009883a 	mov	r4,r2
 800071c:	180b883a 	mov	r5,r3
 8000720:	000d883a 	mov	r6,zero
 8000724:	01d01cb4 	movhi	r7,16498
 8000728:	39e00004 	addi	r7,r7,-32768
 800072c:	8001e080 	call	8001e08 <__ledf2>
 8000730:	1000030e 	bge	r2,zero,8000740 <main+0xf8>
 8000734:	d025d115 	stw	zero,-26812(gp)
 8000738:	d0a5d204 	addi	r2,gp,-26808
 800073c:	10000015 	stw	zero,0(r2)
 				timeCount += 0.02;
 8000740:	d0a5d117 	ldw	r2,-26812(gp)
 8000744:	d125d204 	addi	r4,gp,-26808
 8000748:	20c00017 	ldw	r3,0(r4)
 800074c:	1009883a 	mov	r4,r2
 8000750:	180b883a 	mov	r5,r3
 8000754:	0191ebb4 	movhi	r6,18350
 8000758:	31851ec4 	addi	r6,r6,5243
 800075c:	01cfe534 	movhi	r7,16276
 8000760:	39deb844 	addi	r7,r7,31457
 8000764:	800148c0 	call	800148c <__adddf3>
 8000768:	1009883a 	mov	r4,r2
 800076c:	180b883a 	mov	r5,r3
 8000770:	2005883a 	mov	r2,r4
 8000774:	2807883a 	mov	r3,r5
 8000778:	d0a5d115 	stw	r2,-26812(gp)
 800077c:	d125d204 	addi	r4,gp,-26808
 8000780:	20c00015 	stw	r3,0(r4)
 				yPosition = 0.5 * (-10) * timeCount * timeCount + timeCount * 45 + 280;
 8000784:	d0a5d117 	ldw	r2,-26812(gp)
 8000788:	d125d204 	addi	r4,gp,-26808
 800078c:	20c00017 	ldw	r3,0(r4)
 8000790:	1009883a 	mov	r4,r2
 8000794:	180b883a 	mov	r5,r3
 8000798:	000d883a 	mov	r6,zero
 800079c:	01f00534 	movhi	r7,49172
 80007a0:	8001ee80 	call	8001ee8 <__muldf3>
 80007a4:	100f883a 	mov	r7,r2
 80007a8:	1811883a 	mov	r8,r3
 80007ac:	380b883a 	mov	r5,r7
 80007b0:	400d883a 	mov	r6,r8
 80007b4:	d0a5d117 	ldw	r2,-26812(gp)
 80007b8:	d125d204 	addi	r4,gp,-26808
 80007bc:	20c00017 	ldw	r3,0(r4)
 80007c0:	2809883a 	mov	r4,r5
 80007c4:	300b883a 	mov	r5,r6
 80007c8:	100d883a 	mov	r6,r2
 80007cc:	180f883a 	mov	r7,r3
 80007d0:	8001ee80 	call	8001ee8 <__muldf3>
 80007d4:	1009883a 	mov	r4,r2
 80007d8:	180b883a 	mov	r5,r3
 80007dc:	2021883a 	mov	r16,r4
 80007e0:	2823883a 	mov	r17,r5
 80007e4:	d0a5d117 	ldw	r2,-26812(gp)
 80007e8:	d125d204 	addi	r4,gp,-26808
 80007ec:	20c00017 	ldw	r3,0(r4)
 80007f0:	1009883a 	mov	r4,r2
 80007f4:	180b883a 	mov	r5,r3
 80007f8:	000d883a 	mov	r6,zero
 80007fc:	01d011f4 	movhi	r7,16455
 8000800:	39e00004 	addi	r7,r7,-32768
 8000804:	8001ee80 	call	8001ee8 <__muldf3>
 8000808:	1009883a 	mov	r4,r2
 800080c:	180b883a 	mov	r5,r3
 8000810:	2005883a 	mov	r2,r4
 8000814:	2807883a 	mov	r3,r5
 8000818:	8009883a 	mov	r4,r16
 800081c:	880b883a 	mov	r5,r17
 8000820:	100d883a 	mov	r6,r2
 8000824:	180f883a 	mov	r7,r3
 8000828:	800148c0 	call	800148c <__adddf3>
 800082c:	1009883a 	mov	r4,r2
 8000830:	180b883a 	mov	r5,r3
 8000834:	2005883a 	mov	r2,r4
 8000838:	2807883a 	mov	r3,r5
 800083c:	1009883a 	mov	r4,r2
 8000840:	180b883a 	mov	r5,r3
 8000844:	000d883a 	mov	r6,zero
 8000848:	01d01cb4 	movhi	r7,16498
 800084c:	39e00004 	addi	r7,r7,-32768
 8000850:	800148c0 	call	800148c <__adddf3>
 8000854:	1009883a 	mov	r4,r2
 8000858:	180b883a 	mov	r5,r3
 800085c:	2005883a 	mov	r2,r4
 8000860:	2807883a 	mov	r3,r5
 8000864:	d0a5d315 	stw	r2,-26804(gp)
 8000868:	d125d404 	addi	r4,gp,-26800
 800086c:	20c00015 	stw	r3,0(r4)
 				*birdy = 480 - yPosition;
 8000870:	d4200017 	ldw	r16,-32768(gp)
 8000874:	d0a5d317 	ldw	r2,-26804(gp)
 8000878:	d125d404 	addi	r4,gp,-26800
 800087c:	20c00017 	ldw	r3,0(r4)
 8000880:	0009883a 	mov	r4,zero
 8000884:	01501fb4 	movhi	r5,16510
 8000888:	100d883a 	mov	r6,r2
 800088c:	180f883a 	mov	r7,r3
 8000890:	80027540 	call	8002754 <__subdf3>
 8000894:	1009883a 	mov	r4,r2
 8000898:	180b883a 	mov	r5,r3
 800089c:	2005883a 	mov	r2,r4
 80008a0:	2807883a 	mov	r3,r5
 80008a4:	1009883a 	mov	r4,r2
 80008a8:	180b883a 	mov	r5,r3
 80008ac:	80012ec0 	call	80012ec <__fixunsdfsi>
 80008b0:	80800015 	stw	r2,0(r16)

 				*first = bestscore % 10;
 80008b4:	d4201117 	ldw	r16,-32700(gp)
 80008b8:	d0a5ea17 	ldw	r2,-26712(gp)
 80008bc:	1009883a 	mov	r4,r2
 80008c0:	01400284 	movi	r5,10
 80008c4:	80014200 	call	8001420 <__modsi3>
 80008c8:	80800015 	stw	r2,0(r16)
 				*second = (bestscore / 10) % 10;
 80008cc:	d4201017 	ldw	r16,-32704(gp)
 80008d0:	d0a5ea17 	ldw	r2,-26712(gp)
 80008d4:	1009883a 	mov	r4,r2
 80008d8:	01400284 	movi	r5,10
 80008dc:	80013cc0 	call	80013cc <__divsi3>
 80008e0:	1009883a 	mov	r4,r2
 80008e4:	01400284 	movi	r5,10
 80008e8:	80014200 	call	8001420 <__modsi3>
 80008ec:	80800015 	stw	r2,0(r16)
 				*third = (bestscore / 100) % 10;
 80008f0:	d4200f17 	ldw	r16,-32708(gp)
 80008f4:	d0a5ea17 	ldw	r2,-26712(gp)
 80008f8:	1009883a 	mov	r4,r2
 80008fc:	01401904 	movi	r5,100
 8000900:	80013cc0 	call	80013cc <__divsi3>
 8000904:	1009883a 	mov	r4,r2
 8000908:	01400284 	movi	r5,10
 800090c:	80014200 	call	8001420 <__modsi3>
 8000910:	80800015 	stw	r2,0(r16)
 	}
 }

 int main(){
 	while (1){
 		while (!gamestart){
 8000914:	d0a5de17 	ldw	r2,-26760(gp)
 8000918:	103f5226 	beq	r2,zero,8000664 <__alt_data_end+0xfc000664>
 				*first = bestscore % 10;
 				*second = (bestscore / 10) % 10;
 				*third = (bestscore / 100) % 10;
 			}
 		}
 		while (gamestart && !gameover){
 800091c:	00025806 	br	8001280 <main+0xc38>

 			if (two_players == false) *status = 0;
 8000920:	d0a5e917 	ldw	r2,-26716(gp)
 8000924:	1000031e 	bne	r2,zero,8000934 <main+0x2ec>
 8000928:	d0a00817 	ldw	r2,-32736(gp)
 800092c:	10000015 	stw	zero,0(r2)
 8000930:	00000306 	br	8000940 <main+0x2f8>
 			else *status = 3;
 8000934:	d0a00817 	ldw	r2,-32736(gp)
 8000938:	00c000c4 	movi	r3,3
 800093c:	10c00015 	stw	r3,0(r2)
 			if (*keycode == 27 && debouncer() && !AIPlay) {
 8000940:	d0a00917 	ldw	r2,-32732(gp)
 8000944:	10800017 	ldw	r2,0(r2)
 8000948:	108006d8 	cmpnei	r2,r2,27
 800094c:	1000061e 	bne	r2,zero,8000968 <main+0x320>
 8000950:	80002680 	call	8000268 <debouncer>
 8000954:	10000426 	beq	r2,zero,8000968 <main+0x320>
 8000958:	d0a5e017 	ldw	r2,-26752(gp)
 800095c:	1000021e 	bne	r2,zero,8000968 <main+0x320>
 				AIPlay = true;
 8000960:	00800044 	movi	r2,1
 8000964:	d0a5e015 	stw	r2,-26752(gp)
 			}
 			if (*keycode == 90 && debouncer() && AIPlay) {
 8000968:	d0a00917 	ldw	r2,-32732(gp)
 800096c:	10800017 	ldw	r2,0(r2)
 8000970:	10801698 	cmpnei	r2,r2,90
 8000974:	1000051e 	bne	r2,zero,800098c <main+0x344>
 8000978:	80002680 	call	8000268 <debouncer>
 800097c:	10000326 	beq	r2,zero,800098c <main+0x344>
 8000980:	d0a5e017 	ldw	r2,-26752(gp)
 8000984:	10000126 	beq	r2,zero,800098c <main+0x344>
 				AIPlay = false;
 8000988:	d025e015 	stw	zero,-26752(gp)
 			}
 			if (AIPlay) AIPlayer(*birdy, pipeXposition);
 800098c:	d0a5e017 	ldw	r2,-26752(gp)
 8000990:	10000c26 	beq	r2,zero,80009c4 <main+0x37c>
 8000994:	d0a00017 	ldw	r2,-32768(gp)
 8000998:	10800017 	ldw	r2,0(r2)
 800099c:	1021883a 	mov	r16,r2
 80009a0:	d0a5d517 	ldw	r2,-26796(gp)
 80009a4:	d125d604 	addi	r4,gp,-26792
 80009a8:	20c00017 	ldw	r3,0(r4)
 80009ac:	1009883a 	mov	r4,r2
 80009b0:	180b883a 	mov	r5,r3
 80009b4:	80030240 	call	8003024 <__fixdfsi>
 80009b8:	8009883a 	mov	r4,r16
 80009bc:	100b883a 	mov	r5,r2
 80009c0:	80004800 	call	8000480 <AIPlayer>
		//update bird position /////////////////////////////////////////////////////////////////////////
 			if (*keycode == 41 && debouncer()) {
 80009c4:	d0a00917 	ldw	r2,-32732(gp)
 80009c8:	10800017 	ldw	r2,0(r2)
 80009cc:	10800a58 	cmpnei	r2,r2,41
 80009d0:	10000e1e 	bne	r2,zero,8000a0c <main+0x3c4>
 80009d4:	80002680 	call	8000268 <debouncer>
 80009d8:	10000c26 	beq	r2,zero,8000a0c <main+0x3c4>
 				jump = true;
 80009dc:	00800044 	movi	r2,1
 80009e0:	d0a5dc15 	stw	r2,-26768(gp)
 				timeCount = 0;
 80009e4:	d025d115 	stw	zero,-26812(gp)
 80009e8:	d0a5d204 	addi	r2,gp,-26808
 80009ec:	10000015 	stw	zero,0(r2)
 				y_init = yPosition;
 80009f0:	d0a5d317 	ldw	r2,-26804(gp)
 80009f4:	d125d404 	addi	r4,gp,-26800
 80009f8:	20c00017 	ldw	r3,0(r4)
 80009fc:	1009883a 	mov	r4,r2
 8000a00:	180b883a 	mov	r5,r3
 8000a04:	80030240 	call	8003024 <__fixdfsi>
 8000a08:	d0a5db15 	stw	r2,-26772(gp)
 			}

 				timeCount += 0.033;
 8000a0c:	d0a5d117 	ldw	r2,-26812(gp)
 8000a10:	d125d204 	addi	r4,gp,-26808
 8000a14:	20c00017 	ldw	r3,0(r4)
 8000a18:	1009883a 	mov	r4,r2
 8000a1c:	180b883a 	mov	r5,r3
 8000a20:	01906274 	movhi	r6,16777
 8000a24:	318dd304 	addi	r6,r6,14156
 8000a28:	01cfe874 	movhi	r7,16289
 8000a2c:	39f95804 	addi	r7,r7,-6816
 8000a30:	800148c0 	call	800148c <__adddf3>
 8000a34:	1009883a 	mov	r4,r2
 8000a38:	180b883a 	mov	r5,r3
 8000a3c:	2005883a 	mov	r2,r4
 8000a40:	2807883a 	mov	r3,r5
 8000a44:	d0a5d115 	stw	r2,-26812(gp)
 8000a48:	d125d204 	addi	r4,gp,-26808
 8000a4c:	20c00015 	stw	r3,0(r4)
 				yPosition = 0.5 * (-10) * timeCount * timeCount + timeCount * 36 + y_init;
 8000a50:	d0a5d117 	ldw	r2,-26812(gp)
 8000a54:	d125d204 	addi	r4,gp,-26808
 8000a58:	20c00017 	ldw	r3,0(r4)
 8000a5c:	1009883a 	mov	r4,r2
 8000a60:	180b883a 	mov	r5,r3
 8000a64:	000d883a 	mov	r6,zero
 8000a68:	01f00534 	movhi	r7,49172
 8000a6c:	8001ee80 	call	8001ee8 <__muldf3>
 8000a70:	100f883a 	mov	r7,r2
 8000a74:	1811883a 	mov	r8,r3
 8000a78:	380b883a 	mov	r5,r7
 8000a7c:	400d883a 	mov	r6,r8
 8000a80:	d0a5d117 	ldw	r2,-26812(gp)
 8000a84:	d125d204 	addi	r4,gp,-26808
 8000a88:	20c00017 	ldw	r3,0(r4)
 8000a8c:	2809883a 	mov	r4,r5
 8000a90:	300b883a 	mov	r5,r6
 8000a94:	100d883a 	mov	r6,r2
 8000a98:	180f883a 	mov	r7,r3
 8000a9c:	8001ee80 	call	8001ee8 <__muldf3>
 8000aa0:	1009883a 	mov	r4,r2
 8000aa4:	180b883a 	mov	r5,r3
 8000aa8:	2021883a 	mov	r16,r4
 8000aac:	2823883a 	mov	r17,r5
 8000ab0:	d0a5d117 	ldw	r2,-26812(gp)
 8000ab4:	d125d204 	addi	r4,gp,-26808
 8000ab8:	20c00017 	ldw	r3,0(r4)
 8000abc:	1009883a 	mov	r4,r2
 8000ac0:	180b883a 	mov	r5,r3
 8000ac4:	000d883a 	mov	r6,zero
 8000ac8:	01d010b4 	movhi	r7,16450
 8000acc:	8001ee80 	call	8001ee8 <__muldf3>
 8000ad0:	1009883a 	mov	r4,r2
 8000ad4:	180b883a 	mov	r5,r3
 8000ad8:	2005883a 	mov	r2,r4
 8000adc:	2807883a 	mov	r3,r5
 8000ae0:	8009883a 	mov	r4,r16
 8000ae4:	880b883a 	mov	r5,r17
 8000ae8:	100d883a 	mov	r6,r2
 8000aec:	180f883a 	mov	r7,r3
 8000af0:	800148c0 	call	800148c <__adddf3>
 8000af4:	1009883a 	mov	r4,r2
 8000af8:	180b883a 	mov	r5,r3
 8000afc:	2021883a 	mov	r16,r4
 8000b00:	2823883a 	mov	r17,r5
 8000b04:	d0a5db17 	ldw	r2,-26772(gp)
 8000b08:	1009883a 	mov	r4,r2
 8000b0c:	80030ac0 	call	80030ac <__floatsidf>
 8000b10:	100f883a 	mov	r7,r2
 8000b14:	1811883a 	mov	r8,r3
 8000b18:	8009883a 	mov	r4,r16
 8000b1c:	880b883a 	mov	r5,r17
 8000b20:	380d883a 	mov	r6,r7
 8000b24:	400f883a 	mov	r7,r8
 8000b28:	800148c0 	call	800148c <__adddf3>
 8000b2c:	1009883a 	mov	r4,r2
 8000b30:	180b883a 	mov	r5,r3
 8000b34:	2005883a 	mov	r2,r4
 8000b38:	2807883a 	mov	r3,r5
 8000b3c:	d0a5d315 	stw	r2,-26804(gp)
 8000b40:	d125d404 	addi	r4,gp,-26800
 8000b44:	20c00015 	stw	r3,0(r4)

 			if (yPosition < 80 || !bird_alive(*birdy, pipeXposition)) {
 8000b48:	d0a5d317 	ldw	r2,-26804(gp)
 8000b4c:	d125d404 	addi	r4,gp,-26800
 8000b50:	20c00017 	ldw	r3,0(r4)
 8000b54:	1009883a 	mov	r4,r2
 8000b58:	180b883a 	mov	r5,r3
 8000b5c:	000d883a 	mov	r6,zero
 8000b60:	01d01534 	movhi	r7,16468
 8000b64:	8001e080 	call	8001e08 <__ledf2>
 8000b68:	10000d16 	blt	r2,zero,8000ba0 <main+0x558>
 8000b6c:	d0a00017 	ldw	r2,-32768(gp)
 8000b70:	10800017 	ldw	r2,0(r2)
 8000b74:	1021883a 	mov	r16,r2
 8000b78:	d0a5d517 	ldw	r2,-26796(gp)
 8000b7c:	d125d604 	addi	r4,gp,-26792
 8000b80:	20c00017 	ldw	r3,0(r4)
 8000b84:	1009883a 	mov	r4,r2
 8000b88:	180b883a 	mov	r5,r3
 8000b8c:	80030240 	call	8003024 <__fixdfsi>
 8000b90:	8009883a 	mov	r4,r16
 8000b94:	100b883a 	mov	r5,r2
 8000b98:	80005840 	call	8000584 <bird_alive>
 8000b9c:	1000031e 	bne	r2,zero,8000bac <main+0x564>
 				jump = false;
 8000ba0:	d025dc15 	stw	zero,-26768(gp)
 				dead = true;
 8000ba4:	00800044 	movi	r2,1
 8000ba8:	d0a5e415 	stw	r2,-26736(gp)
 			}
 			if (yPosition > 480) {
 8000bac:	d0a5d317 	ldw	r2,-26804(gp)
 8000bb0:	d125d404 	addi	r4,gp,-26800
 8000bb4:	20c00017 	ldw	r3,0(r4)
 8000bb8:	1009883a 	mov	r4,r2
 8000bbc:	180b883a 	mov	r5,r3
 8000bc0:	000d883a 	mov	r6,zero
 8000bc4:	01d01fb4 	movhi	r7,16510
 8000bc8:	8001d280 	call	8001d28 <__gedf2>
 8000bcc:	00800e0e 	bge	zero,r2,8000c08 <main+0x5c0>
 				yPosition = 479;
 8000bd0:	d025d315 	stw	zero,-26804(gp)
 8000bd4:	d0e5d404 	addi	r3,gp,-26800
 8000bd8:	00901fb4 	movhi	r2,16510
 8000bdc:	10bc0004 	addi	r2,r2,-4096
 8000be0:	18800015 	stw	r2,0(r3)
 				timeCount = 3.6;
 8000be4:	00b33374 	movhi	r2,52429
 8000be8:	10b33344 	addi	r2,r2,-13107
 8000bec:	d0a5d115 	stw	r2,-26812(gp)
 8000bf0:	d0e5d204 	addi	r3,gp,-26808
 8000bf4:	00900374 	movhi	r2,16397
 8000bf8:	10b33304 	addi	r2,r2,-13108
 8000bfc:	18800015 	stw	r2,0(r3)
 				y_init = 415;
 8000c00:	008067c4 	movi	r2,415
 8000c04:	d0a5db15 	stw	r2,-26772(gp)
 			}
 			if (yPosition2 > 480) {
 8000c08:	d0a5d917 	ldw	r2,-26780(gp)
 8000c0c:	d125da04 	addi	r4,gp,-26776
 8000c10:	20c00017 	ldw	r3,0(r4)
 8000c14:	1009883a 	mov	r4,r2
 8000c18:	180b883a 	mov	r5,r3
 8000c1c:	000d883a 	mov	r6,zero
 8000c20:	01d01fb4 	movhi	r7,16510
 8000c24:	8001d280 	call	8001d28 <__gedf2>
 8000c28:	00800e0e 	bge	zero,r2,8000c64 <main+0x61c>
 				yPosition2 = 479;
 8000c2c:	d025d915 	stw	zero,-26780(gp)
 8000c30:	d0e5da04 	addi	r3,gp,-26776
 8000c34:	00901fb4 	movhi	r2,16510
 8000c38:	10bc0004 	addi	r2,r2,-4096
 8000c3c:	18800015 	stw	r2,0(r3)
 				timeCount2 = 3.6;
 8000c40:	00b33374 	movhi	r2,52429
 8000c44:	10b33344 	addi	r2,r2,-13107
 8000c48:	d0a5d715 	stw	r2,-26788(gp)
 8000c4c:	d0e5d804 	addi	r3,gp,-26784
 8000c50:	00900374 	movhi	r2,16397
 8000c54:	10b33304 	addi	r2,r2,-13108
 8000c58:	18800015 	stw	r2,0(r3)
 				y_init2 = 415;
 8000c5c:	008067c4 	movi	r2,415
 8000c60:	d0a5e215 	stw	r2,-26744(gp)
 			}
 			if (!dead)
 8000c64:	d0a5e417 	ldw	r2,-26736(gp)
 8000c68:	1000111e 	bne	r2,zero,8000cb0 <main+0x668>
 				*birdy = 480 - yPosition;
 8000c6c:	d4200017 	ldw	r16,-32768(gp)
 8000c70:	d0a5d317 	ldw	r2,-26804(gp)
 8000c74:	d125d404 	addi	r4,gp,-26800
 8000c78:	20c00017 	ldw	r3,0(r4)
 8000c7c:	0009883a 	mov	r4,zero
 8000c80:	01501fb4 	movhi	r5,16510
 8000c84:	100d883a 	mov	r6,r2
 8000c88:	180f883a 	mov	r7,r3
 8000c8c:	80027540 	call	8002754 <__subdf3>
 8000c90:	1009883a 	mov	r4,r2
 8000c94:	180b883a 	mov	r5,r3
 8000c98:	2005883a 	mov	r2,r4
 8000c9c:	2807883a 	mov	r3,r5
 8000ca0:	1009883a 	mov	r4,r2
 8000ca4:	180b883a 	mov	r5,r3
 8000ca8:	80012ec0 	call	80012ec <__fixunsdfsi>
 8000cac:	80800015 	stw	r2,0(r16)
 			//update position for the second bird///////////////////////////////////////////////////////
 			if (*keycode == 117 && debouncer()) {
 8000cb0:	d0a00917 	ldw	r2,-32732(gp)
 8000cb4:	10800017 	ldw	r2,0(r2)
 8000cb8:	10801d58 	cmpnei	r2,r2,117
 8000cbc:	10000e1e 	bne	r2,zero,8000cf8 <main+0x6b0>
 8000cc0:	80002680 	call	8000268 <debouncer>
 8000cc4:	10000c26 	beq	r2,zero,8000cf8 <main+0x6b0>
 				jump2 = true;
 8000cc8:	00800044 	movi	r2,1
 8000ccc:	d0a5e315 	stw	r2,-26740(gp)
 				timeCount2 = 0;
 8000cd0:	d025d715 	stw	zero,-26788(gp)
 8000cd4:	d0a5d804 	addi	r2,gp,-26784
 8000cd8:	10000015 	stw	zero,0(r2)
 				y_init2 = yPosition2;
 8000cdc:	d0a5d917 	ldw	r2,-26780(gp)
 8000ce0:	d125da04 	addi	r4,gp,-26776
 8000ce4:	20c00017 	ldw	r3,0(r4)
 8000ce8:	1009883a 	mov	r4,r2
 8000cec:	180b883a 	mov	r5,r3
 8000cf0:	80030240 	call	8003024 <__fixdfsi>
 8000cf4:	d0a5e215 	stw	r2,-26744(gp)
 			}

 				timeCount2 += 0.033;
 8000cf8:	d0a5d717 	ldw	r2,-26788(gp)
 8000cfc:	d125d804 	addi	r4,gp,-26784
 8000d00:	20c00017 	ldw	r3,0(r4)
 8000d04:	1009883a 	mov	r4,r2
 8000d08:	180b883a 	mov	r5,r3
 8000d0c:	01906274 	movhi	r6,16777
 8000d10:	318dd304 	addi	r6,r6,14156
 8000d14:	01cfe874 	movhi	r7,16289
 8000d18:	39f95804 	addi	r7,r7,-6816
 8000d1c:	800148c0 	call	800148c <__adddf3>
 8000d20:	1009883a 	mov	r4,r2
 8000d24:	180b883a 	mov	r5,r3
 8000d28:	2005883a 	mov	r2,r4
 8000d2c:	2807883a 	mov	r3,r5
 8000d30:	d0a5d715 	stw	r2,-26788(gp)
 8000d34:	d125d804 	addi	r4,gp,-26784
 8000d38:	20c00015 	stw	r3,0(r4)
 				yPosition2 = 0.5 * (-10) * timeCount2 * timeCount2 + timeCount2 * 36 + y_init2;
 8000d3c:	d0a5d717 	ldw	r2,-26788(gp)
 8000d40:	d125d804 	addi	r4,gp,-26784
 8000d44:	20c00017 	ldw	r3,0(r4)
 8000d48:	1009883a 	mov	r4,r2
 8000d4c:	180b883a 	mov	r5,r3
 8000d50:	000d883a 	mov	r6,zero
 8000d54:	01f00534 	movhi	r7,49172
 8000d58:	8001ee80 	call	8001ee8 <__muldf3>
 8000d5c:	100f883a 	mov	r7,r2
 8000d60:	1811883a 	mov	r8,r3
 8000d64:	380b883a 	mov	r5,r7
 8000d68:	400d883a 	mov	r6,r8
 8000d6c:	d0a5d717 	ldw	r2,-26788(gp)
 8000d70:	d125d804 	addi	r4,gp,-26784
 8000d74:	20c00017 	ldw	r3,0(r4)
 8000d78:	2809883a 	mov	r4,r5
 8000d7c:	300b883a 	mov	r5,r6
 8000d80:	100d883a 	mov	r6,r2
 8000d84:	180f883a 	mov	r7,r3
 8000d88:	8001ee80 	call	8001ee8 <__muldf3>
 8000d8c:	1009883a 	mov	r4,r2
 8000d90:	180b883a 	mov	r5,r3
 8000d94:	2021883a 	mov	r16,r4
 8000d98:	2823883a 	mov	r17,r5
 8000d9c:	d0a5d717 	ldw	r2,-26788(gp)
 8000da0:	d125d804 	addi	r4,gp,-26784
 8000da4:	20c00017 	ldw	r3,0(r4)
 8000da8:	1009883a 	mov	r4,r2
 8000dac:	180b883a 	mov	r5,r3
 8000db0:	000d883a 	mov	r6,zero
 8000db4:	01d010b4 	movhi	r7,16450
 8000db8:	8001ee80 	call	8001ee8 <__muldf3>
 8000dbc:	1009883a 	mov	r4,r2
 8000dc0:	180b883a 	mov	r5,r3
 8000dc4:	2005883a 	mov	r2,r4
 8000dc8:	2807883a 	mov	r3,r5
 8000dcc:	8009883a 	mov	r4,r16
 8000dd0:	880b883a 	mov	r5,r17
 8000dd4:	100d883a 	mov	r6,r2
 8000dd8:	180f883a 	mov	r7,r3
 8000ddc:	800148c0 	call	800148c <__adddf3>
 8000de0:	1009883a 	mov	r4,r2
 8000de4:	180b883a 	mov	r5,r3
 8000de8:	2021883a 	mov	r16,r4
 8000dec:	2823883a 	mov	r17,r5
 8000df0:	d0a5e217 	ldw	r2,-26744(gp)
 8000df4:	1009883a 	mov	r4,r2
 8000df8:	80030ac0 	call	80030ac <__floatsidf>
 8000dfc:	100f883a 	mov	r7,r2
 8000e00:	1811883a 	mov	r8,r3
 8000e04:	8009883a 	mov	r4,r16
 8000e08:	880b883a 	mov	r5,r17
 8000e0c:	380d883a 	mov	r6,r7
 8000e10:	400f883a 	mov	r7,r8
 8000e14:	800148c0 	call	800148c <__adddf3>
 8000e18:	1009883a 	mov	r4,r2
 8000e1c:	180b883a 	mov	r5,r3
 8000e20:	2005883a 	mov	r2,r4
 8000e24:	2807883a 	mov	r3,r5
 8000e28:	d0a5d915 	stw	r2,-26780(gp)
 8000e2c:	d125da04 	addi	r4,gp,-26776
 8000e30:	20c00015 	stw	r3,0(r4)

 			if (yPosition2 < 80 || !bird_alive(*birdy2, pipeXposition)) {
 8000e34:	d0a5d917 	ldw	r2,-26780(gp)
 8000e38:	d125da04 	addi	r4,gp,-26776
 8000e3c:	20c00017 	ldw	r3,0(r4)
 8000e40:	1009883a 	mov	r4,r2
 8000e44:	180b883a 	mov	r5,r3
 8000e48:	000d883a 	mov	r6,zero
 8000e4c:	01d01534 	movhi	r7,16468
 8000e50:	8001e080 	call	8001e08 <__ledf2>
 8000e54:	10000d16 	blt	r2,zero,8000e8c <main+0x844>
 8000e58:	d0a01417 	ldw	r2,-32688(gp)
 8000e5c:	10800017 	ldw	r2,0(r2)
 8000e60:	1021883a 	mov	r16,r2
 8000e64:	d0a5d517 	ldw	r2,-26796(gp)
 8000e68:	d125d604 	addi	r4,gp,-26792
 8000e6c:	20c00017 	ldw	r3,0(r4)
 8000e70:	1009883a 	mov	r4,r2
 8000e74:	180b883a 	mov	r5,r3
 8000e78:	80030240 	call	8003024 <__fixdfsi>
 8000e7c:	8009883a 	mov	r4,r16
 8000e80:	100b883a 	mov	r5,r2
 8000e84:	80005840 	call	8000584 <bird_alive>
 8000e88:	1000031e 	bne	r2,zero,8000e98 <main+0x850>
 				jump2 = false;
 8000e8c:	d025e315 	stw	zero,-26740(gp)
 				dead2 = true;
 8000e90:	00800044 	movi	r2,1
 8000e94:	d0a5e515 	stw	r2,-26732(gp)
 			}
 			if (!dead2)
 8000e98:	d0a5e517 	ldw	r2,-26732(gp)
 8000e9c:	1000111e 	bne	r2,zero,8000ee4 <main+0x89c>
 				*birdy2 = 480 - yPosition2;
 8000ea0:	d4201417 	ldw	r16,-32688(gp)
 8000ea4:	d0a5d917 	ldw	r2,-26780(gp)
 8000ea8:	d125da04 	addi	r4,gp,-26776
 8000eac:	20c00017 	ldw	r3,0(r4)
 8000eb0:	0009883a 	mov	r4,zero
 8000eb4:	01501fb4 	movhi	r5,16510
 8000eb8:	100d883a 	mov	r6,r2
 8000ebc:	180f883a 	mov	r7,r3
 8000ec0:	80027540 	call	8002754 <__subdf3>
 8000ec4:	1009883a 	mov	r4,r2
 8000ec8:	180b883a 	mov	r5,r3
 8000ecc:	2005883a 	mov	r2,r4
 8000ed0:	2807883a 	mov	r3,r5
 8000ed4:	1009883a 	mov	r4,r2
 8000ed8:	180b883a 	mov	r5,r3
 8000edc:	80012ec0 	call	80012ec <__fixunsdfsi>
 8000ee0:	80800015 	stw	r2,0(r16)

 			if (dead && two_players == false || dead && dead2 && two_players){
 8000ee4:	d0a5e417 	ldw	r2,-26736(gp)
 8000ee8:	10000226 	beq	r2,zero,8000ef4 <main+0x8ac>
 8000eec:	d0a5e917 	ldw	r2,-26716(gp)
 8000ef0:	10000626 	beq	r2,zero,8000f0c <main+0x8c4>
 8000ef4:	d0a5e417 	ldw	r2,-26736(gp)
 8000ef8:	10000726 	beq	r2,zero,8000f18 <main+0x8d0>
 8000efc:	d0a5e517 	ldw	r2,-26732(gp)
 8000f00:	10000526 	beq	r2,zero,8000f18 <main+0x8d0>
 8000f04:	d0a5e917 	ldw	r2,-26716(gp)
 8000f08:	10000326 	beq	r2,zero,8000f18 <main+0x8d0>
 				gameover = true;
 8000f0c:	00800044 	movi	r2,1
 8000f10:	d0a5dd15 	stw	r2,-26764(gp)
 				break;
 8000f14:	0000de06 	br	8001290 <main+0xc48>
 			}
 		//track score
 			if (!dead){
 8000f18:	d0a5e417 	ldw	r2,-26736(gp)
 8000f1c:	1000481e 	bne	r2,zero,8001040 <main+0x9f8>
 				if (pipeXposition <= 450 && pipeXposition > 449.7) score++;
 8000f20:	d0a5d517 	ldw	r2,-26796(gp)
 8000f24:	d125d604 	addi	r4,gp,-26792
 8000f28:	20c00017 	ldw	r3,0(r4)
 8000f2c:	1009883a 	mov	r4,r2
 8000f30:	180b883a 	mov	r5,r3
 8000f34:	000d883a 	mov	r6,zero
 8000f38:	01d01f34 	movhi	r7,16508
 8000f3c:	39c80004 	addi	r7,r7,8192
 8000f40:	8001e080 	call	8001e08 <__ledf2>
 8000f44:	00800e16 	blt	zero,r2,8000f80 <main+0x938>
 8000f48:	d0a5d517 	ldw	r2,-26796(gp)
 8000f4c:	d125d604 	addi	r4,gp,-26792
 8000f50:	20c00017 	ldw	r3,0(r4)
 8000f54:	1009883a 	mov	r4,r2
 8000f58:	180b883a 	mov	r5,r3
 8000f5c:	018cccf4 	movhi	r6,13107
 8000f60:	318cccc4 	addi	r6,r6,13107
 8000f64:	01d01f34 	movhi	r7,16508
 8000f68:	39c6ccc4 	addi	r7,r7,6963
 8000f6c:	8001d280 	call	8001d28 <__gedf2>
 8000f70:	0080030e 	bge	zero,r2,8000f80 <main+0x938>
 8000f74:	d0a5df17 	ldw	r2,-26756(gp)
 8000f78:	10800044 	addi	r2,r2,1
 8000f7c:	d0a5df15 	stw	r2,-26756(gp)
 				if (pipeXposition <= 180 && pipeXposition > 179.7) score++;
 8000f80:	d0a5d517 	ldw	r2,-26796(gp)
 8000f84:	d125d604 	addi	r4,gp,-26792
 8000f88:	20c00017 	ldw	r3,0(r4)
 8000f8c:	1009883a 	mov	r4,r2
 8000f90:	180b883a 	mov	r5,r3
 8000f94:	000d883a 	mov	r6,zero
 8000f98:	01d019f4 	movhi	r7,16487
 8000f9c:	39e00004 	addi	r7,r7,-32768
 8000fa0:	8001e080 	call	8001e08 <__ledf2>
 8000fa4:	00800e16 	blt	zero,r2,8000fe0 <main+0x998>
 8000fa8:	d0a5d517 	ldw	r2,-26796(gp)
 8000fac:	d125d604 	addi	r4,gp,-26792
 8000fb0:	20c00017 	ldw	r3,0(r4)
 8000fb4:	1009883a 	mov	r4,r2
 8000fb8:	180b883a 	mov	r5,r3
 8000fbc:	019999b4 	movhi	r6,26214
 8000fc0:	31999984 	addi	r6,r6,26214
 8000fc4:	01d019b4 	movhi	r7,16486
 8000fc8:	39dd9984 	addi	r7,r7,30310
 8000fcc:	8001d280 	call	8001d28 <__gedf2>
 8000fd0:	0080030e 	bge	zero,r2,8000fe0 <main+0x998>
 8000fd4:	d0a5df17 	ldw	r2,-26756(gp)
 8000fd8:	10800044 	addi	r2,r2,1
 8000fdc:	d0a5df15 	stw	r2,-26756(gp)
 				*first = score % 10;
 8000fe0:	d4201117 	ldw	r16,-32700(gp)
 8000fe4:	d0a5df17 	ldw	r2,-26756(gp)
 8000fe8:	1009883a 	mov	r4,r2
 8000fec:	01400284 	movi	r5,10
 8000ff0:	80014200 	call	8001420 <__modsi3>
 8000ff4:	80800015 	stw	r2,0(r16)
 				*second = (score / 10) % 10;
 8000ff8:	d4201017 	ldw	r16,-32704(gp)
 8000ffc:	d0a5df17 	ldw	r2,-26756(gp)
 8001000:	1009883a 	mov	r4,r2
 8001004:	01400284 	movi	r5,10
 8001008:	80013cc0 	call	80013cc <__divsi3>
 800100c:	1009883a 	mov	r4,r2
 8001010:	01400284 	movi	r5,10
 8001014:	80014200 	call	8001420 <__modsi3>
 8001018:	80800015 	stw	r2,0(r16)
 				*third = (score / 100) % 10;
 800101c:	d4200f17 	ldw	r16,-32708(gp)
 8001020:	d0a5df17 	ldw	r2,-26756(gp)
 8001024:	1009883a 	mov	r4,r2
 8001028:	01401904 	movi	r5,100
 800102c:	80013cc0 	call	80013cc <__divsi3>
 8001030:	1009883a 	mov	r4,r2
 8001034:	01400284 	movi	r5,10
 8001038:	80014200 	call	8001420 <__modsi3>
 800103c:	80800015 	stw	r2,0(r16)
 			}
 			if (!dead2){
 8001040:	d0a5e517 	ldw	r2,-26732(gp)
 8001044:	1000481e 	bne	r2,zero,8001168 <main+0xb20>
 				if (pipeXposition <= 450 && pipeXposition > 449.7) score2++;
 8001048:	d0a5d517 	ldw	r2,-26796(gp)
 800104c:	d125d604 	addi	r4,gp,-26792
 8001050:	20c00017 	ldw	r3,0(r4)
 8001054:	1009883a 	mov	r4,r2
 8001058:	180b883a 	mov	r5,r3
 800105c:	000d883a 	mov	r6,zero
 8001060:	01d01f34 	movhi	r7,16508
 8001064:	39c80004 	addi	r7,r7,8192
 8001068:	8001e080 	call	8001e08 <__ledf2>
 800106c:	00800e16 	blt	zero,r2,80010a8 <main+0xa60>
 8001070:	d0a5d517 	ldw	r2,-26796(gp)
 8001074:	d125d604 	addi	r4,gp,-26792
 8001078:	20c00017 	ldw	r3,0(r4)
 800107c:	1009883a 	mov	r4,r2
 8001080:	180b883a 	mov	r5,r3
 8001084:	018cccf4 	movhi	r6,13107
 8001088:	318cccc4 	addi	r6,r6,13107
 800108c:	01d01f34 	movhi	r7,16508
 8001090:	39c6ccc4 	addi	r7,r7,6963
 8001094:	8001d280 	call	8001d28 <__gedf2>
 8001098:	0080030e 	bge	zero,r2,80010a8 <main+0xa60>
 800109c:	d0a5e617 	ldw	r2,-26728(gp)
 80010a0:	10800044 	addi	r2,r2,1
 80010a4:	d0a5e615 	stw	r2,-26728(gp)
 				if (pipeXposition <= 180 && pipeXposition > 179.7) score2++;
 80010a8:	d0a5d517 	ldw	r2,-26796(gp)
 80010ac:	d125d604 	addi	r4,gp,-26792
 80010b0:	20c00017 	ldw	r3,0(r4)
 80010b4:	1009883a 	mov	r4,r2
 80010b8:	180b883a 	mov	r5,r3
 80010bc:	000d883a 	mov	r6,zero
 80010c0:	01d019f4 	movhi	r7,16487
 80010c4:	39e00004 	addi	r7,r7,-32768
 80010c8:	8001e080 	call	8001e08 <__ledf2>
 80010cc:	00800e16 	blt	zero,r2,8001108 <main+0xac0>
 80010d0:	d0a5d517 	ldw	r2,-26796(gp)
 80010d4:	d125d604 	addi	r4,gp,-26792
 80010d8:	20c00017 	ldw	r3,0(r4)
 80010dc:	1009883a 	mov	r4,r2
 80010e0:	180b883a 	mov	r5,r3
 80010e4:	019999b4 	movhi	r6,26214
 80010e8:	31999984 	addi	r6,r6,26214
 80010ec:	01d019b4 	movhi	r7,16486
 80010f0:	39dd9984 	addi	r7,r7,30310
 80010f4:	8001d280 	call	8001d28 <__gedf2>
 80010f8:	0080030e 	bge	zero,r2,8001108 <main+0xac0>
 80010fc:	d0a5e617 	ldw	r2,-26728(gp)
 8001100:	10800044 	addi	r2,r2,1
 8001104:	d0a5e615 	stw	r2,-26728(gp)
 				*first2 = score2 % 10;
 8001108:	d4201517 	ldw	r16,-32684(gp)
 800110c:	d0a5e617 	ldw	r2,-26728(gp)
 8001110:	1009883a 	mov	r4,r2
 8001114:	01400284 	movi	r5,10
 8001118:	80014200 	call	8001420 <__modsi3>
 800111c:	80800015 	stw	r2,0(r16)
 				*second2 = (score2 / 10) % 10;
 8001120:	d4201617 	ldw	r16,-32680(gp)
 8001124:	d0a5e617 	ldw	r2,-26728(gp)
 8001128:	1009883a 	mov	r4,r2
 800112c:	01400284 	movi	r5,10
 8001130:	80013cc0 	call	80013cc <__divsi3>
 8001134:	1009883a 	mov	r4,r2
 8001138:	01400284 	movi	r5,10
 800113c:	80014200 	call	8001420 <__modsi3>
 8001140:	80800015 	stw	r2,0(r16)
 				*third2 = (score2 / 100) % 10;
 8001144:	d4201717 	ldw	r16,-32676(gp)
 8001148:	d0a5e617 	ldw	r2,-26728(gp)
 800114c:	1009883a 	mov	r4,r2
 8001150:	01401904 	movi	r5,100
 8001154:	80013cc0 	call	80013cc <__divsi3>
 8001158:	1009883a 	mov	r4,r2
 800115c:	01400284 	movi	r5,10
 8001160:	80014200 	call	8001420 <__modsi3>
 8001164:	80800015 	stw	r2,0(r16)
 			}
 			if (dead && two_players){
 8001168:	d0a5e417 	ldw	r2,-26736(gp)
 800116c:	10000526 	beq	r2,zero,8001184 <main+0xb3c>
 8001170:	d0a5e917 	ldw	r2,-26716(gp)
 8001174:	10000326 	beq	r2,zero,8001184 <main+0xb3c>
 				*birdy = -50;
 8001178:	d0a00017 	ldw	r2,-32768(gp)
 800117c:	00fff384 	movi	r3,-50
 8001180:	10c00015 	stw	r3,0(r2)
 			}
 			if (dead2 && two_players){
 8001184:	d0a5e517 	ldw	r2,-26732(gp)
 8001188:	10000526 	beq	r2,zero,80011a0 <main+0xb58>
 800118c:	d0a5e917 	ldw	r2,-26716(gp)
 8001190:	10000326 	beq	r2,zero,80011a0 <main+0xb58>
 				*birdy2 = -50;
 8001194:	d0a01417 	ldw	r2,-32688(gp)
 8001198:	00fff384 	movi	r3,-50
 800119c:	10c00015 	stw	r3,0(r2)
 			}

		//update pipe x position ///////////////////////////////////////////////////////////////////////
 			pipeXposition -= 0.3;
 80011a0:	d0a5d517 	ldw	r2,-26796(gp)
 80011a4:	d125d604 	addi	r4,gp,-26792
 80011a8:	20c00017 	ldw	r3,0(r4)
 80011ac:	1009883a 	mov	r4,r2
 80011b0:	180b883a 	mov	r5,r3
 80011b4:	018cccf4 	movhi	r6,13107
 80011b8:	318cccc4 	addi	r6,r6,13107
 80011bc:	01cff4f4 	movhi	r7,16339
 80011c0:	39ccccc4 	addi	r7,r7,13107
 80011c4:	80027540 	call	8002754 <__subdf3>
 80011c8:	1009883a 	mov	r4,r2
 80011cc:	180b883a 	mov	r5,r3
 80011d0:	2005883a 	mov	r2,r4
 80011d4:	2807883a 	mov	r3,r5
 80011d8:	d0a5d515 	stw	r2,-26796(gp)
 80011dc:	d125d604 	addi	r4,gp,-26792
 80011e0:	20c00015 	stw	r3,0(r4)

 			if (pipeXposition <= 100){
 80011e4:	d0a5d517 	ldw	r2,-26796(gp)
 80011e8:	d125d604 	addi	r4,gp,-26792
 80011ec:	20c00017 	ldw	r3,0(r4)
 80011f0:	1009883a 	mov	r4,r2
 80011f4:	180b883a 	mov	r5,r3
 80011f8:	000d883a 	mov	r6,zero
 80011fc:	01d01674 	movhi	r7,16473
 8001200:	8001e080 	call	8001e08 <__ledf2>
 8001204:	00801616 	blt	zero,r2,8001260 <main+0xc18>
 				*pipe5 = *pipe3;
 8001208:	d0a00717 	ldw	r2,-32740(gp)
 800120c:	d0e00317 	ldw	r3,-32756(gp)
 8001210:	18c00017 	ldw	r3,0(r3)
 8001214:	10c00015 	stw	r3,0(r2)
 				*pipe2 = *pipe1;
 8001218:	d0a00417 	ldw	r2,-32752(gp)
 800121c:	d0e00517 	ldw	r3,-32748(gp)
 8001220:	18c00017 	ldw	r3,0(r3)
 8001224:	10c00015 	stw	r3,0(r2)
 				pipeXposition = 640;
 8001228:	d025d515 	stw	zero,-26796(gp)
 800122c:	d0a5d604 	addi	r2,gp,-26792
 8001230:	00d02134 	movhi	r3,16516
 8001234:	10c00015 	stw	r3,0(r2)
 				*pipe1 = *pipe4;
 8001238:	d0a00517 	ldw	r2,-32748(gp)
 800123c:	d0e00617 	ldw	r3,-32744(gp)
 8001240:	18c00017 	ldw	r3,0(r3)
 8001244:	10c00015 	stw	r3,0(r2)
 				*pipe3 = randomHeight();
 8001248:	d4200317 	ldw	r16,-32756(gp)
 800124c:	80002cc0 	call	80002cc <randomHeight>
 8001250:	80800015 	stw	r2,0(r16)
 				*pipe4 = randomHeight();
 8001254:	d4200617 	ldw	r16,-32744(gp)
 8001258:	80002cc0 	call	80002cc <randomHeight>
 800125c:	80800015 	stw	r2,0(r16)
 			}
 			*pipe_x = pipeXposition;
 8001260:	d4200217 	ldw	r16,-32760(gp)
 8001264:	d0a5d517 	ldw	r2,-26796(gp)
 8001268:	d125d604 	addi	r4,gp,-26792
 800126c:	20c00017 	ldw	r3,0(r4)
 8001270:	1009883a 	mov	r4,r2
 8001274:	180b883a 	mov	r5,r3
 8001278:	80012ec0 	call	80012ec <__fixunsdfsi>
 800127c:	80800015 	stw	r2,0(r16)
 				*first = bestscore % 10;
 				*second = (bestscore / 10) % 10;
 				*third = (bestscore / 100) % 10;
 			}
 		}
 		while (gamestart && !gameover){
 8001280:	d0a5de17 	ldw	r2,-26760(gp)
 8001284:	10000226 	beq	r2,zero,8001290 <main+0xc48>
 8001288:	d0a5dd17 	ldw	r2,-26764(gp)
 800128c:	103da426 	beq	r2,zero,8000920 <__alt_data_end+0xfc000920>
 				*pipe3 = randomHeight();
 				*pipe4 = randomHeight();
 			}
 			*pipe_x = pipeXposition;
 		}
 		if (gameover){
 8001290:	d0a5dd17 	ldw	r2,-26764(gp)
 8001294:	10001426 	beq	r2,zero,80012e8 <main+0xca0>
 			int i;
 			bestscore = (score > bestscore) ? score : bestscore;
 8001298:	d0a5ea17 	ldw	r2,-26712(gp)
 800129c:	d0e5df17 	ldw	r3,-26756(gp)
 80012a0:	10c0010e 	bge	r2,r3,80012a8 <main+0xc60>
 80012a4:	1805883a 	mov	r2,r3
 80012a8:	d0a5ea15 	stw	r2,-26712(gp)
 			bestscore = (score2 > bestscore) ? score2 : bestscore;
 80012ac:	d0a5ea17 	ldw	r2,-26712(gp)
 80012b0:	d0e5e617 	ldw	r3,-26728(gp)
 80012b4:	10c0010e 	bge	r2,r3,80012bc <main+0xc74>
 80012b8:	1805883a 	mov	r2,r3
 80012bc:	d0a5ea15 	stw	r2,-26712(gp)
 			for (i = 0; i < 5000; i++) rand();
 80012c0:	e03ffd15 	stw	zero,-12(fp)
 80012c4:	00000406 	br	80012d8 <main+0xc90>
 80012c8:	80032c40 	call	80032c4 <rand>
 80012cc:	e0bffd17 	ldw	r2,-12(fp)
 80012d0:	10800044 	addi	r2,r2,1
 80012d4:	e0bffd15 	stw	r2,-12(fp)
 80012d8:	e0bffd17 	ldw	r2,-12(fp)
 80012dc:	1084e210 	cmplti	r2,r2,5000
 80012e0:	103ff91e 	bne	r2,zero,80012c8 <__alt_data_end+0xfc0012c8>
 			gamestart = false;
 80012e4:	d025de15 	stw	zero,-26760(gp)
 		}
 	}
 80012e8:	003cdd06 	br	8000660 <__alt_data_end+0xfc000660>

080012ec <__fixunsdfsi>:
 80012ec:	defffd04 	addi	sp,sp,-12
 80012f0:	000d883a 	mov	r6,zero
 80012f4:	01d07834 	movhi	r7,16864
 80012f8:	dc400115 	stw	r17,4(sp)
 80012fc:	dc000015 	stw	r16,0(sp)
 8001300:	dfc00215 	stw	ra,8(sp)
 8001304:	2023883a 	mov	r17,r4
 8001308:	2821883a 	mov	r16,r5
 800130c:	8001d280 	call	8001d28 <__gedf2>
 8001310:	1000080e 	bge	r2,zero,8001334 <__fixunsdfsi+0x48>
 8001314:	8809883a 	mov	r4,r17
 8001318:	800b883a 	mov	r5,r16
 800131c:	80030240 	call	8003024 <__fixdfsi>
 8001320:	dfc00217 	ldw	ra,8(sp)
 8001324:	dc400117 	ldw	r17,4(sp)
 8001328:	dc000017 	ldw	r16,0(sp)
 800132c:	dec00304 	addi	sp,sp,12
 8001330:	f800283a 	ret
 8001334:	000d883a 	mov	r6,zero
 8001338:	01d07834 	movhi	r7,16864
 800133c:	8809883a 	mov	r4,r17
 8001340:	800b883a 	mov	r5,r16
 8001344:	80027540 	call	8002754 <__subdf3>
 8001348:	180b883a 	mov	r5,r3
 800134c:	1009883a 	mov	r4,r2
 8001350:	80030240 	call	8003024 <__fixdfsi>
 8001354:	00e00034 	movhi	r3,32768
 8001358:	10c5883a 	add	r2,r2,r3
 800135c:	003ff006 	br	8001320 <__alt_data_end+0xfc001320>

08001360 <udivmodsi4>:
 8001360:	2900182e 	bgeu	r5,r4,80013c4 <udivmodsi4+0x64>
 8001364:	28001716 	blt	r5,zero,80013c4 <udivmodsi4+0x64>
 8001368:	00800804 	movi	r2,32
 800136c:	00c00044 	movi	r3,1
 8001370:	00000206 	br	800137c <udivmodsi4+0x1c>
 8001374:	10001126 	beq	r2,zero,80013bc <udivmodsi4+0x5c>
 8001378:	28000516 	blt	r5,zero,8001390 <udivmodsi4+0x30>
 800137c:	294b883a 	add	r5,r5,r5
 8001380:	10bfffc4 	addi	r2,r2,-1
 8001384:	18c7883a 	add	r3,r3,r3
 8001388:	293ffa36 	bltu	r5,r4,8001374 <__alt_data_end+0xfc001374>
 800138c:	18000b26 	beq	r3,zero,80013bc <udivmodsi4+0x5c>
 8001390:	0005883a 	mov	r2,zero
 8001394:	21400236 	bltu	r4,r5,80013a0 <udivmodsi4+0x40>
 8001398:	2149c83a 	sub	r4,r4,r5
 800139c:	10c4b03a 	or	r2,r2,r3
 80013a0:	1806d07a 	srli	r3,r3,1
 80013a4:	280ad07a 	srli	r5,r5,1
 80013a8:	183ffa1e 	bne	r3,zero,8001394 <__alt_data_end+0xfc001394>
 80013ac:	3000011e 	bne	r6,zero,80013b4 <udivmodsi4+0x54>
 80013b0:	f800283a 	ret
 80013b4:	2005883a 	mov	r2,r4
 80013b8:	f800283a 	ret
 80013bc:	0005883a 	mov	r2,zero
 80013c0:	003ffa06 	br	80013ac <__alt_data_end+0xfc0013ac>
 80013c4:	00c00044 	movi	r3,1
 80013c8:	003ff106 	br	8001390 <__alt_data_end+0xfc001390>

080013cc <__divsi3>:
 80013cc:	defffe04 	addi	sp,sp,-8
 80013d0:	dfc00115 	stw	ra,4(sp)
 80013d4:	dc000015 	stw	r16,0(sp)
 80013d8:	20000b16 	blt	r4,zero,8001408 <__divsi3+0x3c>
 80013dc:	0021883a 	mov	r16,zero
 80013e0:	28000c16 	blt	r5,zero,8001414 <__divsi3+0x48>
 80013e4:	000d883a 	mov	r6,zero
 80013e8:	80013600 	call	8001360 <udivmodsi4>
 80013ec:	0407c83a 	sub	r3,zero,r16
 80013f0:	1884f03a 	xor	r2,r3,r2
 80013f4:	1405883a 	add	r2,r2,r16
 80013f8:	dfc00117 	ldw	ra,4(sp)
 80013fc:	dc000017 	ldw	r16,0(sp)
 8001400:	dec00204 	addi	sp,sp,8
 8001404:	f800283a 	ret
 8001408:	0109c83a 	sub	r4,zero,r4
 800140c:	04000044 	movi	r16,1
 8001410:	283ff40e 	bge	r5,zero,80013e4 <__alt_data_end+0xfc0013e4>
 8001414:	014bc83a 	sub	r5,zero,r5
 8001418:	8400005c 	xori	r16,r16,1
 800141c:	003ff106 	br	80013e4 <__alt_data_end+0xfc0013e4>

08001420 <__modsi3>:
 8001420:	defffd04 	addi	sp,sp,-12
 8001424:	dfc00215 	stw	ra,8(sp)
 8001428:	dc400115 	stw	r17,4(sp)
 800142c:	dc000015 	stw	r16,0(sp)
 8001430:	20000c16 	blt	r4,zero,8001464 <__modsi3+0x44>
 8001434:	0023883a 	mov	r17,zero
 8001438:	0021883a 	mov	r16,zero
 800143c:	28000d16 	blt	r5,zero,8001474 <__modsi3+0x54>
 8001440:	01800044 	movi	r6,1
 8001444:	80013600 	call	8001360 <udivmodsi4>
 8001448:	1404f03a 	xor	r2,r2,r16
 800144c:	8885883a 	add	r2,r17,r2
 8001450:	dfc00217 	ldw	ra,8(sp)
 8001454:	dc400117 	ldw	r17,4(sp)
 8001458:	dc000017 	ldw	r16,0(sp)
 800145c:	dec00304 	addi	sp,sp,12
 8001460:	f800283a 	ret
 8001464:	0109c83a 	sub	r4,zero,r4
 8001468:	04400044 	movi	r17,1
 800146c:	043fffc4 	movi	r16,-1
 8001470:	283ff30e 	bge	r5,zero,8001440 <__alt_data_end+0xfc001440>
 8001474:	014bc83a 	sub	r5,zero,r5
 8001478:	003ff106 	br	8001440 <__alt_data_end+0xfc001440>

0800147c <__udivsi3>:
 800147c:	000d883a 	mov	r6,zero
 8001480:	80013601 	jmpi	8001360 <udivmodsi4>

08001484 <__umodsi3>:
 8001484:	01800044 	movi	r6,1
 8001488:	80013601 	jmpi	8001360 <udivmodsi4>

0800148c <__adddf3>:
 800148c:	02000434 	movhi	r8,16
 8001490:	423fffc4 	addi	r8,r8,-1
 8001494:	defffb04 	addi	sp,sp,-20
 8001498:	2a12703a 	and	r9,r5,r8
 800149c:	2806d7fa 	srli	r3,r5,31
 80014a0:	3a10703a 	and	r8,r7,r8
 80014a4:	3804d53a 	srli	r2,r7,20
 80014a8:	3014d77a 	srli	r10,r6,29
 80014ac:	dc000015 	stw	r16,0(sp)
 80014b0:	481290fa 	slli	r9,r9,3
 80014b4:	2820d53a 	srli	r16,r5,20
 80014b8:	401090fa 	slli	r8,r8,3
 80014bc:	200ad77a 	srli	r5,r4,29
 80014c0:	380ed7fa 	srli	r7,r7,31
 80014c4:	dc800215 	stw	r18,8(sp)
 80014c8:	dc400115 	stw	r17,4(sp)
 80014cc:	dfc00415 	stw	ra,16(sp)
 80014d0:	dcc00315 	stw	r19,12(sp)
 80014d4:	1c803fcc 	andi	r18,r3,255
 80014d8:	8401ffcc 	andi	r16,r16,2047
 80014dc:	494ab03a 	or	r5,r9,r5
 80014e0:	202290fa 	slli	r17,r4,3
 80014e4:	1081ffcc 	andi	r2,r2,2047
 80014e8:	4290b03a 	or	r8,r8,r10
 80014ec:	300c90fa 	slli	r6,r6,3
 80014f0:	91c07026 	beq	r18,r7,80016b4 <__adddf3+0x228>
 80014f4:	8087c83a 	sub	r3,r16,r2
 80014f8:	00c0b30e 	bge	zero,r3,80017c8 <__adddf3+0x33c>
 80014fc:	10002a1e 	bne	r2,zero,80015a8 <__adddf3+0x11c>
 8001500:	4184b03a 	or	r2,r8,r6
 8001504:	1000991e 	bne	r2,zero,800176c <__adddf3+0x2e0>
 8001508:	888001cc 	andi	r2,r17,7
 800150c:	10005b26 	beq	r2,zero,800167c <__adddf3+0x1f0>
 8001510:	88c003cc 	andi	r3,r17,15
 8001514:	00800104 	movi	r2,4
 8001518:	18805826 	beq	r3,r2,800167c <__adddf3+0x1f0>
 800151c:	89800104 	addi	r6,r17,4
 8001520:	3463803a 	cmpltu	r17,r6,r17
 8001524:	2c4b883a 	add	r5,r5,r17
 8001528:	2880202c 	andhi	r2,r5,128
 800152c:	9007883a 	mov	r3,r18
 8001530:	3023883a 	mov	r17,r6
 8001534:	10005426 	beq	r2,zero,8001688 <__adddf3+0x1fc>
 8001538:	84000044 	addi	r16,r16,1
 800153c:	0081ffc4 	movi	r2,2047
 8001540:	8080c126 	beq	r16,r2,8001848 <__adddf3+0x3bc>
 8001544:	013fe034 	movhi	r4,65408
 8001548:	213fffc4 	addi	r4,r4,-1
 800154c:	290a703a 	and	r5,r5,r4
 8001550:	2804977a 	slli	r2,r5,29
 8001554:	280a927a 	slli	r5,r5,9
 8001558:	8822d0fa 	srli	r17,r17,3
 800155c:	8401ffcc 	andi	r16,r16,2047
 8001560:	2808d33a 	srli	r4,r5,12
 8001564:	1444b03a 	or	r2,r2,r17
 8001568:	8401ffcc 	andi	r16,r16,2047
 800156c:	800a953a 	slli	r5,r16,20
 8001570:	18c03fcc 	andi	r3,r3,255
 8001574:	04000434 	movhi	r16,16
 8001578:	180697fa 	slli	r3,r3,31
 800157c:	843fffc4 	addi	r16,r16,-1
 8001580:	2420703a 	and	r16,r4,r16
 8001584:	8160b03a 	or	r16,r16,r5
 8001588:	80c6b03a 	or	r3,r16,r3
 800158c:	dfc00417 	ldw	ra,16(sp)
 8001590:	dcc00317 	ldw	r19,12(sp)
 8001594:	dc800217 	ldw	r18,8(sp)
 8001598:	dc400117 	ldw	r17,4(sp)
 800159c:	dc000017 	ldw	r16,0(sp)
 80015a0:	dec00504 	addi	sp,sp,20
 80015a4:	f800283a 	ret
 80015a8:	0081ffc4 	movi	r2,2047
 80015ac:	80bfd626 	beq	r16,r2,8001508 <__alt_data_end+0xfc001508>
 80015b0:	42002034 	orhi	r8,r8,128
 80015b4:	00800e04 	movi	r2,56
 80015b8:	10c0a616 	blt	r2,r3,8001854 <__adddf3+0x3c8>
 80015bc:	008007c4 	movi	r2,31
 80015c0:	10c0c916 	blt	r2,r3,80018e8 <__adddf3+0x45c>
 80015c4:	00800804 	movi	r2,32
 80015c8:	10c5c83a 	sub	r2,r2,r3
 80015cc:	408e983a 	sll	r7,r8,r2
 80015d0:	30c8d83a 	srl	r4,r6,r3
 80015d4:	3084983a 	sll	r2,r6,r2
 80015d8:	40c6d83a 	srl	r3,r8,r3
 80015dc:	390cb03a 	or	r6,r7,r4
 80015e0:	1004c03a 	cmpne	r2,r2,zero
 80015e4:	308cb03a 	or	r6,r6,r2
 80015e8:	898dc83a 	sub	r6,r17,r6
 80015ec:	89a3803a 	cmpltu	r17,r17,r6
 80015f0:	28cbc83a 	sub	r5,r5,r3
 80015f4:	2c4bc83a 	sub	r5,r5,r17
 80015f8:	3023883a 	mov	r17,r6
 80015fc:	2880202c 	andhi	r2,r5,128
 8001600:	10006d26 	beq	r2,zero,80017b8 <__adddf3+0x32c>
 8001604:	04c02034 	movhi	r19,128
 8001608:	9cffffc4 	addi	r19,r19,-1
 800160c:	2ce6703a 	and	r19,r5,r19
 8001610:	98007e26 	beq	r19,zero,800180c <__adddf3+0x380>
 8001614:	9809883a 	mov	r4,r19
 8001618:	80032200 	call	8003220 <__clzsi2>
 800161c:	10fffe04 	addi	r3,r2,-8
 8001620:	010007c4 	movi	r4,31
 8001624:	20c07f16 	blt	r4,r3,8001824 <__adddf3+0x398>
 8001628:	01400a04 	movi	r5,40
 800162c:	2885c83a 	sub	r2,r5,r2
 8001630:	888ad83a 	srl	r5,r17,r2
 8001634:	98e6983a 	sll	r19,r19,r3
 8001638:	88e2983a 	sll	r17,r17,r3
 800163c:	2ce6b03a 	or	r19,r5,r19
 8001640:	1c007c16 	blt	r3,r16,8001834 <__adddf3+0x3a8>
 8001644:	1c21c83a 	sub	r16,r3,r16
 8001648:	81400044 	addi	r5,r16,1
 800164c:	00c007c4 	movi	r3,31
 8001650:	19409816 	blt	r3,r5,80018b4 <__adddf3+0x428>
 8001654:	1c21c83a 	sub	r16,r3,r16
 8001658:	8c08983a 	sll	r4,r17,r16
 800165c:	8946d83a 	srl	r3,r17,r5
 8001660:	9c20983a 	sll	r16,r19,r16
 8001664:	2008c03a 	cmpne	r4,r4,zero
 8001668:	994ad83a 	srl	r5,r19,r5
 800166c:	1c06b03a 	or	r3,r3,r16
 8001670:	1922b03a 	or	r17,r3,r4
 8001674:	0021883a 	mov	r16,zero
 8001678:	003fa306 	br	8001508 <__alt_data_end+0xfc001508>
 800167c:	2880202c 	andhi	r2,r5,128
 8001680:	9007883a 	mov	r3,r18
 8001684:	103fac1e 	bne	r2,zero,8001538 <__alt_data_end+0xfc001538>
 8001688:	2804977a 	slli	r2,r5,29
 800168c:	8822d0fa 	srli	r17,r17,3
 8001690:	0101ffc4 	movi	r4,2047
 8001694:	280ad0fa 	srli	r5,r5,3
 8001698:	1444b03a 	or	r2,r2,r17
 800169c:	81002c26 	beq	r16,r4,8001750 <__adddf3+0x2c4>
 80016a0:	8120703a 	and	r16,r16,r4
 80016a4:	01000434 	movhi	r4,16
 80016a8:	213fffc4 	addi	r4,r4,-1
 80016ac:	2908703a 	and	r4,r5,r4
 80016b0:	003fad06 	br	8001568 <__alt_data_end+0xfc001568>
 80016b4:	8089c83a 	sub	r4,r16,r2
 80016b8:	01006a0e 	bge	zero,r4,8001864 <__adddf3+0x3d8>
 80016bc:	10003326 	beq	r2,zero,800178c <__adddf3+0x300>
 80016c0:	0081ffc4 	movi	r2,2047
 80016c4:	80bf9026 	beq	r16,r2,8001508 <__alt_data_end+0xfc001508>
 80016c8:	42002034 	orhi	r8,r8,128
 80016cc:	00800e04 	movi	r2,56
 80016d0:	1100b116 	blt	r2,r4,8001998 <__adddf3+0x50c>
 80016d4:	008007c4 	movi	r2,31
 80016d8:	1100e216 	blt	r2,r4,8001a64 <__adddf3+0x5d8>
 80016dc:	00800804 	movi	r2,32
 80016e0:	1105c83a 	sub	r2,r2,r4
 80016e4:	4092983a 	sll	r9,r8,r2
 80016e8:	310ed83a 	srl	r7,r6,r4
 80016ec:	3084983a 	sll	r2,r6,r2
 80016f0:	4110d83a 	srl	r8,r8,r4
 80016f4:	49ccb03a 	or	r6,r9,r7
 80016f8:	1004c03a 	cmpne	r2,r2,zero
 80016fc:	308cb03a 	or	r6,r6,r2
 8001700:	344d883a 	add	r6,r6,r17
 8001704:	3463803a 	cmpltu	r17,r6,r17
 8001708:	414b883a 	add	r5,r8,r5
 800170c:	2c4b883a 	add	r5,r5,r17
 8001710:	3023883a 	mov	r17,r6
 8001714:	2880202c 	andhi	r2,r5,128
 8001718:	10002726 	beq	r2,zero,80017b8 <__adddf3+0x32c>
 800171c:	84000044 	addi	r16,r16,1
 8001720:	0081ffc4 	movi	r2,2047
 8001724:	8080ae26 	beq	r16,r2,80019e0 <__adddf3+0x554>
 8001728:	00bfe034 	movhi	r2,65408
 800172c:	10bfffc4 	addi	r2,r2,-1
 8001730:	288a703a 	and	r5,r5,r2
 8001734:	880cd07a 	srli	r6,r17,1
 8001738:	280897fa 	slli	r4,r5,31
 800173c:	88c0004c 	andi	r3,r17,1
 8001740:	30e2b03a 	or	r17,r6,r3
 8001744:	280ad07a 	srli	r5,r5,1
 8001748:	8922b03a 	or	r17,r17,r4
 800174c:	003f6e06 	br	8001508 <__alt_data_end+0xfc001508>
 8001750:	1148b03a 	or	r4,r2,r5
 8001754:	20003c26 	beq	r4,zero,8001848 <__adddf3+0x3bc>
 8001758:	29000234 	orhi	r4,r5,8
 800175c:	01400434 	movhi	r5,16
 8001760:	297fffc4 	addi	r5,r5,-1
 8001764:	2148703a 	and	r4,r4,r5
 8001768:	003f7f06 	br	8001568 <__alt_data_end+0xfc001568>
 800176c:	18ffffc4 	addi	r3,r3,-1
 8001770:	18004d1e 	bne	r3,zero,80018a8 <__adddf3+0x41c>
 8001774:	898dc83a 	sub	r6,r17,r6
 8001778:	89a3803a 	cmpltu	r17,r17,r6
 800177c:	2a0bc83a 	sub	r5,r5,r8
 8001780:	2c4bc83a 	sub	r5,r5,r17
 8001784:	3023883a 	mov	r17,r6
 8001788:	003f9c06 	br	80015fc <__alt_data_end+0xfc0015fc>
 800178c:	4184b03a 	or	r2,r8,r6
 8001790:	103f5d26 	beq	r2,zero,8001508 <__alt_data_end+0xfc001508>
 8001794:	213fffc4 	addi	r4,r4,-1
 8001798:	203fd926 	beq	r4,zero,8001700 <__alt_data_end+0xfc001700>
 800179c:	0081ffc4 	movi	r2,2047
 80017a0:	80bfca1e 	bne	r16,r2,80016cc <__alt_data_end+0xfc0016cc>
 80017a4:	003f5806 	br	8001508 <__alt_data_end+0xfc001508>
 80017a8:	10c8b03a 	or	r4,r2,r3
 80017ac:	20008b26 	beq	r4,zero,80019dc <__adddf3+0x550>
 80017b0:	100b883a 	mov	r5,r2
 80017b4:	1823883a 	mov	r17,r3
 80017b8:	888001cc 	andi	r2,r17,7
 80017bc:	103f541e 	bne	r2,zero,8001510 <__alt_data_end+0xfc001510>
 80017c0:	9007883a 	mov	r3,r18
 80017c4:	003fb006 	br	8001688 <__alt_data_end+0xfc001688>
 80017c8:	1800531e 	bne	r3,zero,8001918 <__adddf3+0x48c>
 80017cc:	80800044 	addi	r2,r16,1
 80017d0:	1081ffcc 	andi	r2,r2,2047
 80017d4:	00c00044 	movi	r3,1
 80017d8:	1880990e 	bge	r3,r2,8001a40 <__adddf3+0x5b4>
 80017dc:	8985c83a 	sub	r2,r17,r6
 80017e0:	8887803a 	cmpltu	r3,r17,r2
 80017e4:	2a27c83a 	sub	r19,r5,r8
 80017e8:	98e7c83a 	sub	r19,r19,r3
 80017ec:	98c0202c 	andhi	r3,r19,128
 80017f0:	18006226 	beq	r3,zero,800197c <__adddf3+0x4f0>
 80017f4:	3463c83a 	sub	r17,r6,r17
 80017f8:	4151c83a 	sub	r8,r8,r5
 80017fc:	344d803a 	cmpltu	r6,r6,r17
 8001800:	41a7c83a 	sub	r19,r8,r6
 8001804:	3825883a 	mov	r18,r7
 8001808:	983f821e 	bne	r19,zero,8001614 <__alt_data_end+0xfc001614>
 800180c:	8809883a 	mov	r4,r17
 8001810:	80032200 	call	8003220 <__clzsi2>
 8001814:	10800804 	addi	r2,r2,32
 8001818:	10fffe04 	addi	r3,r2,-8
 800181c:	010007c4 	movi	r4,31
 8001820:	20ff810e 	bge	r4,r3,8001628 <__alt_data_end+0xfc001628>
 8001824:	14fff604 	addi	r19,r2,-40
 8001828:	8ce6983a 	sll	r19,r17,r19
 800182c:	0023883a 	mov	r17,zero
 8001830:	1c3f840e 	bge	r3,r16,8001644 <__alt_data_end+0xfc001644>
 8001834:	017fe034 	movhi	r5,65408
 8001838:	297fffc4 	addi	r5,r5,-1
 800183c:	80e1c83a 	sub	r16,r16,r3
 8001840:	994a703a 	and	r5,r19,r5
 8001844:	003f3006 	br	8001508 <__alt_data_end+0xfc001508>
 8001848:	0009883a 	mov	r4,zero
 800184c:	0005883a 	mov	r2,zero
 8001850:	003f4506 	br	8001568 <__alt_data_end+0xfc001568>
 8001854:	418cb03a 	or	r6,r8,r6
 8001858:	300cc03a 	cmpne	r6,r6,zero
 800185c:	0007883a 	mov	r3,zero
 8001860:	003f6106 	br	80015e8 <__alt_data_end+0xfc0015e8>
 8001864:	2000921e 	bne	r4,zero,8001ab0 <__adddf3+0x624>
 8001868:	80800044 	addi	r2,r16,1
 800186c:	11c1ffcc 	andi	r7,r2,2047
 8001870:	01000044 	movi	r4,1
 8001874:	21c0610e 	bge	r4,r7,80019fc <__adddf3+0x570>
 8001878:	0101ffc4 	movi	r4,2047
 800187c:	1100a326 	beq	r2,r4,8001b0c <__adddf3+0x680>
 8001880:	344d883a 	add	r6,r6,r17
 8001884:	3463803a 	cmpltu	r17,r6,r17
 8001888:	414b883a 	add	r5,r8,r5
 800188c:	2c4b883a 	add	r5,r5,r17
 8001890:	282297fa 	slli	r17,r5,31
 8001894:	300cd07a 	srli	r6,r6,1
 8001898:	280ad07a 	srli	r5,r5,1
 800189c:	1021883a 	mov	r16,r2
 80018a0:	89a2b03a 	or	r17,r17,r6
 80018a4:	003f1806 	br	8001508 <__alt_data_end+0xfc001508>
 80018a8:	0081ffc4 	movi	r2,2047
 80018ac:	80bf411e 	bne	r16,r2,80015b4 <__alt_data_end+0xfc0015b4>
 80018b0:	003f1506 	br	8001508 <__alt_data_end+0xfc001508>
 80018b4:	80bff844 	addi	r2,r16,-31
 80018b8:	00c00804 	movi	r3,32
 80018bc:	9884d83a 	srl	r2,r19,r2
 80018c0:	28c04a26 	beq	r5,r3,80019ec <__adddf3+0x560>
 80018c4:	00c00fc4 	movi	r3,63
 80018c8:	1c21c83a 	sub	r16,r3,r16
 80018cc:	9c26983a 	sll	r19,r19,r16
 80018d0:	9c62b03a 	or	r17,r19,r17
 80018d4:	8822c03a 	cmpne	r17,r17,zero
 80018d8:	88a2b03a 	or	r17,r17,r2
 80018dc:	000b883a 	mov	r5,zero
 80018e0:	0021883a 	mov	r16,zero
 80018e4:	003fb406 	br	80017b8 <__alt_data_end+0xfc0017b8>
 80018e8:	18bff804 	addi	r2,r3,-32
 80018ec:	01000804 	movi	r4,32
 80018f0:	4084d83a 	srl	r2,r8,r2
 80018f4:	19003f26 	beq	r3,r4,80019f4 <__adddf3+0x568>
 80018f8:	01001004 	movi	r4,64
 80018fc:	20c7c83a 	sub	r3,r4,r3
 8001900:	40d0983a 	sll	r8,r8,r3
 8001904:	418cb03a 	or	r6,r8,r6
 8001908:	300cc03a 	cmpne	r6,r6,zero
 800190c:	308cb03a 	or	r6,r6,r2
 8001910:	0007883a 	mov	r3,zero
 8001914:	003f3406 	br	80015e8 <__alt_data_end+0xfc0015e8>
 8001918:	80002326 	beq	r16,zero,80019a8 <__adddf3+0x51c>
 800191c:	0101ffc4 	movi	r4,2047
 8001920:	11005e26 	beq	r2,r4,8001a9c <__adddf3+0x610>
 8001924:	00c7c83a 	sub	r3,zero,r3
 8001928:	29402034 	orhi	r5,r5,128
 800192c:	01000e04 	movi	r4,56
 8001930:	20c07216 	blt	r4,r3,8001afc <__adddf3+0x670>
 8001934:	010007c4 	movi	r4,31
 8001938:	20c0ce16 	blt	r4,r3,8001c74 <__adddf3+0x7e8>
 800193c:	01000804 	movi	r4,32
 8001940:	20c9c83a 	sub	r4,r4,r3
 8001944:	2914983a 	sll	r10,r5,r4
 8001948:	88d2d83a 	srl	r9,r17,r3
 800194c:	8908983a 	sll	r4,r17,r4
 8001950:	28c6d83a 	srl	r3,r5,r3
 8001954:	5262b03a 	or	r17,r10,r9
 8001958:	2008c03a 	cmpne	r4,r4,zero
 800195c:	8922b03a 	or	r17,r17,r4
 8001960:	3463c83a 	sub	r17,r6,r17
 8001964:	40c7c83a 	sub	r3,r8,r3
 8001968:	344d803a 	cmpltu	r6,r6,r17
 800196c:	198bc83a 	sub	r5,r3,r6
 8001970:	1021883a 	mov	r16,r2
 8001974:	3825883a 	mov	r18,r7
 8001978:	003f2006 	br	80015fc <__alt_data_end+0xfc0015fc>
 800197c:	9886b03a 	or	r3,r19,r2
 8001980:	1800141e 	bne	r3,zero,80019d4 <__adddf3+0x548>
 8001984:	0007883a 	mov	r3,zero
 8001988:	000b883a 	mov	r5,zero
 800198c:	0023883a 	mov	r17,zero
 8001990:	0021883a 	mov	r16,zero
 8001994:	003f3c06 	br	8001688 <__alt_data_end+0xfc001688>
 8001998:	418cb03a 	or	r6,r8,r6
 800199c:	300cc03a 	cmpne	r6,r6,zero
 80019a0:	0011883a 	mov	r8,zero
 80019a4:	003f5606 	br	8001700 <__alt_data_end+0xfc001700>
 80019a8:	2c48b03a 	or	r4,r5,r17
 80019ac:	20003b26 	beq	r4,zero,8001a9c <__adddf3+0x610>
 80019b0:	00c6303a 	nor	r3,zero,r3
 80019b4:	1800371e 	bne	r3,zero,8001a94 <__adddf3+0x608>
 80019b8:	3463c83a 	sub	r17,r6,r17
 80019bc:	414bc83a 	sub	r5,r8,r5
 80019c0:	344d803a 	cmpltu	r6,r6,r17
 80019c4:	298bc83a 	sub	r5,r5,r6
 80019c8:	1021883a 	mov	r16,r2
 80019cc:	3825883a 	mov	r18,r7
 80019d0:	003f0a06 	br	80015fc <__alt_data_end+0xfc0015fc>
 80019d4:	1023883a 	mov	r17,r2
 80019d8:	003f0d06 	br	8001610 <__alt_data_end+0xfc001610>
 80019dc:	0007883a 	mov	r3,zero
 80019e0:	000b883a 	mov	r5,zero
 80019e4:	0023883a 	mov	r17,zero
 80019e8:	003f2706 	br	8001688 <__alt_data_end+0xfc001688>
 80019ec:	0027883a 	mov	r19,zero
 80019f0:	003fb706 	br	80018d0 <__alt_data_end+0xfc0018d0>
 80019f4:	0011883a 	mov	r8,zero
 80019f8:	003fc206 	br	8001904 <__alt_data_end+0xfc001904>
 80019fc:	2c44b03a 	or	r2,r5,r17
 8001a00:	8000871e 	bne	r16,zero,8001c20 <__adddf3+0x794>
 8001a04:	1000b126 	beq	r2,zero,8001ccc <__adddf3+0x840>
 8001a08:	4184b03a 	or	r2,r8,r6
 8001a0c:	103ebe26 	beq	r2,zero,8001508 <__alt_data_end+0xfc001508>
 8001a10:	3445883a 	add	r2,r6,r17
 8001a14:	1463803a 	cmpltu	r17,r2,r17
 8001a18:	414b883a 	add	r5,r8,r5
 8001a1c:	2c4b883a 	add	r5,r5,r17
 8001a20:	28c0202c 	andhi	r3,r5,128
 8001a24:	1023883a 	mov	r17,r2
 8001a28:	183f6326 	beq	r3,zero,80017b8 <__alt_data_end+0xfc0017b8>
 8001a2c:	00bfe034 	movhi	r2,65408
 8001a30:	10bfffc4 	addi	r2,r2,-1
 8001a34:	2021883a 	mov	r16,r4
 8001a38:	288a703a 	and	r5,r5,r2
 8001a3c:	003eb206 	br	8001508 <__alt_data_end+0xfc001508>
 8001a40:	2c44b03a 	or	r2,r5,r17
 8001a44:	8000251e 	bne	r16,zero,8001adc <__adddf3+0x650>
 8001a48:	10004b1e 	bne	r2,zero,8001b78 <__adddf3+0x6ec>
 8001a4c:	4184b03a 	or	r2,r8,r6
 8001a50:	103fe226 	beq	r2,zero,80019dc <__alt_data_end+0xfc0019dc>
 8001a54:	400b883a 	mov	r5,r8
 8001a58:	3023883a 	mov	r17,r6
 8001a5c:	3825883a 	mov	r18,r7
 8001a60:	003ea906 	br	8001508 <__alt_data_end+0xfc001508>
 8001a64:	20bff804 	addi	r2,r4,-32
 8001a68:	01c00804 	movi	r7,32
 8001a6c:	4084d83a 	srl	r2,r8,r2
 8001a70:	21c07e26 	beq	r4,r7,8001c6c <__adddf3+0x7e0>
 8001a74:	01c01004 	movi	r7,64
 8001a78:	3909c83a 	sub	r4,r7,r4
 8001a7c:	4110983a 	sll	r8,r8,r4
 8001a80:	418cb03a 	or	r6,r8,r6
 8001a84:	300cc03a 	cmpne	r6,r6,zero
 8001a88:	308cb03a 	or	r6,r6,r2
 8001a8c:	0011883a 	mov	r8,zero
 8001a90:	003f1b06 	br	8001700 <__alt_data_end+0xfc001700>
 8001a94:	0101ffc4 	movi	r4,2047
 8001a98:	113fa41e 	bne	r2,r4,800192c <__alt_data_end+0xfc00192c>
 8001a9c:	400b883a 	mov	r5,r8
 8001aa0:	3023883a 	mov	r17,r6
 8001aa4:	1021883a 	mov	r16,r2
 8001aa8:	3825883a 	mov	r18,r7
 8001aac:	003e9606 	br	8001508 <__alt_data_end+0xfc001508>
 8001ab0:	80001a1e 	bne	r16,zero,8001b1c <__adddf3+0x690>
 8001ab4:	2c4eb03a 	or	r7,r5,r17
 8001ab8:	38005526 	beq	r7,zero,8001c10 <__adddf3+0x784>
 8001abc:	0108303a 	nor	r4,zero,r4
 8001ac0:	2000511e 	bne	r4,zero,8001c08 <__adddf3+0x77c>
 8001ac4:	89a3883a 	add	r17,r17,r6
 8001ac8:	414b883a 	add	r5,r8,r5
 8001acc:	898d803a 	cmpltu	r6,r17,r6
 8001ad0:	298b883a 	add	r5,r5,r6
 8001ad4:	1021883a 	mov	r16,r2
 8001ad8:	003f0e06 	br	8001714 <__alt_data_end+0xfc001714>
 8001adc:	1000341e 	bne	r2,zero,8001bb0 <__adddf3+0x724>
 8001ae0:	4184b03a 	or	r2,r8,r6
 8001ae4:	10006f26 	beq	r2,zero,8001ca4 <__adddf3+0x818>
 8001ae8:	400b883a 	mov	r5,r8
 8001aec:	3023883a 	mov	r17,r6
 8001af0:	3825883a 	mov	r18,r7
 8001af4:	0401ffc4 	movi	r16,2047
 8001af8:	003e8306 	br	8001508 <__alt_data_end+0xfc001508>
 8001afc:	2c62b03a 	or	r17,r5,r17
 8001b00:	8822c03a 	cmpne	r17,r17,zero
 8001b04:	0007883a 	mov	r3,zero
 8001b08:	003f9506 	br	8001960 <__alt_data_end+0xfc001960>
 8001b0c:	1021883a 	mov	r16,r2
 8001b10:	000b883a 	mov	r5,zero
 8001b14:	0023883a 	mov	r17,zero
 8001b18:	003edb06 	br	8001688 <__alt_data_end+0xfc001688>
 8001b1c:	01c1ffc4 	movi	r7,2047
 8001b20:	11c03b26 	beq	r2,r7,8001c10 <__adddf3+0x784>
 8001b24:	0109c83a 	sub	r4,zero,r4
 8001b28:	29402034 	orhi	r5,r5,128
 8001b2c:	01c00e04 	movi	r7,56
 8001b30:	39006216 	blt	r7,r4,8001cbc <__adddf3+0x830>
 8001b34:	01c007c4 	movi	r7,31
 8001b38:	39006b16 	blt	r7,r4,8001ce8 <__adddf3+0x85c>
 8001b3c:	01c00804 	movi	r7,32
 8001b40:	390fc83a 	sub	r7,r7,r4
 8001b44:	29d4983a 	sll	r10,r5,r7
 8001b48:	8912d83a 	srl	r9,r17,r4
 8001b4c:	89ce983a 	sll	r7,r17,r7
 8001b50:	2908d83a 	srl	r4,r5,r4
 8001b54:	5262b03a 	or	r17,r10,r9
 8001b58:	380ac03a 	cmpne	r5,r7,zero
 8001b5c:	8962b03a 	or	r17,r17,r5
 8001b60:	89a3883a 	add	r17,r17,r6
 8001b64:	2211883a 	add	r8,r4,r8
 8001b68:	898d803a 	cmpltu	r6,r17,r6
 8001b6c:	418b883a 	add	r5,r8,r6
 8001b70:	1021883a 	mov	r16,r2
 8001b74:	003ee706 	br	8001714 <__alt_data_end+0xfc001714>
 8001b78:	4184b03a 	or	r2,r8,r6
 8001b7c:	103e6226 	beq	r2,zero,8001508 <__alt_data_end+0xfc001508>
 8001b80:	8987c83a 	sub	r3,r17,r6
 8001b84:	88c9803a 	cmpltu	r4,r17,r3
 8001b88:	2a05c83a 	sub	r2,r5,r8
 8001b8c:	1105c83a 	sub	r2,r2,r4
 8001b90:	1100202c 	andhi	r4,r2,128
 8001b94:	203f0426 	beq	r4,zero,80017a8 <__alt_data_end+0xfc0017a8>
 8001b98:	3463c83a 	sub	r17,r6,r17
 8001b9c:	414bc83a 	sub	r5,r8,r5
 8001ba0:	344d803a 	cmpltu	r6,r6,r17
 8001ba4:	298bc83a 	sub	r5,r5,r6
 8001ba8:	3825883a 	mov	r18,r7
 8001bac:	003e5606 	br	8001508 <__alt_data_end+0xfc001508>
 8001bb0:	4184b03a 	or	r2,r8,r6
 8001bb4:	10002b26 	beq	r2,zero,8001c64 <__adddf3+0x7d8>
 8001bb8:	2804d0fa 	srli	r2,r5,3
 8001bbc:	8822d0fa 	srli	r17,r17,3
 8001bc0:	280a977a 	slli	r5,r5,29
 8001bc4:	10c0022c 	andhi	r3,r2,8
 8001bc8:	2c62b03a 	or	r17,r5,r17
 8001bcc:	18000826 	beq	r3,zero,8001bf0 <__adddf3+0x764>
 8001bd0:	4008d0fa 	srli	r4,r8,3
 8001bd4:	20c0022c 	andhi	r3,r4,8
 8001bd8:	1800051e 	bne	r3,zero,8001bf0 <__adddf3+0x764>
 8001bdc:	300cd0fa 	srli	r6,r6,3
 8001be0:	4010977a 	slli	r8,r8,29
 8001be4:	2005883a 	mov	r2,r4
 8001be8:	3825883a 	mov	r18,r7
 8001bec:	41a2b03a 	or	r17,r8,r6
 8001bf0:	880ad77a 	srli	r5,r17,29
 8001bf4:	100490fa 	slli	r2,r2,3
 8001bf8:	882290fa 	slli	r17,r17,3
 8001bfc:	0401ffc4 	movi	r16,2047
 8001c00:	288ab03a 	or	r5,r5,r2
 8001c04:	003e4006 	br	8001508 <__alt_data_end+0xfc001508>
 8001c08:	01c1ffc4 	movi	r7,2047
 8001c0c:	11ffc71e 	bne	r2,r7,8001b2c <__alt_data_end+0xfc001b2c>
 8001c10:	400b883a 	mov	r5,r8
 8001c14:	3023883a 	mov	r17,r6
 8001c18:	1021883a 	mov	r16,r2
 8001c1c:	003e3a06 	br	8001508 <__alt_data_end+0xfc001508>
 8001c20:	10002d26 	beq	r2,zero,8001cd8 <__adddf3+0x84c>
 8001c24:	4184b03a 	or	r2,r8,r6
 8001c28:	10000e26 	beq	r2,zero,8001c64 <__adddf3+0x7d8>
 8001c2c:	2804d0fa 	srli	r2,r5,3
 8001c30:	8822d0fa 	srli	r17,r17,3
 8001c34:	280a977a 	slli	r5,r5,29
 8001c38:	10c0022c 	andhi	r3,r2,8
 8001c3c:	2c62b03a 	or	r17,r5,r17
 8001c40:	183feb26 	beq	r3,zero,8001bf0 <__alt_data_end+0xfc001bf0>
 8001c44:	4008d0fa 	srli	r4,r8,3
 8001c48:	20c0022c 	andhi	r3,r4,8
 8001c4c:	183fe81e 	bne	r3,zero,8001bf0 <__alt_data_end+0xfc001bf0>
 8001c50:	300cd0fa 	srli	r6,r6,3
 8001c54:	4010977a 	slli	r8,r8,29
 8001c58:	2005883a 	mov	r2,r4
 8001c5c:	41a2b03a 	or	r17,r8,r6
 8001c60:	003fe306 	br	8001bf0 <__alt_data_end+0xfc001bf0>
 8001c64:	0401ffc4 	movi	r16,2047
 8001c68:	003e2706 	br	8001508 <__alt_data_end+0xfc001508>
 8001c6c:	0011883a 	mov	r8,zero
 8001c70:	003f8306 	br	8001a80 <__alt_data_end+0xfc001a80>
 8001c74:	193ff804 	addi	r4,r3,-32
 8001c78:	02400804 	movi	r9,32
 8001c7c:	2908d83a 	srl	r4,r5,r4
 8001c80:	1a402526 	beq	r3,r9,8001d18 <__adddf3+0x88c>
 8001c84:	02401004 	movi	r9,64
 8001c88:	48c7c83a 	sub	r3,r9,r3
 8001c8c:	28ca983a 	sll	r5,r5,r3
 8001c90:	2c62b03a 	or	r17,r5,r17
 8001c94:	8822c03a 	cmpne	r17,r17,zero
 8001c98:	8922b03a 	or	r17,r17,r4
 8001c9c:	0007883a 	mov	r3,zero
 8001ca0:	003f2f06 	br	8001960 <__alt_data_end+0xfc001960>
 8001ca4:	01402034 	movhi	r5,128
 8001ca8:	0007883a 	mov	r3,zero
 8001cac:	297fffc4 	addi	r5,r5,-1
 8001cb0:	047ffe04 	movi	r17,-8
 8001cb4:	0401ffc4 	movi	r16,2047
 8001cb8:	003e7306 	br	8001688 <__alt_data_end+0xfc001688>
 8001cbc:	2c62b03a 	or	r17,r5,r17
 8001cc0:	8822c03a 	cmpne	r17,r17,zero
 8001cc4:	0009883a 	mov	r4,zero
 8001cc8:	003fa506 	br	8001b60 <__alt_data_end+0xfc001b60>
 8001ccc:	400b883a 	mov	r5,r8
 8001cd0:	3023883a 	mov	r17,r6
 8001cd4:	003e0c06 	br	8001508 <__alt_data_end+0xfc001508>
 8001cd8:	400b883a 	mov	r5,r8
 8001cdc:	3023883a 	mov	r17,r6
 8001ce0:	0401ffc4 	movi	r16,2047
 8001ce4:	003e0806 	br	8001508 <__alt_data_end+0xfc001508>
 8001ce8:	21fff804 	addi	r7,r4,-32
 8001cec:	02400804 	movi	r9,32
 8001cf0:	29ced83a 	srl	r7,r5,r7
 8001cf4:	22400a26 	beq	r4,r9,8001d20 <__adddf3+0x894>
 8001cf8:	02401004 	movi	r9,64
 8001cfc:	4909c83a 	sub	r4,r9,r4
 8001d00:	290a983a 	sll	r5,r5,r4
 8001d04:	2c62b03a 	or	r17,r5,r17
 8001d08:	8822c03a 	cmpne	r17,r17,zero
 8001d0c:	89e2b03a 	or	r17,r17,r7
 8001d10:	0009883a 	mov	r4,zero
 8001d14:	003f9206 	br	8001b60 <__alt_data_end+0xfc001b60>
 8001d18:	000b883a 	mov	r5,zero
 8001d1c:	003fdc06 	br	8001c90 <__alt_data_end+0xfc001c90>
 8001d20:	000b883a 	mov	r5,zero
 8001d24:	003ff706 	br	8001d04 <__alt_data_end+0xfc001d04>

08001d28 <__gedf2>:
 8001d28:	2804d53a 	srli	r2,r5,20
 8001d2c:	3806d53a 	srli	r3,r7,20
 8001d30:	02000434 	movhi	r8,16
 8001d34:	423fffc4 	addi	r8,r8,-1
 8001d38:	0241ffc4 	movi	r9,2047
 8001d3c:	1081ffcc 	andi	r2,r2,2047
 8001d40:	2a14703a 	and	r10,r5,r8
 8001d44:	1a46703a 	and	r3,r3,r9
 8001d48:	3a10703a 	and	r8,r7,r8
 8001d4c:	280ad7fa 	srli	r5,r5,31
 8001d50:	380ed7fa 	srli	r7,r7,31
 8001d54:	12400b26 	beq	r2,r9,8001d84 <__gedf2+0x5c>
 8001d58:	1a401626 	beq	r3,r9,8001db4 <__gedf2+0x8c>
 8001d5c:	10000c1e 	bne	r2,zero,8001d90 <__gedf2+0x68>
 8001d60:	5112b03a 	or	r9,r10,r4
 8001d64:	4813003a 	cmpeq	r9,r9,zero
 8001d68:	4817883a 	mov	r11,r9
 8001d6c:	18000c1e 	bne	r3,zero,8001da0 <__gedf2+0x78>
 8001d70:	4198b03a 	or	r12,r8,r6
 8001d74:	60000a1e 	bne	r12,zero,8001da0 <__gedf2+0x78>
 8001d78:	48001326 	beq	r9,zero,8001dc8 <__gedf2+0xa0>
 8001d7c:	0005883a 	mov	r2,zero
 8001d80:	f800283a 	ret
 8001d84:	5112b03a 	or	r9,r10,r4
 8001d88:	4800191e 	bne	r9,zero,8001df0 <__gedf2+0xc8>
 8001d8c:	18800926 	beq	r3,r2,8001db4 <__gedf2+0x8c>
 8001d90:	18000b1e 	bne	r3,zero,8001dc0 <__gedf2+0x98>
 8001d94:	4192b03a 	or	r9,r8,r6
 8001d98:	0017883a 	mov	r11,zero
 8001d9c:	48000a26 	beq	r9,zero,8001dc8 <__gedf2+0xa0>
 8001da0:	39c03fcc 	andi	r7,r7,255
 8001da4:	58000726 	beq	r11,zero,8001dc4 <__gedf2+0x9c>
 8001da8:	3800081e 	bne	r7,zero,8001dcc <__gedf2+0xa4>
 8001dac:	00bfffc4 	movi	r2,-1
 8001db0:	f800283a 	ret
 8001db4:	4192b03a 	or	r9,r8,r6
 8001db8:	48000d1e 	bne	r9,zero,8001df0 <__gedf2+0xc8>
 8001dbc:	103fe826 	beq	r2,zero,8001d60 <__alt_data_end+0xfc001d60>
 8001dc0:	39c03fcc 	andi	r7,r7,255
 8001dc4:	29c00326 	beq	r5,r7,8001dd4 <__gedf2+0xac>
 8001dc8:	283ff81e 	bne	r5,zero,8001dac <__alt_data_end+0xfc001dac>
 8001dcc:	00800044 	movi	r2,1
 8001dd0:	f800283a 	ret
 8001dd4:	18bffc16 	blt	r3,r2,8001dc8 <__alt_data_end+0xfc001dc8>
 8001dd8:	10c00316 	blt	r2,r3,8001de8 <__gedf2+0xc0>
 8001ddc:	42bffa36 	bltu	r8,r10,8001dc8 <__alt_data_end+0xfc001dc8>
 8001de0:	52000526 	beq	r10,r8,8001df8 <__gedf2+0xd0>
 8001de4:	523fe52e 	bgeu	r10,r8,8001d7c <__alt_data_end+0xfc001d7c>
 8001de8:	283ff026 	beq	r5,zero,8001dac <__alt_data_end+0xfc001dac>
 8001dec:	003ff706 	br	8001dcc <__alt_data_end+0xfc001dcc>
 8001df0:	00bfff84 	movi	r2,-2
 8001df4:	f800283a 	ret
 8001df8:	313ff336 	bltu	r6,r4,8001dc8 <__alt_data_end+0xfc001dc8>
 8001dfc:	21bfdf2e 	bgeu	r4,r6,8001d7c <__alt_data_end+0xfc001d7c>
 8001e00:	283fea26 	beq	r5,zero,8001dac <__alt_data_end+0xfc001dac>
 8001e04:	003ff106 	br	8001dcc <__alt_data_end+0xfc001dcc>

08001e08 <__ledf2>:
 8001e08:	2804d53a 	srli	r2,r5,20
 8001e0c:	3810d53a 	srli	r8,r7,20
 8001e10:	00c00434 	movhi	r3,16
 8001e14:	18ffffc4 	addi	r3,r3,-1
 8001e18:	0241ffc4 	movi	r9,2047
 8001e1c:	1081ffcc 	andi	r2,r2,2047
 8001e20:	28d4703a 	and	r10,r5,r3
 8001e24:	4250703a 	and	r8,r8,r9
 8001e28:	38c6703a 	and	r3,r7,r3
 8001e2c:	280ad7fa 	srli	r5,r5,31
 8001e30:	380ed7fa 	srli	r7,r7,31
 8001e34:	12400b26 	beq	r2,r9,8001e64 <__ledf2+0x5c>
 8001e38:	42401926 	beq	r8,r9,8001ea0 <__ledf2+0x98>
 8001e3c:	10000c1e 	bne	r2,zero,8001e70 <__ledf2+0x68>
 8001e40:	5112b03a 	or	r9,r10,r4
 8001e44:	4813003a 	cmpeq	r9,r9,zero
 8001e48:	4817883a 	mov	r11,r9
 8001e4c:	40000f26 	beq	r8,zero,8001e8c <__ledf2+0x84>
 8001e50:	39c03fcc 	andi	r7,r7,255
 8001e54:	58001826 	beq	r11,zero,8001eb8 <__ledf2+0xb0>
 8001e58:	38000a1e 	bne	r7,zero,8001e84 <__ledf2+0x7c>
 8001e5c:	00bfffc4 	movi	r2,-1
 8001e60:	f800283a 	ret
 8001e64:	5112b03a 	or	r9,r10,r4
 8001e68:	48000f1e 	bne	r9,zero,8001ea8 <__ledf2+0xa0>
 8001e6c:	40800c26 	beq	r8,r2,8001ea0 <__ledf2+0x98>
 8001e70:	4000101e 	bne	r8,zero,8001eb4 <__ledf2+0xac>
 8001e74:	1992b03a 	or	r9,r3,r6
 8001e78:	0017883a 	mov	r11,zero
 8001e7c:	483ff41e 	bne	r9,zero,8001e50 <__alt_data_end+0xfc001e50>
 8001e80:	283ff61e 	bne	r5,zero,8001e5c <__alt_data_end+0xfc001e5c>
 8001e84:	00800044 	movi	r2,1
 8001e88:	f800283a 	ret
 8001e8c:	1998b03a 	or	r12,r3,r6
 8001e90:	603fef1e 	bne	r12,zero,8001e50 <__alt_data_end+0xfc001e50>
 8001e94:	483ffa26 	beq	r9,zero,8001e80 <__alt_data_end+0xfc001e80>
 8001e98:	0005883a 	mov	r2,zero
 8001e9c:	f800283a 	ret
 8001ea0:	1992b03a 	or	r9,r3,r6
 8001ea4:	48000226 	beq	r9,zero,8001eb0 <__ledf2+0xa8>
 8001ea8:	00800084 	movi	r2,2
 8001eac:	f800283a 	ret
 8001eb0:	103fe326 	beq	r2,zero,8001e40 <__alt_data_end+0xfc001e40>
 8001eb4:	39c03fcc 	andi	r7,r7,255
 8001eb8:	29fff11e 	bne	r5,r7,8001e80 <__alt_data_end+0xfc001e80>
 8001ebc:	40bff016 	blt	r8,r2,8001e80 <__alt_data_end+0xfc001e80>
 8001ec0:	12000316 	blt	r2,r8,8001ed0 <__ledf2+0xc8>
 8001ec4:	1abfee36 	bltu	r3,r10,8001e80 <__alt_data_end+0xfc001e80>
 8001ec8:	50c00326 	beq	r10,r3,8001ed8 <__ledf2+0xd0>
 8001ecc:	50fff22e 	bgeu	r10,r3,8001e98 <__alt_data_end+0xfc001e98>
 8001ed0:	283fe226 	beq	r5,zero,8001e5c <__alt_data_end+0xfc001e5c>
 8001ed4:	003feb06 	br	8001e84 <__alt_data_end+0xfc001e84>
 8001ed8:	313fe936 	bltu	r6,r4,8001e80 <__alt_data_end+0xfc001e80>
 8001edc:	21bfee2e 	bgeu	r4,r6,8001e98 <__alt_data_end+0xfc001e98>
 8001ee0:	283fde26 	beq	r5,zero,8001e5c <__alt_data_end+0xfc001e5c>
 8001ee4:	003fe706 	br	8001e84 <__alt_data_end+0xfc001e84>

08001ee8 <__muldf3>:
 8001ee8:	deffee04 	addi	sp,sp,-72
 8001eec:	dd000c15 	stw	r20,48(sp)
 8001ef0:	2828d53a 	srli	r20,r5,20
 8001ef4:	dd400d15 	stw	r21,52(sp)
 8001ef8:	282ad7fa 	srli	r21,r5,31
 8001efc:	dc000815 	stw	r16,32(sp)
 8001f00:	04000434 	movhi	r16,16
 8001f04:	ddc00f15 	stw	r23,60(sp)
 8001f08:	dcc00b15 	stw	r19,44(sp)
 8001f0c:	dc800a15 	stw	r18,40(sp)
 8001f10:	843fffc4 	addi	r16,r16,-1
 8001f14:	dfc01115 	stw	ra,68(sp)
 8001f18:	df001015 	stw	fp,64(sp)
 8001f1c:	dd800e15 	stw	r22,56(sp)
 8001f20:	dc400915 	stw	r17,36(sp)
 8001f24:	a501ffcc 	andi	r20,r20,2047
 8001f28:	2025883a 	mov	r18,r4
 8001f2c:	202f883a 	mov	r23,r4
 8001f30:	2c20703a 	and	r16,r5,r16
 8001f34:	a827883a 	mov	r19,r21
 8001f38:	aa403fcc 	andi	r9,r21,255
 8001f3c:	a0005926 	beq	r20,zero,80020a4 <__muldf3+0x1bc>
 8001f40:	0081ffc4 	movi	r2,2047
 8001f44:	a0803426 	beq	r20,r2,8002018 <__muldf3+0x130>
 8001f48:	84000434 	orhi	r16,r16,16
 8001f4c:	2004d77a 	srli	r2,r4,29
 8001f50:	802090fa 	slli	r16,r16,3
 8001f54:	202e90fa 	slli	r23,r4,3
 8001f58:	a53f0044 	addi	r20,r20,-1023
 8001f5c:	80a0b03a 	or	r16,r16,r2
 8001f60:	000b883a 	mov	r5,zero
 8001f64:	0039883a 	mov	fp,zero
 8001f68:	3806d53a 	srli	r3,r7,20
 8001f6c:	382cd7fa 	srli	r22,r7,31
 8001f70:	00800434 	movhi	r2,16
 8001f74:	10bfffc4 	addi	r2,r2,-1
 8001f78:	18c1ffcc 	andi	r3,r3,2047
 8001f7c:	3025883a 	mov	r18,r6
 8001f80:	38a2703a 	and	r17,r7,r2
 8001f84:	b2803fcc 	andi	r10,r22,255
 8001f88:	18006426 	beq	r3,zero,800211c <__muldf3+0x234>
 8001f8c:	0081ffc4 	movi	r2,2047
 8001f90:	18805c26 	beq	r3,r2,8002104 <__muldf3+0x21c>
 8001f94:	8c400434 	orhi	r17,r17,16
 8001f98:	3004d77a 	srli	r2,r6,29
 8001f9c:	882290fa 	slli	r17,r17,3
 8001fa0:	302490fa 	slli	r18,r6,3
 8001fa4:	18ff0044 	addi	r3,r3,-1023
 8001fa8:	88a2b03a 	or	r17,r17,r2
 8001fac:	000f883a 	mov	r7,zero
 8001fb0:	394ab03a 	or	r5,r7,r5
 8001fb4:	280a90ba 	slli	r5,r5,2
 8001fb8:	00820034 	movhi	r2,2048
 8001fbc:	1087f604 	addi	r2,r2,8152
 8001fc0:	288b883a 	add	r5,r5,r2
 8001fc4:	28800017 	ldw	r2,0(r5)
 8001fc8:	a0c7883a 	add	r3,r20,r3
 8001fcc:	b54cf03a 	xor	r6,r22,r21
 8001fd0:	1a000044 	addi	r8,r3,1
 8001fd4:	1000683a 	jmp	r2
 8001fd8:	0800221c 	xori	zero,at,136
 8001fdc:	08002208 	cmpgei	zero,at,136
 8001fe0:	08002208 	cmpgei	zero,at,136
 8001fe4:	080021f4 	orhi	zero,at,135
 8001fe8:	08002034 	orhi	zero,at,128
 8001fec:	08002034 	orhi	zero,at,128
 8001ff0:	080021dc 	xori	zero,at,135
 8001ff4:	080021f4 	orhi	zero,at,135
 8001ff8:	08002034 	orhi	zero,at,128
 8001ffc:	080021dc 	xori	zero,at,135
 8002000:	08002034 	orhi	zero,at,128
 8002004:	080021f4 	orhi	zero,at,135
 8002008:	08002038 	rdprs	zero,at,128
 800200c:	08002038 	rdprs	zero,at,128
 8002010:	08002038 	rdprs	zero,at,128
 8002014:	08002558 	cmpnei	zero,at,149
 8002018:	8104b03a 	or	r2,r16,r4
 800201c:	10006c1e 	bne	r2,zero,80021d0 <__muldf3+0x2e8>
 8002020:	01400204 	movi	r5,8
 8002024:	0021883a 	mov	r16,zero
 8002028:	002f883a 	mov	r23,zero
 800202c:	07000084 	movi	fp,2
 8002030:	003fcd06 	br	8001f68 <__alt_data_end+0xfc001f68>
 8002034:	3013883a 	mov	r9,r6
 8002038:	00800084 	movi	r2,2
 800203c:	e080501e 	bne	fp,r2,8002180 <__muldf3+0x298>
 8002040:	4cc0004c 	andi	r19,r9,1
 8002044:	0101ffc4 	movi	r4,2047
 8002048:	0021883a 	mov	r16,zero
 800204c:	002f883a 	mov	r23,zero
 8002050:	2008953a 	slli	r4,r4,20
 8002054:	98c03fcc 	andi	r3,r19,255
 8002058:	04400434 	movhi	r17,16
 800205c:	8c7fffc4 	addi	r17,r17,-1
 8002060:	180697fa 	slli	r3,r3,31
 8002064:	8460703a 	and	r16,r16,r17
 8002068:	8120b03a 	or	r16,r16,r4
 800206c:	80c6b03a 	or	r3,r16,r3
 8002070:	b805883a 	mov	r2,r23
 8002074:	dfc01117 	ldw	ra,68(sp)
 8002078:	df001017 	ldw	fp,64(sp)
 800207c:	ddc00f17 	ldw	r23,60(sp)
 8002080:	dd800e17 	ldw	r22,56(sp)
 8002084:	dd400d17 	ldw	r21,52(sp)
 8002088:	dd000c17 	ldw	r20,48(sp)
 800208c:	dcc00b17 	ldw	r19,44(sp)
 8002090:	dc800a17 	ldw	r18,40(sp)
 8002094:	dc400917 	ldw	r17,36(sp)
 8002098:	dc000817 	ldw	r16,32(sp)
 800209c:	dec01204 	addi	sp,sp,72
 80020a0:	f800283a 	ret
 80020a4:	8104b03a 	or	r2,r16,r4
 80020a8:	10004426 	beq	r2,zero,80021bc <__muldf3+0x2d4>
 80020ac:	80014b26 	beq	r16,zero,80025dc <__muldf3+0x6f4>
 80020b0:	8009883a 	mov	r4,r16
 80020b4:	d9800715 	stw	r6,28(sp)
 80020b8:	d9c00215 	stw	r7,8(sp)
 80020bc:	da400415 	stw	r9,16(sp)
 80020c0:	80032200 	call	8003220 <__clzsi2>
 80020c4:	d9800717 	ldw	r6,28(sp)
 80020c8:	d9c00217 	ldw	r7,8(sp)
 80020cc:	da400417 	ldw	r9,16(sp)
 80020d0:	1007883a 	mov	r3,r2
 80020d4:	01000a04 	movi	r4,40
 80020d8:	1dfffe04 	addi	r23,r3,-8
 80020dc:	20c9c83a 	sub	r4,r4,r3
 80020e0:	85e0983a 	sll	r16,r16,r23
 80020e4:	9108d83a 	srl	r4,r18,r4
 80020e8:	95ee983a 	sll	r23,r18,r23
 80020ec:	2420b03a 	or	r16,r4,r16
 80020f0:	053f0344 	movi	r20,-1011
 80020f4:	a0e9c83a 	sub	r20,r20,r3
 80020f8:	000b883a 	mov	r5,zero
 80020fc:	0039883a 	mov	fp,zero
 8002100:	003f9906 	br	8001f68 <__alt_data_end+0xfc001f68>
 8002104:	8984b03a 	or	r2,r17,r6
 8002108:	10002a1e 	bne	r2,zero,80021b4 <__muldf3+0x2cc>
 800210c:	0023883a 	mov	r17,zero
 8002110:	0025883a 	mov	r18,zero
 8002114:	01c00084 	movi	r7,2
 8002118:	003fa506 	br	8001fb0 <__alt_data_end+0xfc001fb0>
 800211c:	8984b03a 	or	r2,r17,r6
 8002120:	10002026 	beq	r2,zero,80021a4 <__muldf3+0x2bc>
 8002124:	88011c26 	beq	r17,zero,8002598 <__muldf3+0x6b0>
 8002128:	8809883a 	mov	r4,r17
 800212c:	d9400215 	stw	r5,8(sp)
 8002130:	d9800715 	stw	r6,28(sp)
 8002134:	da400415 	stw	r9,16(sp)
 8002138:	da800315 	stw	r10,12(sp)
 800213c:	80032200 	call	8003220 <__clzsi2>
 8002140:	d9400217 	ldw	r5,8(sp)
 8002144:	d9800717 	ldw	r6,28(sp)
 8002148:	da400417 	ldw	r9,16(sp)
 800214c:	da800317 	ldw	r10,12(sp)
 8002150:	1007883a 	mov	r3,r2
 8002154:	01000a04 	movi	r4,40
 8002158:	1cbffe04 	addi	r18,r3,-8
 800215c:	20c9c83a 	sub	r4,r4,r3
 8002160:	8ca2983a 	sll	r17,r17,r18
 8002164:	3108d83a 	srl	r4,r6,r4
 8002168:	34a4983a 	sll	r18,r6,r18
 800216c:	2462b03a 	or	r17,r4,r17
 8002170:	00bf0344 	movi	r2,-1011
 8002174:	10c7c83a 	sub	r3,r2,r3
 8002178:	000f883a 	mov	r7,zero
 800217c:	003f8c06 	br	8001fb0 <__alt_data_end+0xfc001fb0>
 8002180:	008000c4 	movi	r2,3
 8002184:	e0816d26 	beq	fp,r2,800273c <__muldf3+0x854>
 8002188:	00800044 	movi	r2,1
 800218c:	e081321e 	bne	fp,r2,8002658 <__muldf3+0x770>
 8002190:	48a6703a 	and	r19,r9,r2
 8002194:	0009883a 	mov	r4,zero
 8002198:	0021883a 	mov	r16,zero
 800219c:	002f883a 	mov	r23,zero
 80021a0:	003fab06 	br	8002050 <__alt_data_end+0xfc002050>
 80021a4:	0023883a 	mov	r17,zero
 80021a8:	0025883a 	mov	r18,zero
 80021ac:	01c00044 	movi	r7,1
 80021b0:	003f7f06 	br	8001fb0 <__alt_data_end+0xfc001fb0>
 80021b4:	01c000c4 	movi	r7,3
 80021b8:	003f7d06 	br	8001fb0 <__alt_data_end+0xfc001fb0>
 80021bc:	01400104 	movi	r5,4
 80021c0:	0021883a 	mov	r16,zero
 80021c4:	002f883a 	mov	r23,zero
 80021c8:	07000044 	movi	fp,1
 80021cc:	003f6606 	br	8001f68 <__alt_data_end+0xfc001f68>
 80021d0:	01400304 	movi	r5,12
 80021d4:	070000c4 	movi	fp,3
 80021d8:	003f6306 	br	8001f68 <__alt_data_end+0xfc001f68>
 80021dc:	04000434 	movhi	r16,16
 80021e0:	0027883a 	mov	r19,zero
 80021e4:	843fffc4 	addi	r16,r16,-1
 80021e8:	05ffffc4 	movi	r23,-1
 80021ec:	0101ffc4 	movi	r4,2047
 80021f0:	003f9706 	br	8002050 <__alt_data_end+0xfc002050>
 80021f4:	8821883a 	mov	r16,r17
 80021f8:	902f883a 	mov	r23,r18
 80021fc:	5013883a 	mov	r9,r10
 8002200:	3839883a 	mov	fp,r7
 8002204:	003f8c06 	br	8002038 <__alt_data_end+0xfc002038>
 8002208:	8821883a 	mov	r16,r17
 800220c:	902f883a 	mov	r23,r18
 8002210:	3013883a 	mov	r9,r6
 8002214:	3839883a 	mov	fp,r7
 8002218:	003f8706 	br	8002038 <__alt_data_end+0xfc002038>
 800221c:	b82ad43a 	srli	r21,r23,16
 8002220:	9038d43a 	srli	fp,r18,16
 8002224:	bdffffcc 	andi	r23,r23,65535
 8002228:	94bfffcc 	andi	r18,r18,65535
 800222c:	9009883a 	mov	r4,r18
 8002230:	b80b883a 	mov	r5,r23
 8002234:	d8c00515 	stw	r3,20(sp)
 8002238:	d9800715 	stw	r6,28(sp)
 800223c:	da000615 	stw	r8,24(sp)
 8002240:	80032840 	call	8003284 <__mulsi3>
 8002244:	9009883a 	mov	r4,r18
 8002248:	a80b883a 	mov	r5,r21
 800224c:	1029883a 	mov	r20,r2
 8002250:	80032840 	call	8003284 <__mulsi3>
 8002254:	e009883a 	mov	r4,fp
 8002258:	a80b883a 	mov	r5,r21
 800225c:	102d883a 	mov	r22,r2
 8002260:	80032840 	call	8003284 <__mulsi3>
 8002264:	e009883a 	mov	r4,fp
 8002268:	b80b883a 	mov	r5,r23
 800226c:	1027883a 	mov	r19,r2
 8002270:	80032840 	call	8003284 <__mulsi3>
 8002274:	a008d43a 	srli	r4,r20,16
 8002278:	b085883a 	add	r2,r22,r2
 800227c:	d8c00517 	ldw	r3,20(sp)
 8002280:	110f883a 	add	r7,r2,r4
 8002284:	d9800717 	ldw	r6,28(sp)
 8002288:	da000617 	ldw	r8,24(sp)
 800228c:	3d80022e 	bgeu	r7,r22,8002298 <__muldf3+0x3b0>
 8002290:	00800074 	movhi	r2,1
 8002294:	98a7883a 	add	r19,r19,r2
 8002298:	3804943a 	slli	r2,r7,16
 800229c:	380ed43a 	srli	r7,r7,16
 80022a0:	882cd43a 	srli	r22,r17,16
 80022a4:	a53fffcc 	andi	r20,r20,65535
 80022a8:	8c7fffcc 	andi	r17,r17,65535
 80022ac:	1529883a 	add	r20,r2,r20
 80022b0:	8809883a 	mov	r4,r17
 80022b4:	b80b883a 	mov	r5,r23
 80022b8:	d8c00515 	stw	r3,20(sp)
 80022bc:	d9800715 	stw	r6,28(sp)
 80022c0:	da000615 	stw	r8,24(sp)
 80022c4:	d9c00015 	stw	r7,0(sp)
 80022c8:	dd000115 	stw	r20,4(sp)
 80022cc:	80032840 	call	8003284 <__mulsi3>
 80022d0:	a80b883a 	mov	r5,r21
 80022d4:	8809883a 	mov	r4,r17
 80022d8:	d8800415 	stw	r2,16(sp)
 80022dc:	80032840 	call	8003284 <__mulsi3>
 80022e0:	a80b883a 	mov	r5,r21
 80022e4:	b009883a 	mov	r4,r22
 80022e8:	1029883a 	mov	r20,r2
 80022ec:	80032840 	call	8003284 <__mulsi3>
 80022f0:	b009883a 	mov	r4,r22
 80022f4:	b80b883a 	mov	r5,r23
 80022f8:	102b883a 	mov	r21,r2
 80022fc:	80032840 	call	8003284 <__mulsi3>
 8002300:	da400417 	ldw	r9,16(sp)
 8002304:	a085883a 	add	r2,r20,r2
 8002308:	d8c00517 	ldw	r3,20(sp)
 800230c:	4808d43a 	srli	r4,r9,16
 8002310:	d9800717 	ldw	r6,28(sp)
 8002314:	da000617 	ldw	r8,24(sp)
 8002318:	1109883a 	add	r4,r2,r4
 800231c:	2500022e 	bgeu	r4,r20,8002328 <__muldf3+0x440>
 8002320:	00800074 	movhi	r2,1
 8002324:	a8ab883a 	add	r21,r21,r2
 8002328:	200e943a 	slli	r7,r4,16
 800232c:	2004d43a 	srli	r2,r4,16
 8002330:	802ed43a 	srli	r23,r16,16
 8002334:	843fffcc 	andi	r16,r16,65535
 8002338:	4d3fffcc 	andi	r20,r9,65535
 800233c:	9009883a 	mov	r4,r18
 8002340:	800b883a 	mov	r5,r16
 8002344:	3d29883a 	add	r20,r7,r20
 8002348:	d8c00515 	stw	r3,20(sp)
 800234c:	d9800715 	stw	r6,28(sp)
 8002350:	da000615 	stw	r8,24(sp)
 8002354:	a8ab883a 	add	r21,r21,r2
 8002358:	80032840 	call	8003284 <__mulsi3>
 800235c:	9009883a 	mov	r4,r18
 8002360:	b80b883a 	mov	r5,r23
 8002364:	d8800315 	stw	r2,12(sp)
 8002368:	80032840 	call	8003284 <__mulsi3>
 800236c:	e009883a 	mov	r4,fp
 8002370:	b80b883a 	mov	r5,r23
 8002374:	1025883a 	mov	r18,r2
 8002378:	80032840 	call	8003284 <__mulsi3>
 800237c:	e009883a 	mov	r4,fp
 8002380:	800b883a 	mov	r5,r16
 8002384:	d8800215 	stw	r2,8(sp)
 8002388:	80032840 	call	8003284 <__mulsi3>
 800238c:	da800317 	ldw	r10,12(sp)
 8002390:	d9400017 	ldw	r5,0(sp)
 8002394:	9085883a 	add	r2,r18,r2
 8002398:	5008d43a 	srli	r4,r10,16
 800239c:	a153883a 	add	r9,r20,r5
 80023a0:	d8c00517 	ldw	r3,20(sp)
 80023a4:	1109883a 	add	r4,r2,r4
 80023a8:	d9800717 	ldw	r6,28(sp)
 80023ac:	da000617 	ldw	r8,24(sp)
 80023b0:	dac00217 	ldw	r11,8(sp)
 80023b4:	2480022e 	bgeu	r4,r18,80023c0 <__muldf3+0x4d8>
 80023b8:	00800074 	movhi	r2,1
 80023bc:	5897883a 	add	r11,r11,r2
 80023c0:	200e943a 	slli	r7,r4,16
 80023c4:	2038d43a 	srli	fp,r4,16
 80023c8:	52bfffcc 	andi	r10,r10,65535
 80023cc:	3a8f883a 	add	r7,r7,r10
 80023d0:	8809883a 	mov	r4,r17
 80023d4:	800b883a 	mov	r5,r16
 80023d8:	d8c00515 	stw	r3,20(sp)
 80023dc:	d9800715 	stw	r6,28(sp)
 80023e0:	d9c00215 	stw	r7,8(sp)
 80023e4:	da000615 	stw	r8,24(sp)
 80023e8:	da400415 	stw	r9,16(sp)
 80023ec:	5f39883a 	add	fp,r11,fp
 80023f0:	80032840 	call	8003284 <__mulsi3>
 80023f4:	8809883a 	mov	r4,r17
 80023f8:	b80b883a 	mov	r5,r23
 80023fc:	1025883a 	mov	r18,r2
 8002400:	80032840 	call	8003284 <__mulsi3>
 8002404:	b009883a 	mov	r4,r22
 8002408:	b80b883a 	mov	r5,r23
 800240c:	d8800315 	stw	r2,12(sp)
 8002410:	80032840 	call	8003284 <__mulsi3>
 8002414:	b009883a 	mov	r4,r22
 8002418:	800b883a 	mov	r5,r16
 800241c:	1023883a 	mov	r17,r2
 8002420:	80032840 	call	8003284 <__mulsi3>
 8002424:	da800317 	ldw	r10,12(sp)
 8002428:	9008d43a 	srli	r4,r18,16
 800242c:	d8c00517 	ldw	r3,20(sp)
 8002430:	5085883a 	add	r2,r10,r2
 8002434:	1109883a 	add	r4,r2,r4
 8002438:	d9800717 	ldw	r6,28(sp)
 800243c:	d9c00217 	ldw	r7,8(sp)
 8002440:	da000617 	ldw	r8,24(sp)
 8002444:	da400417 	ldw	r9,16(sp)
 8002448:	2280022e 	bgeu	r4,r10,8002454 <__muldf3+0x56c>
 800244c:	00800074 	movhi	r2,1
 8002450:	88a3883a 	add	r17,r17,r2
 8002454:	2004943a 	slli	r2,r4,16
 8002458:	94bfffcc 	andi	r18,r18,65535
 800245c:	4ce7883a 	add	r19,r9,r19
 8002460:	14a5883a 	add	r18,r2,r18
 8002464:	9d29803a 	cmpltu	r20,r19,r20
 8002468:	9565883a 	add	r18,r18,r21
 800246c:	9505883a 	add	r2,r18,r20
 8002470:	99e7883a 	add	r19,r19,r7
 8002474:	99cf803a 	cmpltu	r7,r19,r7
 8002478:	e08b883a 	add	r5,fp,r2
 800247c:	2008d43a 	srli	r4,r4,16
 8002480:	29ef883a 	add	r23,r5,r7
 8002484:	1529803a 	cmpltu	r20,r2,r20
 8002488:	956b803a 	cmpltu	r21,r18,r21
 800248c:	b9cf803a 	cmpltu	r7,r23,r7
 8002490:	a564b03a 	or	r18,r20,r21
 8002494:	2f39803a 	cmpltu	fp,r5,fp
 8002498:	9125883a 	add	r18,r18,r4
 800249c:	3f38b03a 	or	fp,r7,fp
 80024a0:	9725883a 	add	r18,r18,fp
 80024a4:	9804927a 	slli	r2,r19,9
 80024a8:	9463883a 	add	r17,r18,r17
 80024ac:	d9000117 	ldw	r4,4(sp)
 80024b0:	b820d5fa 	srli	r16,r23,23
 80024b4:	8822927a 	slli	r17,r17,9
 80024b8:	9826d5fa 	srli	r19,r19,23
 80024bc:	1104b03a 	or	r2,r2,r4
 80024c0:	b82e927a 	slli	r23,r23,9
 80024c4:	1004c03a 	cmpne	r2,r2,zero
 80024c8:	8c20b03a 	or	r16,r17,r16
 80024cc:	14e6b03a 	or	r19,r2,r19
 80024d0:	8080402c 	andhi	r2,r16,256
 80024d4:	9deeb03a 	or	r23,r19,r23
 80024d8:	10000726 	beq	r2,zero,80024f8 <__muldf3+0x610>
 80024dc:	b804d07a 	srli	r2,r23,1
 80024e0:	800697fa 	slli	r3,r16,31
 80024e4:	bdc0004c 	andi	r23,r23,1
 80024e8:	8020d07a 	srli	r16,r16,1
 80024ec:	b8aeb03a 	or	r23,r23,r2
 80024f0:	b8eeb03a 	or	r23,r23,r3
 80024f4:	4007883a 	mov	r3,r8
 80024f8:	1900ffc4 	addi	r4,r3,1023
 80024fc:	01004d0e 	bge	zero,r4,8002634 <__muldf3+0x74c>
 8002500:	b88001cc 	andi	r2,r23,7
 8002504:	10000726 	beq	r2,zero,8002524 <__muldf3+0x63c>
 8002508:	b94003cc 	andi	r5,r23,15
 800250c:	00800104 	movi	r2,4
 8002510:	28800426 	beq	r5,r2,8002524 <__muldf3+0x63c>
 8002514:	b885883a 	add	r2,r23,r2
 8002518:	15ef803a 	cmpltu	r23,r2,r23
 800251c:	85e1883a 	add	r16,r16,r23
 8002520:	102f883a 	mov	r23,r2
 8002524:	8080402c 	andhi	r2,r16,256
 8002528:	10000426 	beq	r2,zero,800253c <__muldf3+0x654>
 800252c:	00bfc034 	movhi	r2,65280
 8002530:	10bfffc4 	addi	r2,r2,-1
 8002534:	19010004 	addi	r4,r3,1024
 8002538:	80a0703a 	and	r16,r16,r2
 800253c:	0081ff84 	movi	r2,2046
 8002540:	1100340e 	bge	r2,r4,8002614 <__muldf3+0x72c>
 8002544:	34c0004c 	andi	r19,r6,1
 8002548:	0101ffc4 	movi	r4,2047
 800254c:	0021883a 	mov	r16,zero
 8002550:	002f883a 	mov	r23,zero
 8002554:	003ebe06 	br	8002050 <__alt_data_end+0xfc002050>
 8002558:	8080022c 	andhi	r2,r16,8
 800255c:	10000926 	beq	r2,zero,8002584 <__muldf3+0x69c>
 8002560:	8880022c 	andhi	r2,r17,8
 8002564:	1000071e 	bne	r2,zero,8002584 <__muldf3+0x69c>
 8002568:	00800434 	movhi	r2,16
 800256c:	8c000234 	orhi	r16,r17,8
 8002570:	10bfffc4 	addi	r2,r2,-1
 8002574:	b027883a 	mov	r19,r22
 8002578:	80a0703a 	and	r16,r16,r2
 800257c:	902f883a 	mov	r23,r18
 8002580:	003f1a06 	br	80021ec <__alt_data_end+0xfc0021ec>
 8002584:	00800434 	movhi	r2,16
 8002588:	84000234 	orhi	r16,r16,8
 800258c:	10bfffc4 	addi	r2,r2,-1
 8002590:	80a0703a 	and	r16,r16,r2
 8002594:	003f1506 	br	80021ec <__alt_data_end+0xfc0021ec>
 8002598:	3009883a 	mov	r4,r6
 800259c:	d9400215 	stw	r5,8(sp)
 80025a0:	d9800715 	stw	r6,28(sp)
 80025a4:	da400415 	stw	r9,16(sp)
 80025a8:	da800315 	stw	r10,12(sp)
 80025ac:	80032200 	call	8003220 <__clzsi2>
 80025b0:	10c00804 	addi	r3,r2,32
 80025b4:	010009c4 	movi	r4,39
 80025b8:	d9400217 	ldw	r5,8(sp)
 80025bc:	d9800717 	ldw	r6,28(sp)
 80025c0:	da400417 	ldw	r9,16(sp)
 80025c4:	da800317 	ldw	r10,12(sp)
 80025c8:	20fee20e 	bge	r4,r3,8002154 <__alt_data_end+0xfc002154>
 80025cc:	147ffe04 	addi	r17,r2,-8
 80025d0:	9462983a 	sll	r17,r18,r17
 80025d4:	0025883a 	mov	r18,zero
 80025d8:	003ee506 	br	8002170 <__alt_data_end+0xfc002170>
 80025dc:	d9800715 	stw	r6,28(sp)
 80025e0:	d9c00215 	stw	r7,8(sp)
 80025e4:	da400415 	stw	r9,16(sp)
 80025e8:	80032200 	call	8003220 <__clzsi2>
 80025ec:	10c00804 	addi	r3,r2,32
 80025f0:	010009c4 	movi	r4,39
 80025f4:	d9800717 	ldw	r6,28(sp)
 80025f8:	d9c00217 	ldw	r7,8(sp)
 80025fc:	da400417 	ldw	r9,16(sp)
 8002600:	20feb40e 	bge	r4,r3,80020d4 <__alt_data_end+0xfc0020d4>
 8002604:	143ffe04 	addi	r16,r2,-8
 8002608:	9420983a 	sll	r16,r18,r16
 800260c:	002f883a 	mov	r23,zero
 8002610:	003eb706 	br	80020f0 <__alt_data_end+0xfc0020f0>
 8002614:	8004977a 	slli	r2,r16,29
 8002618:	b82ed0fa 	srli	r23,r23,3
 800261c:	8020927a 	slli	r16,r16,9
 8002620:	2101ffcc 	andi	r4,r4,2047
 8002624:	15eeb03a 	or	r23,r2,r23
 8002628:	8020d33a 	srli	r16,r16,12
 800262c:	34c0004c 	andi	r19,r6,1
 8002630:	003e8706 	br	8002050 <__alt_data_end+0xfc002050>
 8002634:	00bf0084 	movi	r2,-1022
 8002638:	10c5c83a 	sub	r2,r2,r3
 800263c:	01000e04 	movi	r4,56
 8002640:	2080080e 	bge	r4,r2,8002664 <__muldf3+0x77c>
 8002644:	34c0004c 	andi	r19,r6,1
 8002648:	0009883a 	mov	r4,zero
 800264c:	0021883a 	mov	r16,zero
 8002650:	002f883a 	mov	r23,zero
 8002654:	003e7e06 	br	8002050 <__alt_data_end+0xfc002050>
 8002658:	4007883a 	mov	r3,r8
 800265c:	480d883a 	mov	r6,r9
 8002660:	003fa506 	br	80024f8 <__alt_data_end+0xfc0024f8>
 8002664:	010007c4 	movi	r4,31
 8002668:	20801816 	blt	r4,r2,80026cc <__muldf3+0x7e4>
 800266c:	18c10784 	addi	r3,r3,1054
 8002670:	80c8983a 	sll	r4,r16,r3
 8002674:	b88ad83a 	srl	r5,r23,r2
 8002678:	b8c6983a 	sll	r3,r23,r3
 800267c:	80a0d83a 	srl	r16,r16,r2
 8002680:	2908b03a 	or	r4,r5,r4
 8002684:	1804c03a 	cmpne	r2,r3,zero
 8002688:	2088b03a 	or	r4,r4,r2
 800268c:	208001cc 	andi	r2,r4,7
 8002690:	10000726 	beq	r2,zero,80026b0 <__muldf3+0x7c8>
 8002694:	20c003cc 	andi	r3,r4,15
 8002698:	00800104 	movi	r2,4
 800269c:	18800426 	beq	r3,r2,80026b0 <__muldf3+0x7c8>
 80026a0:	20c00104 	addi	r3,r4,4
 80026a4:	1905803a 	cmpltu	r2,r3,r4
 80026a8:	80a1883a 	add	r16,r16,r2
 80026ac:	1809883a 	mov	r4,r3
 80026b0:	8080202c 	andhi	r2,r16,128
 80026b4:	10001b26 	beq	r2,zero,8002724 <__muldf3+0x83c>
 80026b8:	34c0004c 	andi	r19,r6,1
 80026bc:	01000044 	movi	r4,1
 80026c0:	0021883a 	mov	r16,zero
 80026c4:	002f883a 	mov	r23,zero
 80026c8:	003e6106 	br	8002050 <__alt_data_end+0xfc002050>
 80026cc:	013ef884 	movi	r4,-1054
 80026d0:	20c9c83a 	sub	r4,r4,r3
 80026d4:	01400804 	movi	r5,32
 80026d8:	8108d83a 	srl	r4,r16,r4
 80026dc:	11401526 	beq	r2,r5,8002734 <__muldf3+0x84c>
 80026e0:	18c10f84 	addi	r3,r3,1086
 80026e4:	80e0983a 	sll	r16,r16,r3
 80026e8:	85eeb03a 	or	r23,r16,r23
 80026ec:	b804c03a 	cmpne	r2,r23,zero
 80026f0:	1108b03a 	or	r4,r2,r4
 80026f4:	20c001cc 	andi	r3,r4,7
 80026f8:	1800061e 	bne	r3,zero,8002714 <__muldf3+0x82c>
 80026fc:	0021883a 	mov	r16,zero
 8002700:	202ed0fa 	srli	r23,r4,3
 8002704:	34c0004c 	andi	r19,r6,1
 8002708:	0009883a 	mov	r4,zero
 800270c:	b8eeb03a 	or	r23,r23,r3
 8002710:	003e4f06 	br	8002050 <__alt_data_end+0xfc002050>
 8002714:	20c003cc 	andi	r3,r4,15
 8002718:	00800104 	movi	r2,4
 800271c:	0021883a 	mov	r16,zero
 8002720:	18bfdf1e 	bne	r3,r2,80026a0 <__alt_data_end+0xfc0026a0>
 8002724:	8004927a 	slli	r2,r16,9
 8002728:	8006977a 	slli	r3,r16,29
 800272c:	1020d33a 	srli	r16,r2,12
 8002730:	003ff306 	br	8002700 <__alt_data_end+0xfc002700>
 8002734:	0021883a 	mov	r16,zero
 8002738:	003feb06 	br	80026e8 <__alt_data_end+0xfc0026e8>
 800273c:	00800434 	movhi	r2,16
 8002740:	84000234 	orhi	r16,r16,8
 8002744:	10bfffc4 	addi	r2,r2,-1
 8002748:	4cc0004c 	andi	r19,r9,1
 800274c:	80a0703a 	and	r16,r16,r2
 8002750:	003ea606 	br	80021ec <__alt_data_end+0xfc0021ec>

08002754 <__subdf3>:
 8002754:	00c00434 	movhi	r3,16
 8002758:	18ffffc4 	addi	r3,r3,-1
 800275c:	defffb04 	addi	sp,sp,-20
 8002760:	28d2703a 	and	r9,r5,r3
 8002764:	3814d53a 	srli	r10,r7,20
 8002768:	38c6703a 	and	r3,r7,r3
 800276c:	3004d77a 	srli	r2,r6,29
 8002770:	dc800215 	stw	r18,8(sp)
 8002774:	dc000015 	stw	r16,0(sp)
 8002778:	2824d7fa 	srli	r18,r5,31
 800277c:	2820d53a 	srli	r16,r5,20
 8002780:	481290fa 	slli	r9,r9,3
 8002784:	200ad77a 	srli	r5,r4,29
 8002788:	180690fa 	slli	r3,r3,3
 800278c:	dc400115 	stw	r17,4(sp)
 8002790:	dfc00415 	stw	ra,16(sp)
 8002794:	202290fa 	slli	r17,r4,3
 8002798:	dcc00315 	stw	r19,12(sp)
 800279c:	5281ffcc 	andi	r10,r10,2047
 80027a0:	0101ffc4 	movi	r4,2047
 80027a4:	9011883a 	mov	r8,r18
 80027a8:	8401ffcc 	andi	r16,r16,2047
 80027ac:	94803fcc 	andi	r18,r18,255
 80027b0:	494ab03a 	or	r5,r9,r5
 80027b4:	380ed7fa 	srli	r7,r7,31
 80027b8:	1886b03a 	or	r3,r3,r2
 80027bc:	300c90fa 	slli	r6,r6,3
 80027c0:	51009026 	beq	r10,r4,8002a04 <__subdf3+0x2b0>
 80027c4:	39c0005c 	xori	r7,r7,1
 80027c8:	8285c83a 	sub	r2,r16,r10
 80027cc:	91c06f26 	beq	r18,r7,800298c <__subdf3+0x238>
 80027d0:	0080b10e 	bge	zero,r2,8002a98 <__subdf3+0x344>
 80027d4:	50002a1e 	bne	r10,zero,8002880 <__subdf3+0x12c>
 80027d8:	1988b03a 	or	r4,r3,r6
 80027dc:	2000941e 	bne	r4,zero,8002a30 <__subdf3+0x2dc>
 80027e0:	888001cc 	andi	r2,r17,7
 80027e4:	10005b26 	beq	r2,zero,8002954 <__subdf3+0x200>
 80027e8:	88c003cc 	andi	r3,r17,15
 80027ec:	00800104 	movi	r2,4
 80027f0:	18805826 	beq	r3,r2,8002954 <__subdf3+0x200>
 80027f4:	88c00104 	addi	r3,r17,4
 80027f8:	1c63803a 	cmpltu	r17,r3,r17
 80027fc:	2c4b883a 	add	r5,r5,r17
 8002800:	2880202c 	andhi	r2,r5,128
 8002804:	9200004c 	andi	r8,r18,1
 8002808:	1823883a 	mov	r17,r3
 800280c:	10005426 	beq	r2,zero,8002960 <__subdf3+0x20c>
 8002810:	84000044 	addi	r16,r16,1
 8002814:	0081ffc4 	movi	r2,2047
 8002818:	8080bf26 	beq	r16,r2,8002b18 <__subdf3+0x3c4>
 800281c:	013fe034 	movhi	r4,65408
 8002820:	213fffc4 	addi	r4,r4,-1
 8002824:	290a703a 	and	r5,r5,r4
 8002828:	2804977a 	slli	r2,r5,29
 800282c:	280a927a 	slli	r5,r5,9
 8002830:	8822d0fa 	srli	r17,r17,3
 8002834:	8401ffcc 	andi	r16,r16,2047
 8002838:	2808d33a 	srli	r4,r5,12
 800283c:	1444b03a 	or	r2,r2,r17
 8002840:	8401ffcc 	andi	r16,r16,2047
 8002844:	800a953a 	slli	r5,r16,20
 8002848:	40c03fcc 	andi	r3,r8,255
 800284c:	04000434 	movhi	r16,16
 8002850:	180697fa 	slli	r3,r3,31
 8002854:	843fffc4 	addi	r16,r16,-1
 8002858:	2420703a 	and	r16,r4,r16
 800285c:	8160b03a 	or	r16,r16,r5
 8002860:	80c6b03a 	or	r3,r16,r3
 8002864:	dfc00417 	ldw	ra,16(sp)
 8002868:	dcc00317 	ldw	r19,12(sp)
 800286c:	dc800217 	ldw	r18,8(sp)
 8002870:	dc400117 	ldw	r17,4(sp)
 8002874:	dc000017 	ldw	r16,0(sp)
 8002878:	dec00504 	addi	sp,sp,20
 800287c:	f800283a 	ret
 8002880:	0101ffc4 	movi	r4,2047
 8002884:	813fd626 	beq	r16,r4,80027e0 <__alt_data_end+0xfc0027e0>
 8002888:	18c02034 	orhi	r3,r3,128
 800288c:	01000e04 	movi	r4,56
 8002890:	2080a416 	blt	r4,r2,8002b24 <__subdf3+0x3d0>
 8002894:	010007c4 	movi	r4,31
 8002898:	2080c716 	blt	r4,r2,8002bb8 <__subdf3+0x464>
 800289c:	01000804 	movi	r4,32
 80028a0:	2089c83a 	sub	r4,r4,r2
 80028a4:	1910983a 	sll	r8,r3,r4
 80028a8:	308ed83a 	srl	r7,r6,r2
 80028ac:	3108983a 	sll	r4,r6,r4
 80028b0:	1884d83a 	srl	r2,r3,r2
 80028b4:	41ccb03a 	or	r6,r8,r7
 80028b8:	2008c03a 	cmpne	r4,r4,zero
 80028bc:	310cb03a 	or	r6,r6,r4
 80028c0:	898dc83a 	sub	r6,r17,r6
 80028c4:	89a3803a 	cmpltu	r17,r17,r6
 80028c8:	288bc83a 	sub	r5,r5,r2
 80028cc:	2c4bc83a 	sub	r5,r5,r17
 80028d0:	3023883a 	mov	r17,r6
 80028d4:	2880202c 	andhi	r2,r5,128
 80028d8:	10006b26 	beq	r2,zero,8002a88 <__subdf3+0x334>
 80028dc:	04c02034 	movhi	r19,128
 80028e0:	9cffffc4 	addi	r19,r19,-1
 80028e4:	2ce6703a 	and	r19,r5,r19
 80028e8:	98007c26 	beq	r19,zero,8002adc <__subdf3+0x388>
 80028ec:	9809883a 	mov	r4,r19
 80028f0:	80032200 	call	8003220 <__clzsi2>
 80028f4:	10fffe04 	addi	r3,r2,-8
 80028f8:	010007c4 	movi	r4,31
 80028fc:	20c07d16 	blt	r4,r3,8002af4 <__subdf3+0x3a0>
 8002900:	01400a04 	movi	r5,40
 8002904:	2885c83a 	sub	r2,r5,r2
 8002908:	888ad83a 	srl	r5,r17,r2
 800290c:	98e6983a 	sll	r19,r19,r3
 8002910:	88e2983a 	sll	r17,r17,r3
 8002914:	2ce6b03a 	or	r19,r5,r19
 8002918:	1c007a16 	blt	r3,r16,8002b04 <__subdf3+0x3b0>
 800291c:	1c21c83a 	sub	r16,r3,r16
 8002920:	81400044 	addi	r5,r16,1
 8002924:	00c007c4 	movi	r3,31
 8002928:	19409616 	blt	r3,r5,8002b84 <__subdf3+0x430>
 800292c:	1c21c83a 	sub	r16,r3,r16
 8002930:	8c08983a 	sll	r4,r17,r16
 8002934:	8946d83a 	srl	r3,r17,r5
 8002938:	9c20983a 	sll	r16,r19,r16
 800293c:	2008c03a 	cmpne	r4,r4,zero
 8002940:	994ad83a 	srl	r5,r19,r5
 8002944:	1c06b03a 	or	r3,r3,r16
 8002948:	1922b03a 	or	r17,r3,r4
 800294c:	0021883a 	mov	r16,zero
 8002950:	003fa306 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002954:	2880202c 	andhi	r2,r5,128
 8002958:	9200004c 	andi	r8,r18,1
 800295c:	103fac1e 	bne	r2,zero,8002810 <__alt_data_end+0xfc002810>
 8002960:	2804977a 	slli	r2,r5,29
 8002964:	8822d0fa 	srli	r17,r17,3
 8002968:	00c1ffc4 	movi	r3,2047
 800296c:	280ad0fa 	srli	r5,r5,3
 8002970:	1444b03a 	or	r2,r2,r17
 8002974:	80c02726 	beq	r16,r3,8002a14 <__subdf3+0x2c0>
 8002978:	01000434 	movhi	r4,16
 800297c:	213fffc4 	addi	r4,r4,-1
 8002980:	80e0703a 	and	r16,r16,r3
 8002984:	2908703a 	and	r4,r5,r4
 8002988:	003fad06 	br	8002840 <__alt_data_end+0xfc002840>
 800298c:	0080690e 	bge	zero,r2,8002b34 <__subdf3+0x3e0>
 8002990:	50002f26 	beq	r10,zero,8002a50 <__subdf3+0x2fc>
 8002994:	0101ffc4 	movi	r4,2047
 8002998:	813f9126 	beq	r16,r4,80027e0 <__alt_data_end+0xfc0027e0>
 800299c:	18c02034 	orhi	r3,r3,128
 80029a0:	01000e04 	movi	r4,56
 80029a4:	2080b00e 	bge	r4,r2,8002c68 <__subdf3+0x514>
 80029a8:	198cb03a 	or	r6,r3,r6
 80029ac:	300ec03a 	cmpne	r7,r6,zero
 80029b0:	0005883a 	mov	r2,zero
 80029b4:	3c4f883a 	add	r7,r7,r17
 80029b8:	3c63803a 	cmpltu	r17,r7,r17
 80029bc:	114b883a 	add	r5,r2,r5
 80029c0:	2c4b883a 	add	r5,r5,r17
 80029c4:	3823883a 	mov	r17,r7
 80029c8:	2880202c 	andhi	r2,r5,128
 80029cc:	10002e26 	beq	r2,zero,8002a88 <__subdf3+0x334>
 80029d0:	84000044 	addi	r16,r16,1
 80029d4:	0081ffc4 	movi	r2,2047
 80029d8:	8080de26 	beq	r16,r2,8002d54 <__subdf3+0x600>
 80029dc:	00bfe034 	movhi	r2,65408
 80029e0:	10bfffc4 	addi	r2,r2,-1
 80029e4:	288a703a 	and	r5,r5,r2
 80029e8:	880cd07a 	srli	r6,r17,1
 80029ec:	280897fa 	slli	r4,r5,31
 80029f0:	88c0004c 	andi	r3,r17,1
 80029f4:	30e2b03a 	or	r17,r6,r3
 80029f8:	280ad07a 	srli	r5,r5,1
 80029fc:	8922b03a 	or	r17,r17,r4
 8002a00:	003f7706 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002a04:	1984b03a 	or	r2,r3,r6
 8002a08:	103f6e26 	beq	r2,zero,80027c4 <__alt_data_end+0xfc0027c4>
 8002a0c:	39c03fcc 	andi	r7,r7,255
 8002a10:	003f6d06 	br	80027c8 <__alt_data_end+0xfc0027c8>
 8002a14:	1146b03a 	or	r3,r2,r5
 8002a18:	18003f26 	beq	r3,zero,8002b18 <__subdf3+0x3c4>
 8002a1c:	00c00434 	movhi	r3,16
 8002a20:	29000234 	orhi	r4,r5,8
 8002a24:	18ffffc4 	addi	r3,r3,-1
 8002a28:	20c8703a 	and	r4,r4,r3
 8002a2c:	003f8406 	br	8002840 <__alt_data_end+0xfc002840>
 8002a30:	10bfffc4 	addi	r2,r2,-1
 8002a34:	1000501e 	bne	r2,zero,8002b78 <__subdf3+0x424>
 8002a38:	898fc83a 	sub	r7,r17,r6
 8002a3c:	89e3803a 	cmpltu	r17,r17,r7
 8002a40:	28cbc83a 	sub	r5,r5,r3
 8002a44:	2c4bc83a 	sub	r5,r5,r17
 8002a48:	3823883a 	mov	r17,r7
 8002a4c:	003fa106 	br	80028d4 <__alt_data_end+0xfc0028d4>
 8002a50:	1988b03a 	or	r4,r3,r6
 8002a54:	203f6226 	beq	r4,zero,80027e0 <__alt_data_end+0xfc0027e0>
 8002a58:	10bfffc4 	addi	r2,r2,-1
 8002a5c:	10009b1e 	bne	r2,zero,8002ccc <__subdf3+0x578>
 8002a60:	344d883a 	add	r6,r6,r17
 8002a64:	3463803a 	cmpltu	r17,r6,r17
 8002a68:	194b883a 	add	r5,r3,r5
 8002a6c:	2c4b883a 	add	r5,r5,r17
 8002a70:	3023883a 	mov	r17,r6
 8002a74:	003fd406 	br	80029c8 <__alt_data_end+0xfc0029c8>
 8002a78:	1106b03a 	or	r3,r2,r4
 8002a7c:	1800b426 	beq	r3,zero,8002d50 <__subdf3+0x5fc>
 8002a80:	100b883a 	mov	r5,r2
 8002a84:	2023883a 	mov	r17,r4
 8002a88:	888001cc 	andi	r2,r17,7
 8002a8c:	103f561e 	bne	r2,zero,80027e8 <__alt_data_end+0xfc0027e8>
 8002a90:	9200004c 	andi	r8,r18,1
 8002a94:	003fb206 	br	8002960 <__alt_data_end+0xfc002960>
 8002a98:	1000531e 	bne	r2,zero,8002be8 <__subdf3+0x494>
 8002a9c:	80800044 	addi	r2,r16,1
 8002aa0:	1081ffcc 	andi	r2,r2,2047
 8002aa4:	01000044 	movi	r4,1
 8002aa8:	2080a00e 	bge	r4,r2,8002d2c <__subdf3+0x5d8>
 8002aac:	8985c83a 	sub	r2,r17,r6
 8002ab0:	8889803a 	cmpltu	r4,r17,r2
 8002ab4:	28e7c83a 	sub	r19,r5,r3
 8002ab8:	9927c83a 	sub	r19,r19,r4
 8002abc:	9900202c 	andhi	r4,r19,128
 8002ac0:	20006226 	beq	r4,zero,8002c4c <__subdf3+0x4f8>
 8002ac4:	3463c83a 	sub	r17,r6,r17
 8002ac8:	194bc83a 	sub	r5,r3,r5
 8002acc:	344d803a 	cmpltu	r6,r6,r17
 8002ad0:	29a7c83a 	sub	r19,r5,r6
 8002ad4:	3825883a 	mov	r18,r7
 8002ad8:	983f841e 	bne	r19,zero,80028ec <__alt_data_end+0xfc0028ec>
 8002adc:	8809883a 	mov	r4,r17
 8002ae0:	80032200 	call	8003220 <__clzsi2>
 8002ae4:	10800804 	addi	r2,r2,32
 8002ae8:	10fffe04 	addi	r3,r2,-8
 8002aec:	010007c4 	movi	r4,31
 8002af0:	20ff830e 	bge	r4,r3,8002900 <__alt_data_end+0xfc002900>
 8002af4:	14fff604 	addi	r19,r2,-40
 8002af8:	8ce6983a 	sll	r19,r17,r19
 8002afc:	0023883a 	mov	r17,zero
 8002b00:	1c3f860e 	bge	r3,r16,800291c <__alt_data_end+0xfc00291c>
 8002b04:	017fe034 	movhi	r5,65408
 8002b08:	297fffc4 	addi	r5,r5,-1
 8002b0c:	80e1c83a 	sub	r16,r16,r3
 8002b10:	994a703a 	and	r5,r19,r5
 8002b14:	003f3206 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002b18:	0009883a 	mov	r4,zero
 8002b1c:	0005883a 	mov	r2,zero
 8002b20:	003f4706 	br	8002840 <__alt_data_end+0xfc002840>
 8002b24:	198cb03a 	or	r6,r3,r6
 8002b28:	300cc03a 	cmpne	r6,r6,zero
 8002b2c:	0005883a 	mov	r2,zero
 8002b30:	003f6306 	br	80028c0 <__alt_data_end+0xfc0028c0>
 8002b34:	10009d1e 	bne	r2,zero,8002dac <__subdf3+0x658>
 8002b38:	81c00044 	addi	r7,r16,1
 8002b3c:	3881ffcc 	andi	r2,r7,2047
 8002b40:	02400044 	movi	r9,1
 8002b44:	4880680e 	bge	r9,r2,8002ce8 <__subdf3+0x594>
 8002b48:	0081ffc4 	movi	r2,2047
 8002b4c:	3880ae26 	beq	r7,r2,8002e08 <__subdf3+0x6b4>
 8002b50:	344d883a 	add	r6,r6,r17
 8002b54:	3463803a 	cmpltu	r17,r6,r17
 8002b58:	194b883a 	add	r5,r3,r5
 8002b5c:	2c4b883a 	add	r5,r5,r17
 8002b60:	282297fa 	slli	r17,r5,31
 8002b64:	300cd07a 	srli	r6,r6,1
 8002b68:	280ad07a 	srli	r5,r5,1
 8002b6c:	3821883a 	mov	r16,r7
 8002b70:	89a2b03a 	or	r17,r17,r6
 8002b74:	003f1a06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002b78:	0101ffc4 	movi	r4,2047
 8002b7c:	813f431e 	bne	r16,r4,800288c <__alt_data_end+0xfc00288c>
 8002b80:	003f1706 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002b84:	80bff844 	addi	r2,r16,-31
 8002b88:	00c00804 	movi	r3,32
 8002b8c:	9884d83a 	srl	r2,r19,r2
 8002b90:	28c05126 	beq	r5,r3,8002cd8 <__subdf3+0x584>
 8002b94:	00c00fc4 	movi	r3,63
 8002b98:	1c21c83a 	sub	r16,r3,r16
 8002b9c:	9c26983a 	sll	r19,r19,r16
 8002ba0:	9c62b03a 	or	r17,r19,r17
 8002ba4:	8822c03a 	cmpne	r17,r17,zero
 8002ba8:	88a2b03a 	or	r17,r17,r2
 8002bac:	000b883a 	mov	r5,zero
 8002bb0:	0021883a 	mov	r16,zero
 8002bb4:	003fb406 	br	8002a88 <__alt_data_end+0xfc002a88>
 8002bb8:	113ff804 	addi	r4,r2,-32
 8002bbc:	01c00804 	movi	r7,32
 8002bc0:	1908d83a 	srl	r4,r3,r4
 8002bc4:	11c04626 	beq	r2,r7,8002ce0 <__subdf3+0x58c>
 8002bc8:	01c01004 	movi	r7,64
 8002bcc:	3885c83a 	sub	r2,r7,r2
 8002bd0:	1884983a 	sll	r2,r3,r2
 8002bd4:	118cb03a 	or	r6,r2,r6
 8002bd8:	300cc03a 	cmpne	r6,r6,zero
 8002bdc:	310cb03a 	or	r6,r6,r4
 8002be0:	0005883a 	mov	r2,zero
 8002be4:	003f3606 	br	80028c0 <__alt_data_end+0xfc0028c0>
 8002be8:	80002b26 	beq	r16,zero,8002c98 <__subdf3+0x544>
 8002bec:	0101ffc4 	movi	r4,2047
 8002bf0:	51006926 	beq	r10,r4,8002d98 <__subdf3+0x644>
 8002bf4:	0085c83a 	sub	r2,zero,r2
 8002bf8:	29402034 	orhi	r5,r5,128
 8002bfc:	01000e04 	movi	r4,56
 8002c00:	20807d16 	blt	r4,r2,8002df8 <__subdf3+0x6a4>
 8002c04:	010007c4 	movi	r4,31
 8002c08:	2080d916 	blt	r4,r2,8002f70 <__subdf3+0x81c>
 8002c0c:	01000804 	movi	r4,32
 8002c10:	2089c83a 	sub	r4,r4,r2
 8002c14:	2912983a 	sll	r9,r5,r4
 8002c18:	8890d83a 	srl	r8,r17,r2
 8002c1c:	8908983a 	sll	r4,r17,r4
 8002c20:	2884d83a 	srl	r2,r5,r2
 8002c24:	4a22b03a 	or	r17,r9,r8
 8002c28:	2008c03a 	cmpne	r4,r4,zero
 8002c2c:	8922b03a 	or	r17,r17,r4
 8002c30:	3463c83a 	sub	r17,r6,r17
 8002c34:	1885c83a 	sub	r2,r3,r2
 8002c38:	344d803a 	cmpltu	r6,r6,r17
 8002c3c:	118bc83a 	sub	r5,r2,r6
 8002c40:	5021883a 	mov	r16,r10
 8002c44:	3825883a 	mov	r18,r7
 8002c48:	003f2206 	br	80028d4 <__alt_data_end+0xfc0028d4>
 8002c4c:	9886b03a 	or	r3,r19,r2
 8002c50:	18001c1e 	bne	r3,zero,8002cc4 <__subdf3+0x570>
 8002c54:	0011883a 	mov	r8,zero
 8002c58:	000b883a 	mov	r5,zero
 8002c5c:	0023883a 	mov	r17,zero
 8002c60:	0021883a 	mov	r16,zero
 8002c64:	003f3e06 	br	8002960 <__alt_data_end+0xfc002960>
 8002c68:	010007c4 	movi	r4,31
 8002c6c:	20803c16 	blt	r4,r2,8002d60 <__subdf3+0x60c>
 8002c70:	01000804 	movi	r4,32
 8002c74:	2089c83a 	sub	r4,r4,r2
 8002c78:	1912983a 	sll	r9,r3,r4
 8002c7c:	308ed83a 	srl	r7,r6,r2
 8002c80:	3108983a 	sll	r4,r6,r4
 8002c84:	1884d83a 	srl	r2,r3,r2
 8002c88:	49ceb03a 	or	r7,r9,r7
 8002c8c:	2008c03a 	cmpne	r4,r4,zero
 8002c90:	390eb03a 	or	r7,r7,r4
 8002c94:	003f4706 	br	80029b4 <__alt_data_end+0xfc0029b4>
 8002c98:	2c48b03a 	or	r4,r5,r17
 8002c9c:	20003e26 	beq	r4,zero,8002d98 <__subdf3+0x644>
 8002ca0:	0084303a 	nor	r2,zero,r2
 8002ca4:	10003a1e 	bne	r2,zero,8002d90 <__subdf3+0x63c>
 8002ca8:	3463c83a 	sub	r17,r6,r17
 8002cac:	194bc83a 	sub	r5,r3,r5
 8002cb0:	344d803a 	cmpltu	r6,r6,r17
 8002cb4:	298bc83a 	sub	r5,r5,r6
 8002cb8:	5021883a 	mov	r16,r10
 8002cbc:	3825883a 	mov	r18,r7
 8002cc0:	003f0406 	br	80028d4 <__alt_data_end+0xfc0028d4>
 8002cc4:	1023883a 	mov	r17,r2
 8002cc8:	003f0706 	br	80028e8 <__alt_data_end+0xfc0028e8>
 8002ccc:	0101ffc4 	movi	r4,2047
 8002cd0:	813f331e 	bne	r16,r4,80029a0 <__alt_data_end+0xfc0029a0>
 8002cd4:	003ec206 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002cd8:	0027883a 	mov	r19,zero
 8002cdc:	003fb006 	br	8002ba0 <__alt_data_end+0xfc002ba0>
 8002ce0:	0005883a 	mov	r2,zero
 8002ce4:	003fbb06 	br	8002bd4 <__alt_data_end+0xfc002bd4>
 8002ce8:	2c44b03a 	or	r2,r5,r17
 8002cec:	80008b1e 	bne	r16,zero,8002f1c <__subdf3+0x7c8>
 8002cf0:	1000b526 	beq	r2,zero,8002fc8 <__subdf3+0x874>
 8002cf4:	1984b03a 	or	r2,r3,r6
 8002cf8:	103eb926 	beq	r2,zero,80027e0 <__alt_data_end+0xfc0027e0>
 8002cfc:	3449883a 	add	r4,r6,r17
 8002d00:	2463803a 	cmpltu	r17,r4,r17
 8002d04:	194b883a 	add	r5,r3,r5
 8002d08:	2c4b883a 	add	r5,r5,r17
 8002d0c:	2880202c 	andhi	r2,r5,128
 8002d10:	2023883a 	mov	r17,r4
 8002d14:	103f5c26 	beq	r2,zero,8002a88 <__alt_data_end+0xfc002a88>
 8002d18:	00bfe034 	movhi	r2,65408
 8002d1c:	10bfffc4 	addi	r2,r2,-1
 8002d20:	4821883a 	mov	r16,r9
 8002d24:	288a703a 	and	r5,r5,r2
 8002d28:	003ead06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002d2c:	2c44b03a 	or	r2,r5,r17
 8002d30:	8000291e 	bne	r16,zero,8002dd8 <__subdf3+0x684>
 8002d34:	10004f1e 	bne	r2,zero,8002e74 <__subdf3+0x720>
 8002d38:	1984b03a 	or	r2,r3,r6
 8002d3c:	10000426 	beq	r2,zero,8002d50 <__subdf3+0x5fc>
 8002d40:	180b883a 	mov	r5,r3
 8002d44:	3023883a 	mov	r17,r6
 8002d48:	3825883a 	mov	r18,r7
 8002d4c:	003ea406 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002d50:	0011883a 	mov	r8,zero
 8002d54:	000b883a 	mov	r5,zero
 8002d58:	0023883a 	mov	r17,zero
 8002d5c:	003f0006 	br	8002960 <__alt_data_end+0xfc002960>
 8002d60:	11fff804 	addi	r7,r2,-32
 8002d64:	19c8d83a 	srl	r4,r3,r7
 8002d68:	01c00804 	movi	r7,32
 8002d6c:	11c07e26 	beq	r2,r7,8002f68 <__subdf3+0x814>
 8002d70:	01c01004 	movi	r7,64
 8002d74:	3885c83a 	sub	r2,r7,r2
 8002d78:	1884983a 	sll	r2,r3,r2
 8002d7c:	118cb03a 	or	r6,r2,r6
 8002d80:	300ec03a 	cmpne	r7,r6,zero
 8002d84:	390eb03a 	or	r7,r7,r4
 8002d88:	0005883a 	mov	r2,zero
 8002d8c:	003f0906 	br	80029b4 <__alt_data_end+0xfc0029b4>
 8002d90:	0101ffc4 	movi	r4,2047
 8002d94:	513f991e 	bne	r10,r4,8002bfc <__alt_data_end+0xfc002bfc>
 8002d98:	180b883a 	mov	r5,r3
 8002d9c:	3023883a 	mov	r17,r6
 8002da0:	5021883a 	mov	r16,r10
 8002da4:	3825883a 	mov	r18,r7
 8002da8:	003e8d06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002dac:	80001a1e 	bne	r16,zero,8002e18 <__subdf3+0x6c4>
 8002db0:	2c48b03a 	or	r4,r5,r17
 8002db4:	20005526 	beq	r4,zero,8002f0c <__subdf3+0x7b8>
 8002db8:	0084303a 	nor	r2,zero,r2
 8002dbc:	1000511e 	bne	r2,zero,8002f04 <__subdf3+0x7b0>
 8002dc0:	89a3883a 	add	r17,r17,r6
 8002dc4:	194b883a 	add	r5,r3,r5
 8002dc8:	898d803a 	cmpltu	r6,r17,r6
 8002dcc:	298b883a 	add	r5,r5,r6
 8002dd0:	5021883a 	mov	r16,r10
 8002dd4:	003efc06 	br	80029c8 <__alt_data_end+0xfc0029c8>
 8002dd8:	1000341e 	bne	r2,zero,8002eac <__subdf3+0x758>
 8002ddc:	1984b03a 	or	r2,r3,r6
 8002de0:	10006f26 	beq	r2,zero,8002fa0 <__subdf3+0x84c>
 8002de4:	180b883a 	mov	r5,r3
 8002de8:	3023883a 	mov	r17,r6
 8002dec:	3825883a 	mov	r18,r7
 8002df0:	0401ffc4 	movi	r16,2047
 8002df4:	003e7a06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002df8:	2c62b03a 	or	r17,r5,r17
 8002dfc:	8822c03a 	cmpne	r17,r17,zero
 8002e00:	0005883a 	mov	r2,zero
 8002e04:	003f8a06 	br	8002c30 <__alt_data_end+0xfc002c30>
 8002e08:	3821883a 	mov	r16,r7
 8002e0c:	000b883a 	mov	r5,zero
 8002e10:	0023883a 	mov	r17,zero
 8002e14:	003ed206 	br	8002960 <__alt_data_end+0xfc002960>
 8002e18:	0101ffc4 	movi	r4,2047
 8002e1c:	51003b26 	beq	r10,r4,8002f0c <__subdf3+0x7b8>
 8002e20:	0085c83a 	sub	r2,zero,r2
 8002e24:	29402034 	orhi	r5,r5,128
 8002e28:	01000e04 	movi	r4,56
 8002e2c:	20806216 	blt	r4,r2,8002fb8 <__subdf3+0x864>
 8002e30:	010007c4 	movi	r4,31
 8002e34:	20806b16 	blt	r4,r2,8002fe4 <__subdf3+0x890>
 8002e38:	01000804 	movi	r4,32
 8002e3c:	2089c83a 	sub	r4,r4,r2
 8002e40:	2912983a 	sll	r9,r5,r4
 8002e44:	888ed83a 	srl	r7,r17,r2
 8002e48:	8908983a 	sll	r4,r17,r4
 8002e4c:	2884d83a 	srl	r2,r5,r2
 8002e50:	49e2b03a 	or	r17,r9,r7
 8002e54:	2008c03a 	cmpne	r4,r4,zero
 8002e58:	8922b03a 	or	r17,r17,r4
 8002e5c:	89a3883a 	add	r17,r17,r6
 8002e60:	10c5883a 	add	r2,r2,r3
 8002e64:	898d803a 	cmpltu	r6,r17,r6
 8002e68:	118b883a 	add	r5,r2,r6
 8002e6c:	5021883a 	mov	r16,r10
 8002e70:	003ed506 	br	80029c8 <__alt_data_end+0xfc0029c8>
 8002e74:	1984b03a 	or	r2,r3,r6
 8002e78:	103e5926 	beq	r2,zero,80027e0 <__alt_data_end+0xfc0027e0>
 8002e7c:	8989c83a 	sub	r4,r17,r6
 8002e80:	8911803a 	cmpltu	r8,r17,r4
 8002e84:	28c5c83a 	sub	r2,r5,r3
 8002e88:	1205c83a 	sub	r2,r2,r8
 8002e8c:	1200202c 	andhi	r8,r2,128
 8002e90:	403ef926 	beq	r8,zero,8002a78 <__alt_data_end+0xfc002a78>
 8002e94:	3463c83a 	sub	r17,r6,r17
 8002e98:	194bc83a 	sub	r5,r3,r5
 8002e9c:	344d803a 	cmpltu	r6,r6,r17
 8002ea0:	298bc83a 	sub	r5,r5,r6
 8002ea4:	3825883a 	mov	r18,r7
 8002ea8:	003e4d06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002eac:	1984b03a 	or	r2,r3,r6
 8002eb0:	10002b26 	beq	r2,zero,8002f60 <__subdf3+0x80c>
 8002eb4:	2808d0fa 	srli	r4,r5,3
 8002eb8:	8822d0fa 	srli	r17,r17,3
 8002ebc:	280a977a 	slli	r5,r5,29
 8002ec0:	2080022c 	andhi	r2,r4,8
 8002ec4:	2c62b03a 	or	r17,r5,r17
 8002ec8:	10000826 	beq	r2,zero,8002eec <__subdf3+0x798>
 8002ecc:	1810d0fa 	srli	r8,r3,3
 8002ed0:	4080022c 	andhi	r2,r8,8
 8002ed4:	1000051e 	bne	r2,zero,8002eec <__subdf3+0x798>
 8002ed8:	300cd0fa 	srli	r6,r6,3
 8002edc:	1804977a 	slli	r2,r3,29
 8002ee0:	4009883a 	mov	r4,r8
 8002ee4:	3825883a 	mov	r18,r7
 8002ee8:	11a2b03a 	or	r17,r2,r6
 8002eec:	880ad77a 	srli	r5,r17,29
 8002ef0:	200890fa 	slli	r4,r4,3
 8002ef4:	882290fa 	slli	r17,r17,3
 8002ef8:	0401ffc4 	movi	r16,2047
 8002efc:	290ab03a 	or	r5,r5,r4
 8002f00:	003e3706 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002f04:	0101ffc4 	movi	r4,2047
 8002f08:	513fc71e 	bne	r10,r4,8002e28 <__alt_data_end+0xfc002e28>
 8002f0c:	180b883a 	mov	r5,r3
 8002f10:	3023883a 	mov	r17,r6
 8002f14:	5021883a 	mov	r16,r10
 8002f18:	003e3106 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002f1c:	10002d26 	beq	r2,zero,8002fd4 <__subdf3+0x880>
 8002f20:	1984b03a 	or	r2,r3,r6
 8002f24:	10000e26 	beq	r2,zero,8002f60 <__subdf3+0x80c>
 8002f28:	2808d0fa 	srli	r4,r5,3
 8002f2c:	8822d0fa 	srli	r17,r17,3
 8002f30:	280a977a 	slli	r5,r5,29
 8002f34:	2080022c 	andhi	r2,r4,8
 8002f38:	2c62b03a 	or	r17,r5,r17
 8002f3c:	103feb26 	beq	r2,zero,8002eec <__alt_data_end+0xfc002eec>
 8002f40:	180ed0fa 	srli	r7,r3,3
 8002f44:	3880022c 	andhi	r2,r7,8
 8002f48:	103fe81e 	bne	r2,zero,8002eec <__alt_data_end+0xfc002eec>
 8002f4c:	300cd0fa 	srli	r6,r6,3
 8002f50:	1804977a 	slli	r2,r3,29
 8002f54:	3809883a 	mov	r4,r7
 8002f58:	11a2b03a 	or	r17,r2,r6
 8002f5c:	003fe306 	br	8002eec <__alt_data_end+0xfc002eec>
 8002f60:	0401ffc4 	movi	r16,2047
 8002f64:	003e1e06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002f68:	0005883a 	mov	r2,zero
 8002f6c:	003f8306 	br	8002d7c <__alt_data_end+0xfc002d7c>
 8002f70:	113ff804 	addi	r4,r2,-32
 8002f74:	02000804 	movi	r8,32
 8002f78:	2908d83a 	srl	r4,r5,r4
 8002f7c:	12002526 	beq	r2,r8,8003014 <__subdf3+0x8c0>
 8002f80:	02001004 	movi	r8,64
 8002f84:	4085c83a 	sub	r2,r8,r2
 8002f88:	288a983a 	sll	r5,r5,r2
 8002f8c:	2c62b03a 	or	r17,r5,r17
 8002f90:	8822c03a 	cmpne	r17,r17,zero
 8002f94:	8922b03a 	or	r17,r17,r4
 8002f98:	0005883a 	mov	r2,zero
 8002f9c:	003f2406 	br	8002c30 <__alt_data_end+0xfc002c30>
 8002fa0:	01402034 	movhi	r5,128
 8002fa4:	0011883a 	mov	r8,zero
 8002fa8:	297fffc4 	addi	r5,r5,-1
 8002fac:	047ffe04 	movi	r17,-8
 8002fb0:	0401ffc4 	movi	r16,2047
 8002fb4:	003e6a06 	br	8002960 <__alt_data_end+0xfc002960>
 8002fb8:	2c62b03a 	or	r17,r5,r17
 8002fbc:	8822c03a 	cmpne	r17,r17,zero
 8002fc0:	0005883a 	mov	r2,zero
 8002fc4:	003fa506 	br	8002e5c <__alt_data_end+0xfc002e5c>
 8002fc8:	180b883a 	mov	r5,r3
 8002fcc:	3023883a 	mov	r17,r6
 8002fd0:	003e0306 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002fd4:	180b883a 	mov	r5,r3
 8002fd8:	3023883a 	mov	r17,r6
 8002fdc:	0401ffc4 	movi	r16,2047
 8002fe0:	003dff06 	br	80027e0 <__alt_data_end+0xfc0027e0>
 8002fe4:	113ff804 	addi	r4,r2,-32
 8002fe8:	01c00804 	movi	r7,32
 8002fec:	2908d83a 	srl	r4,r5,r4
 8002ff0:	11c00a26 	beq	r2,r7,800301c <__subdf3+0x8c8>
 8002ff4:	01c01004 	movi	r7,64
 8002ff8:	3885c83a 	sub	r2,r7,r2
 8002ffc:	288a983a 	sll	r5,r5,r2
 8003000:	2c62b03a 	or	r17,r5,r17
 8003004:	8822c03a 	cmpne	r17,r17,zero
 8003008:	8922b03a 	or	r17,r17,r4
 800300c:	0005883a 	mov	r2,zero
 8003010:	003f9206 	br	8002e5c <__alt_data_end+0xfc002e5c>
 8003014:	000b883a 	mov	r5,zero
 8003018:	003fdc06 	br	8002f8c <__alt_data_end+0xfc002f8c>
 800301c:	000b883a 	mov	r5,zero
 8003020:	003ff706 	br	8003000 <__alt_data_end+0xfc003000>

08003024 <__fixdfsi>:
 8003024:	2806d53a 	srli	r3,r5,20
 8003028:	00800434 	movhi	r2,16
 800302c:	10bfffc4 	addi	r2,r2,-1
 8003030:	18c1ffcc 	andi	r3,r3,2047
 8003034:	0180ff84 	movi	r6,1022
 8003038:	2884703a 	and	r2,r5,r2
 800303c:	280ad7fa 	srli	r5,r5,31
 8003040:	30c0130e 	bge	r6,r3,8003090 <__fixdfsi+0x6c>
 8003044:	01810744 	movi	r6,1053
 8003048:	30c00d16 	blt	r6,r3,8003080 <__fixdfsi+0x5c>
 800304c:	01810cc4 	movi	r6,1075
 8003050:	30cdc83a 	sub	r6,r6,r3
 8003054:	01c007c4 	movi	r7,31
 8003058:	10800434 	orhi	r2,r2,16
 800305c:	39800e0e 	bge	r7,r6,8003098 <__fixdfsi+0x74>
 8003060:	010104c4 	movi	r4,1043
 8003064:	20c7c83a 	sub	r3,r4,r3
 8003068:	10c6d83a 	srl	r3,r2,r3
 800306c:	29403fcc 	andi	r5,r5,255
 8003070:	0145c83a 	sub	r2,zero,r5
 8003074:	1884f03a 	xor	r2,r3,r2
 8003078:	1145883a 	add	r2,r2,r5
 800307c:	f800283a 	ret
 8003080:	00a00034 	movhi	r2,32768
 8003084:	10bfffc4 	addi	r2,r2,-1
 8003088:	2885883a 	add	r2,r5,r2
 800308c:	f800283a 	ret
 8003090:	0005883a 	mov	r2,zero
 8003094:	f800283a 	ret
 8003098:	18fefb44 	addi	r3,r3,-1043
 800309c:	2188d83a 	srl	r4,r4,r6
 80030a0:	10c6983a 	sll	r3,r2,r3
 80030a4:	20c6b03a 	or	r3,r4,r3
 80030a8:	003ff006 	br	800306c <__alt_data_end+0xfc00306c>

080030ac <__floatsidf>:
 80030ac:	defffd04 	addi	sp,sp,-12
 80030b0:	dc400115 	stw	r17,4(sp)
 80030b4:	dfc00215 	stw	ra,8(sp)
 80030b8:	dc000015 	stw	r16,0(sp)
 80030bc:	2023883a 	mov	r17,r4
 80030c0:	20001426 	beq	r4,zero,8003114 <__floatsidf+0x68>
 80030c4:	2020d7fa 	srli	r16,r4,31
 80030c8:	80000126 	beq	r16,zero,80030d0 <__floatsidf+0x24>
 80030cc:	0123c83a 	sub	r17,zero,r4
 80030d0:	8809883a 	mov	r4,r17
 80030d4:	80032200 	call	8003220 <__clzsi2>
 80030d8:	01410784 	movi	r5,1054
 80030dc:	00c00284 	movi	r3,10
 80030e0:	288bc83a 	sub	r5,r5,r2
 80030e4:	18801c16 	blt	r3,r2,8003158 <__floatsidf+0xac>
 80030e8:	00c002c4 	movi	r3,11
 80030ec:	1887c83a 	sub	r3,r3,r2
 80030f0:	88c8d83a 	srl	r4,r17,r3
 80030f4:	00c00434 	movhi	r3,16
 80030f8:	18ffffc4 	addi	r3,r3,-1
 80030fc:	10800544 	addi	r2,r2,21
 8003100:	20c8703a 	and	r4,r4,r3
 8003104:	8884983a 	sll	r2,r17,r2
 8003108:	28c1ffcc 	andi	r3,r5,2047
 800310c:	800d883a 	mov	r6,r16
 8003110:	00000406 	br	8003124 <__floatsidf+0x78>
 8003114:	000d883a 	mov	r6,zero
 8003118:	0007883a 	mov	r3,zero
 800311c:	0009883a 	mov	r4,zero
 8003120:	0005883a 	mov	r2,zero
 8003124:	180a953a 	slli	r5,r3,20
 8003128:	31803fcc 	andi	r6,r6,255
 800312c:	00c00434 	movhi	r3,16
 8003130:	300c97fa 	slli	r6,r6,31
 8003134:	18ffffc4 	addi	r3,r3,-1
 8003138:	20c6703a 	and	r3,r4,r3
 800313c:	1946b03a 	or	r3,r3,r5
 8003140:	1986b03a 	or	r3,r3,r6
 8003144:	dfc00217 	ldw	ra,8(sp)
 8003148:	dc400117 	ldw	r17,4(sp)
 800314c:	dc000017 	ldw	r16,0(sp)
 8003150:	dec00304 	addi	sp,sp,12
 8003154:	f800283a 	ret
 8003158:	10fffd44 	addi	r3,r2,-11
 800315c:	88c8983a 	sll	r4,r17,r3
 8003160:	00800434 	movhi	r2,16
 8003164:	10bfffc4 	addi	r2,r2,-1
 8003168:	2088703a 	and	r4,r4,r2
 800316c:	28c1ffcc 	andi	r3,r5,2047
 8003170:	800d883a 	mov	r6,r16
 8003174:	0005883a 	mov	r2,zero
 8003178:	003fea06 	br	8003124 <__alt_data_end+0xfc003124>

0800317c <__floatunsidf>:
 800317c:	defffe04 	addi	sp,sp,-8
 8003180:	dc000015 	stw	r16,0(sp)
 8003184:	dfc00115 	stw	ra,4(sp)
 8003188:	2021883a 	mov	r16,r4
 800318c:	20001026 	beq	r4,zero,80031d0 <__floatunsidf+0x54>
 8003190:	80032200 	call	8003220 <__clzsi2>
 8003194:	01410784 	movi	r5,1054
 8003198:	100d883a 	mov	r6,r2
 800319c:	288bc83a 	sub	r5,r5,r2
 80031a0:	00800284 	movi	r2,10
 80031a4:	11801616 	blt	r2,r6,8003200 <__floatunsidf+0x84>
 80031a8:	008002c4 	movi	r2,11
 80031ac:	1185c83a 	sub	r2,r2,r6
 80031b0:	8084d83a 	srl	r2,r16,r2
 80031b4:	00c00434 	movhi	r3,16
 80031b8:	31c00544 	addi	r7,r6,21
 80031bc:	18ffffc4 	addi	r3,r3,-1
 80031c0:	81e0983a 	sll	r16,r16,r7
 80031c4:	10cc703a 	and	r6,r2,r3
 80031c8:	2941ffcc 	andi	r5,r5,2047
 80031cc:	00000206 	br	80031d8 <__floatunsidf+0x5c>
 80031d0:	000b883a 	mov	r5,zero
 80031d4:	000d883a 	mov	r6,zero
 80031d8:	280a953a 	slli	r5,r5,20
 80031dc:	00c00434 	movhi	r3,16
 80031e0:	18ffffc4 	addi	r3,r3,-1
 80031e4:	30c6703a 	and	r3,r6,r3
 80031e8:	8005883a 	mov	r2,r16
 80031ec:	1946b03a 	or	r3,r3,r5
 80031f0:	dfc00117 	ldw	ra,4(sp)
 80031f4:	dc000017 	ldw	r16,0(sp)
 80031f8:	dec00204 	addi	sp,sp,8
 80031fc:	f800283a 	ret
 8003200:	31bffd44 	addi	r6,r6,-11
 8003204:	818c983a 	sll	r6,r16,r6
 8003208:	00800434 	movhi	r2,16
 800320c:	10bfffc4 	addi	r2,r2,-1
 8003210:	2941ffcc 	andi	r5,r5,2047
 8003214:	0021883a 	mov	r16,zero
 8003218:	308c703a 	and	r6,r6,r2
 800321c:	003fee06 	br	80031d8 <__alt_data_end+0xfc0031d8>

08003220 <__clzsi2>:
 8003220:	00bfffd4 	movui	r2,65535
 8003224:	11000b36 	bltu	r2,r4,8003254 <__clzsi2+0x34>
 8003228:	00803fc4 	movi	r2,255
 800322c:	1100122e 	bgeu	r2,r4,8003278 <__clzsi2+0x58>
 8003230:	00c00204 	movi	r3,8
 8003234:	01400604 	movi	r5,24
 8003238:	20c8d83a 	srl	r4,r4,r3
 800323c:	00820034 	movhi	r2,2048
 8003240:	1095a604 	addi	r2,r2,22168
 8003244:	1109883a 	add	r4,r2,r4
 8003248:	20800003 	ldbu	r2,0(r4)
 800324c:	2885c83a 	sub	r2,r5,r2
 8003250:	f800283a 	ret
 8003254:	00804034 	movhi	r2,256
 8003258:	10bfffc4 	addi	r2,r2,-1
 800325c:	11000336 	bltu	r2,r4,800326c <__clzsi2+0x4c>
 8003260:	00c00404 	movi	r3,16
 8003264:	180b883a 	mov	r5,r3
 8003268:	003ff306 	br	8003238 <__alt_data_end+0xfc003238>
 800326c:	00c00604 	movi	r3,24
 8003270:	01400204 	movi	r5,8
 8003274:	003ff006 	br	8003238 <__alt_data_end+0xfc003238>
 8003278:	0007883a 	mov	r3,zero
 800327c:	01400804 	movi	r5,32
 8003280:	003fed06 	br	8003238 <__alt_data_end+0xfc003238>

08003284 <__mulsi3>:
 8003284:	0005883a 	mov	r2,zero
 8003288:	20000726 	beq	r4,zero,80032a8 <__mulsi3+0x24>
 800328c:	20c0004c 	andi	r3,r4,1
 8003290:	2008d07a 	srli	r4,r4,1
 8003294:	18000126 	beq	r3,zero,800329c <__mulsi3+0x18>
 8003298:	1145883a 	add	r2,r2,r5
 800329c:	294b883a 	add	r5,r5,r5
 80032a0:	203ffa1e 	bne	r4,zero,800328c <__alt_data_end+0xfc00328c>
 80032a4:	f800283a 	ret
 80032a8:	f800283a 	ret

080032ac <srand>:
 80032ac:	00820034 	movhi	r2,2048
 80032b0:	109b9804 	addi	r2,r2,28256
 80032b4:	10800017 	ldw	r2,0(r2)
 80032b8:	11002915 	stw	r4,164(r2)
 80032bc:	10002a15 	stw	zero,168(r2)
 80032c0:	f800283a 	ret

080032c4 <rand>:
 80032c4:	00820034 	movhi	r2,2048
 80032c8:	defffe04 	addi	sp,sp,-8
 80032cc:	109b9804 	addi	r2,r2,28256
 80032d0:	dc000015 	stw	r16,0(sp)
 80032d4:	14000017 	ldw	r16,0(r2)
 80032d8:	dfc00115 	stw	ra,4(sp)
 80032dc:	01932574 	movhi	r6,19605
 80032e0:	81002917 	ldw	r4,164(r16)
 80032e4:	81402a17 	ldw	r5,168(r16)
 80032e8:	01d614b4 	movhi	r7,22610
 80032ec:	319fcb44 	addi	r6,r6,32557
 80032f0:	39fd0b44 	addi	r7,r7,-3027
 80032f4:	80033280 	call	8003328 <__muldi3>
 80032f8:	11000044 	addi	r4,r2,1
 80032fc:	2085803a 	cmpltu	r2,r4,r2
 8003300:	10c7883a 	add	r3,r2,r3
 8003304:	00a00034 	movhi	r2,32768
 8003308:	10bfffc4 	addi	r2,r2,-1
 800330c:	1884703a 	and	r2,r3,r2
 8003310:	81002915 	stw	r4,164(r16)
 8003314:	80c02a15 	stw	r3,168(r16)
 8003318:	dfc00117 	ldw	ra,4(sp)
 800331c:	dc000017 	ldw	r16,0(sp)
 8003320:	dec00204 	addi	sp,sp,8
 8003324:	f800283a 	ret

08003328 <__muldi3>:
 8003328:	defff604 	addi	sp,sp,-40
 800332c:	dd800615 	stw	r22,24(sp)
 8003330:	dd400515 	stw	r21,20(sp)
 8003334:	25bfffcc 	andi	r22,r4,65535
 8003338:	357fffcc 	andi	r21,r6,65535
 800333c:	dc400115 	stw	r17,4(sp)
 8003340:	2022d43a 	srli	r17,r4,16
 8003344:	dcc00315 	stw	r19,12(sp)
 8003348:	dc800215 	stw	r18,8(sp)
 800334c:	2027883a 	mov	r19,r4
 8003350:	2825883a 	mov	r18,r5
 8003354:	a809883a 	mov	r4,r21
 8003358:	b00b883a 	mov	r5,r22
 800335c:	dfc00915 	stw	ra,36(sp)
 8003360:	df000815 	stw	fp,32(sp)
 8003364:	ddc00715 	stw	r23,28(sp)
 8003368:	3839883a 	mov	fp,r7
 800336c:	302ed43a 	srli	r23,r6,16
 8003370:	dd000415 	stw	r20,16(sp)
 8003374:	dc000015 	stw	r16,0(sp)
 8003378:	3029883a 	mov	r20,r6
 800337c:	80032840 	call	8003284 <__mulsi3>
 8003380:	a809883a 	mov	r4,r21
 8003384:	880b883a 	mov	r5,r17
 8003388:	1021883a 	mov	r16,r2
 800338c:	80032840 	call	8003284 <__mulsi3>
 8003390:	880b883a 	mov	r5,r17
 8003394:	b809883a 	mov	r4,r23
 8003398:	102b883a 	mov	r21,r2
 800339c:	80032840 	call	8003284 <__mulsi3>
 80033a0:	b809883a 	mov	r4,r23
 80033a4:	b00b883a 	mov	r5,r22
 80033a8:	1023883a 	mov	r17,r2
 80033ac:	80032840 	call	8003284 <__mulsi3>
 80033b0:	8012d43a 	srli	r9,r16,16
 80033b4:	a885883a 	add	r2,r21,r2
 80033b8:	1251883a 	add	r8,r2,r9
 80033bc:	4540022e 	bgeu	r8,r21,80033c8 <__muldi3+0xa0>
 80033c0:	00800074 	movhi	r2,1
 80033c4:	88a3883a 	add	r17,r17,r2
 80033c8:	4006d43a 	srli	r3,r8,16
 80033cc:	4010943a 	slli	r8,r8,16
 80033d0:	9809883a 	mov	r4,r19
 80033d4:	e00b883a 	mov	r5,fp
 80033d8:	843fffcc 	andi	r16,r16,65535
 80033dc:	88e3883a 	add	r17,r17,r3
 80033e0:	4421883a 	add	r16,r8,r16
 80033e4:	80032840 	call	8003284 <__mulsi3>
 80033e8:	a009883a 	mov	r4,r20
 80033ec:	900b883a 	mov	r5,r18
 80033f0:	1027883a 	mov	r19,r2
 80033f4:	80032840 	call	8003284 <__mulsi3>
 80033f8:	9885883a 	add	r2,r19,r2
 80033fc:	1447883a 	add	r3,r2,r17
 8003400:	8005883a 	mov	r2,r16
 8003404:	dfc00917 	ldw	ra,36(sp)
 8003408:	df000817 	ldw	fp,32(sp)
 800340c:	ddc00717 	ldw	r23,28(sp)
 8003410:	dd800617 	ldw	r22,24(sp)
 8003414:	dd400517 	ldw	r21,20(sp)
 8003418:	dd000417 	ldw	r20,16(sp)
 800341c:	dcc00317 	ldw	r19,12(sp)
 8003420:	dc800217 	ldw	r18,8(sp)
 8003424:	dc400117 	ldw	r17,4(sp)
 8003428:	dc000017 	ldw	r16,0(sp)
 800342c:	dec00a04 	addi	sp,sp,40
 8003430:	f800283a 	ret

08003434 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003434:	defffc04 	addi	sp,sp,-16
 8003438:	df000315 	stw	fp,12(sp)
 800343c:	df000304 	addi	fp,sp,12
 8003440:	e13ffd15 	stw	r4,-12(fp)
 8003444:	e17ffe15 	stw	r5,-8(fp)
 8003448:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800344c:	e0fffe17 	ldw	r3,-8(fp)
 8003450:	e0bffd17 	ldw	r2,-12(fp)
 8003454:	18800c26 	beq	r3,r2,8003488 <alt_load_section+0x54>
  {
    while( to != end )
 8003458:	00000806 	br	800347c <alt_load_section+0x48>
    {
      *to++ = *from++;
 800345c:	e0bffe17 	ldw	r2,-8(fp)
 8003460:	10c00104 	addi	r3,r2,4
 8003464:	e0fffe15 	stw	r3,-8(fp)
 8003468:	e0fffd17 	ldw	r3,-12(fp)
 800346c:	19000104 	addi	r4,r3,4
 8003470:	e13ffd15 	stw	r4,-12(fp)
 8003474:	18c00017 	ldw	r3,0(r3)
 8003478:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800347c:	e0fffe17 	ldw	r3,-8(fp)
 8003480:	e0bfff17 	ldw	r2,-4(fp)
 8003484:	18bff51e 	bne	r3,r2,800345c <__alt_data_end+0xfc00345c>
    {
      *to++ = *from++;
    }
  }
}
 8003488:	e037883a 	mov	sp,fp
 800348c:	df000017 	ldw	fp,0(sp)
 8003490:	dec00104 	addi	sp,sp,4
 8003494:	f800283a 	ret

08003498 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8003498:	defffe04 	addi	sp,sp,-8
 800349c:	dfc00115 	stw	ra,4(sp)
 80034a0:	df000015 	stw	fp,0(sp)
 80034a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80034a8:	01020034 	movhi	r4,2048
 80034ac:	211ba204 	addi	r4,r4,28296
 80034b0:	01420034 	movhi	r5,2048
 80034b4:	2955f404 	addi	r5,r5,22480
 80034b8:	01820034 	movhi	r6,2048
 80034bc:	319ba204 	addi	r6,r6,28296
 80034c0:	80034340 	call	8003434 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80034c4:	01020034 	movhi	r4,2048
 80034c8:	21000804 	addi	r4,r4,32
 80034cc:	01420034 	movhi	r5,2048
 80034d0:	29400804 	addi	r5,r5,32
 80034d4:	01820034 	movhi	r6,2048
 80034d8:	31808b04 	addi	r6,r6,556
 80034dc:	80034340 	call	8003434 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80034e0:	01020034 	movhi	r4,2048
 80034e4:	2115a604 	addi	r4,r4,22168
 80034e8:	01420034 	movhi	r5,2048
 80034ec:	2955a604 	addi	r5,r5,22168
 80034f0:	01820034 	movhi	r6,2048
 80034f4:	3195f404 	addi	r6,r6,22480
 80034f8:	80034340 	call	8003434 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80034fc:	80042f80 	call	80042f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003500:	80044ec0 	call	80044ec <alt_icache_flush_all>
}
 8003504:	e037883a 	mov	sp,fp
 8003508:	dfc00117 	ldw	ra,4(sp)
 800350c:	df000017 	ldw	fp,0(sp)
 8003510:	dec00204 	addi	sp,sp,8
 8003514:	f800283a 	ret

08003518 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8003518:	defffd04 	addi	sp,sp,-12
 800351c:	dfc00215 	stw	ra,8(sp)
 8003520:	df000115 	stw	fp,4(sp)
 8003524:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8003528:	0009883a 	mov	r4,zero
 800352c:	80035c80 	call	80035c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8003530:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8003534:	80035fc0 	call	80035fc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8003538:	01020034 	movhi	r4,2048
 800353c:	2115e704 	addi	r4,r4,22428
 8003540:	01420034 	movhi	r5,2048
 8003544:	2955e704 	addi	r5,r5,22428
 8003548:	01820034 	movhi	r6,2048
 800354c:	3195e704 	addi	r6,r6,22428
 8003550:	80048b80 	call	80048b8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8003554:	80044340 	call	8004434 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8003558:	01020034 	movhi	r4,2048
 800355c:	21112404 	addi	r4,r4,17552
 8003560:	80051240 	call	8005124 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8003564:	d125eb17 	ldw	r4,-26708(gp)
 8003568:	d0e5ec17 	ldw	r3,-26704(gp)
 800356c:	d0a5ed17 	ldw	r2,-26700(gp)
 8003570:	180b883a 	mov	r5,r3
 8003574:	100d883a 	mov	r6,r2
 8003578:	80006480 	call	8000648 <main>
 800357c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8003580:	01000044 	movi	r4,1
 8003584:	80042200 	call	8004220 <close>
  exit (result);
 8003588:	e13fff17 	ldw	r4,-4(fp)
 800358c:	80051380 	call	8005138 <exit>

08003590 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8003590:	defffd04 	addi	sp,sp,-12
 8003594:	dfc00215 	stw	ra,8(sp)
 8003598:	df000115 	stw	fp,4(sp)
 800359c:	df000104 	addi	fp,sp,4
 80035a0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80035a4:	e13fff17 	ldw	r4,-4(fp)
 80035a8:	01420034 	movhi	r5,2048
 80035ac:	295b9b04 	addi	r5,r5,28268
 80035b0:	80043900 	call	8004390 <alt_dev_llist_insert>
}
 80035b4:	e037883a 	mov	sp,fp
 80035b8:	dfc00117 	ldw	ra,4(sp)
 80035bc:	df000017 	ldw	fp,0(sp)
 80035c0:	dec00204 	addi	sp,sp,8
 80035c4:	f800283a 	ret

080035c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80035c8:	defffd04 	addi	sp,sp,-12
 80035cc:	dfc00215 	stw	ra,8(sp)
 80035d0:	df000115 	stw	fp,4(sp)
 80035d4:	df000104 	addi	fp,sp,4
 80035d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80035dc:	8004df00 	call	8004df0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80035e0:	00800044 	movi	r2,1
 80035e4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80035e8:	e037883a 	mov	sp,fp
 80035ec:	dfc00117 	ldw	ra,4(sp)
 80035f0:	df000017 	ldw	fp,0(sp)
 80035f4:	dec00204 	addi	sp,sp,8
 80035f8:	f800283a 	ret

080035fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80035fc:	defffe04 	addi	sp,sp,-8
 8003600:	dfc00115 	stw	ra,4(sp)
 8003604:	df000015 	stw	fp,0(sp)
 8003608:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800360c:	01020034 	movhi	r4,2048
 8003610:	21170704 	addi	r4,r4,23580
 8003614:	000b883a 	mov	r5,zero
 8003618:	01800144 	movi	r6,5
 800361c:	80037a80 	call	80037a8 <altera_avalon_jtag_uart_init>
 8003620:	01020034 	movhi	r4,2048
 8003624:	2116fd04 	addi	r4,r4,23540
 8003628:	80035900 	call	8003590 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800362c:	0001883a 	nop
}
 8003630:	e037883a 	mov	sp,fp
 8003634:	dfc00117 	ldw	ra,4(sp)
 8003638:	df000017 	ldw	fp,0(sp)
 800363c:	dec00204 	addi	sp,sp,8
 8003640:	f800283a 	ret

08003644 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8003644:	defffa04 	addi	sp,sp,-24
 8003648:	dfc00515 	stw	ra,20(sp)
 800364c:	df000415 	stw	fp,16(sp)
 8003650:	df000404 	addi	fp,sp,16
 8003654:	e13ffd15 	stw	r4,-12(fp)
 8003658:	e17ffe15 	stw	r5,-8(fp)
 800365c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003660:	e0bffd17 	ldw	r2,-12(fp)
 8003664:	10800017 	ldw	r2,0(r2)
 8003668:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800366c:	e0bffc17 	ldw	r2,-16(fp)
 8003670:	10c00a04 	addi	r3,r2,40
 8003674:	e0bffd17 	ldw	r2,-12(fp)
 8003678:	10800217 	ldw	r2,8(r2)
 800367c:	1809883a 	mov	r4,r3
 8003680:	e17ffe17 	ldw	r5,-8(fp)
 8003684:	e1bfff17 	ldw	r6,-4(fp)
 8003688:	100f883a 	mov	r7,r2
 800368c:	8003c6c0 	call	8003c6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003690:	e037883a 	mov	sp,fp
 8003694:	dfc00117 	ldw	ra,4(sp)
 8003698:	df000017 	ldw	fp,0(sp)
 800369c:	dec00204 	addi	sp,sp,8
 80036a0:	f800283a 	ret

080036a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80036a4:	defffa04 	addi	sp,sp,-24
 80036a8:	dfc00515 	stw	ra,20(sp)
 80036ac:	df000415 	stw	fp,16(sp)
 80036b0:	df000404 	addi	fp,sp,16
 80036b4:	e13ffd15 	stw	r4,-12(fp)
 80036b8:	e17ffe15 	stw	r5,-8(fp)
 80036bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80036c0:	e0bffd17 	ldw	r2,-12(fp)
 80036c4:	10800017 	ldw	r2,0(r2)
 80036c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80036cc:	e0bffc17 	ldw	r2,-16(fp)
 80036d0:	10c00a04 	addi	r3,r2,40
 80036d4:	e0bffd17 	ldw	r2,-12(fp)
 80036d8:	10800217 	ldw	r2,8(r2)
 80036dc:	1809883a 	mov	r4,r3
 80036e0:	e17ffe17 	ldw	r5,-8(fp)
 80036e4:	e1bfff17 	ldw	r6,-4(fp)
 80036e8:	100f883a 	mov	r7,r2
 80036ec:	8003e780 	call	8003e78 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80036f0:	e037883a 	mov	sp,fp
 80036f4:	dfc00117 	ldw	ra,4(sp)
 80036f8:	df000017 	ldw	fp,0(sp)
 80036fc:	dec00204 	addi	sp,sp,8
 8003700:	f800283a 	ret

08003704 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003704:	defffc04 	addi	sp,sp,-16
 8003708:	dfc00315 	stw	ra,12(sp)
 800370c:	df000215 	stw	fp,8(sp)
 8003710:	df000204 	addi	fp,sp,8
 8003714:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003718:	e0bfff17 	ldw	r2,-4(fp)
 800371c:	10800017 	ldw	r2,0(r2)
 8003720:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003724:	e0bffe17 	ldw	r2,-8(fp)
 8003728:	10c00a04 	addi	r3,r2,40
 800372c:	e0bfff17 	ldw	r2,-4(fp)
 8003730:	10800217 	ldw	r2,8(r2)
 8003734:	1809883a 	mov	r4,r3
 8003738:	100b883a 	mov	r5,r2
 800373c:	8003b180 	call	8003b18 <altera_avalon_jtag_uart_close>
}
 8003740:	e037883a 	mov	sp,fp
 8003744:	dfc00117 	ldw	ra,4(sp)
 8003748:	df000017 	ldw	fp,0(sp)
 800374c:	dec00204 	addi	sp,sp,8
 8003750:	f800283a 	ret

08003754 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003754:	defffa04 	addi	sp,sp,-24
 8003758:	dfc00515 	stw	ra,20(sp)
 800375c:	df000415 	stw	fp,16(sp)
 8003760:	df000404 	addi	fp,sp,16
 8003764:	e13ffd15 	stw	r4,-12(fp)
 8003768:	e17ffe15 	stw	r5,-8(fp)
 800376c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003770:	e0bffd17 	ldw	r2,-12(fp)
 8003774:	10800017 	ldw	r2,0(r2)
 8003778:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800377c:	e0bffc17 	ldw	r2,-16(fp)
 8003780:	10800a04 	addi	r2,r2,40
 8003784:	1009883a 	mov	r4,r2
 8003788:	e17ffe17 	ldw	r5,-8(fp)
 800378c:	e1bfff17 	ldw	r6,-4(fp)
 8003790:	8003b800 	call	8003b80 <altera_avalon_jtag_uart_ioctl>
}
 8003794:	e037883a 	mov	sp,fp
 8003798:	dfc00117 	ldw	ra,4(sp)
 800379c:	df000017 	ldw	fp,0(sp)
 80037a0:	dec00204 	addi	sp,sp,8
 80037a4:	f800283a 	ret

080037a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80037a8:	defffa04 	addi	sp,sp,-24
 80037ac:	dfc00515 	stw	ra,20(sp)
 80037b0:	df000415 	stw	fp,16(sp)
 80037b4:	df000404 	addi	fp,sp,16
 80037b8:	e13ffd15 	stw	r4,-12(fp)
 80037bc:	e17ffe15 	stw	r5,-8(fp)
 80037c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80037c4:	e0bffd17 	ldw	r2,-12(fp)
 80037c8:	00c00044 	movi	r3,1
 80037cc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80037d0:	e0bffd17 	ldw	r2,-12(fp)
 80037d4:	10800017 	ldw	r2,0(r2)
 80037d8:	10800104 	addi	r2,r2,4
 80037dc:	1007883a 	mov	r3,r2
 80037e0:	e0bffd17 	ldw	r2,-12(fp)
 80037e4:	10800817 	ldw	r2,32(r2)
 80037e8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80037ec:	e0fffe17 	ldw	r3,-8(fp)
 80037f0:	e0bfff17 	ldw	r2,-4(fp)
 80037f4:	d8000015 	stw	zero,0(sp)
 80037f8:	1809883a 	mov	r4,r3
 80037fc:	100b883a 	mov	r5,r2
 8003800:	01820034 	movhi	r6,2048
 8003804:	318e1b04 	addi	r6,r6,14444
 8003808:	e1fffd17 	ldw	r7,-12(fp)
 800380c:	80045080 	call	8004508 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003810:	e0bffd17 	ldw	r2,-12(fp)
 8003814:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003818:	e0bffd17 	ldw	r2,-12(fp)
 800381c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003820:	00820074 	movhi	r2,2049
 8003824:	10a16e04 	addi	r2,r2,-31304
 8003828:	10800017 	ldw	r2,0(r2)
 800382c:	1809883a 	mov	r4,r3
 8003830:	100b883a 	mov	r5,r2
 8003834:	01820034 	movhi	r6,2048
 8003838:	318e9c04 	addi	r6,r6,14960
 800383c:	e1fffd17 	ldw	r7,-12(fp)
 8003840:	80040900 	call	8004090 <alt_alarm_start>
 8003844:	1000040e 	bge	r2,zero,8003858 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003848:	e0fffd17 	ldw	r3,-12(fp)
 800384c:	00a00034 	movhi	r2,32768
 8003850:	10bfffc4 	addi	r2,r2,-1
 8003854:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003858:	e037883a 	mov	sp,fp
 800385c:	dfc00117 	ldw	ra,4(sp)
 8003860:	df000017 	ldw	fp,0(sp)
 8003864:	dec00204 	addi	sp,sp,8
 8003868:	f800283a 	ret

0800386c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800386c:	defff804 	addi	sp,sp,-32
 8003870:	df000715 	stw	fp,28(sp)
 8003874:	df000704 	addi	fp,sp,28
 8003878:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800387c:	e0bfff17 	ldw	r2,-4(fp)
 8003880:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8003884:	e0bffb17 	ldw	r2,-20(fp)
 8003888:	10800017 	ldw	r2,0(r2)
 800388c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003890:	e0bffc17 	ldw	r2,-16(fp)
 8003894:	10800104 	addi	r2,r2,4
 8003898:	10800037 	ldwio	r2,0(r2)
 800389c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80038a0:	e0bffd17 	ldw	r2,-12(fp)
 80038a4:	1080c00c 	andi	r2,r2,768
 80038a8:	1000011e 	bne	r2,zero,80038b0 <altera_avalon_jtag_uart_irq+0x44>
      break;
 80038ac:	00006c06 	br	8003a60 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80038b0:	e0bffd17 	ldw	r2,-12(fp)
 80038b4:	1080400c 	andi	r2,r2,256
 80038b8:	10003426 	beq	r2,zero,800398c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80038bc:	00800074 	movhi	r2,1
 80038c0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80038c4:	e0bffb17 	ldw	r2,-20(fp)
 80038c8:	10800a17 	ldw	r2,40(r2)
 80038cc:	10800044 	addi	r2,r2,1
 80038d0:	1081ffcc 	andi	r2,r2,2047
 80038d4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80038d8:	e0bffb17 	ldw	r2,-20(fp)
 80038dc:	10c00b17 	ldw	r3,44(r2)
 80038e0:	e0bffe17 	ldw	r2,-8(fp)
 80038e4:	1880011e 	bne	r3,r2,80038ec <altera_avalon_jtag_uart_irq+0x80>
          break;
 80038e8:	00001606 	br	8003944 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80038ec:	e0bffc17 	ldw	r2,-16(fp)
 80038f0:	10800037 	ldwio	r2,0(r2)
 80038f4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80038f8:	e0bff917 	ldw	r2,-28(fp)
 80038fc:	10a0000c 	andi	r2,r2,32768
 8003900:	1000011e 	bne	r2,zero,8003908 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8003904:	00000f06 	br	8003944 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003908:	e0bffb17 	ldw	r2,-20(fp)
 800390c:	10800a17 	ldw	r2,40(r2)
 8003910:	e0fff917 	ldw	r3,-28(fp)
 8003914:	1809883a 	mov	r4,r3
 8003918:	e0fffb17 	ldw	r3,-20(fp)
 800391c:	1885883a 	add	r2,r3,r2
 8003920:	10800e04 	addi	r2,r2,56
 8003924:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003928:	e0bffb17 	ldw	r2,-20(fp)
 800392c:	10800a17 	ldw	r2,40(r2)
 8003930:	10800044 	addi	r2,r2,1
 8003934:	10c1ffcc 	andi	r3,r2,2047
 8003938:	e0bffb17 	ldw	r2,-20(fp)
 800393c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003940:	003fe006 	br	80038c4 <__alt_data_end+0xfc0038c4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003944:	e0bff917 	ldw	r2,-28(fp)
 8003948:	10bfffec 	andhi	r2,r2,65535
 800394c:	10000f26 	beq	r2,zero,800398c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003950:	e0bffb17 	ldw	r2,-20(fp)
 8003954:	10c00817 	ldw	r3,32(r2)
 8003958:	00bfff84 	movi	r2,-2
 800395c:	1886703a 	and	r3,r3,r2
 8003960:	e0bffb17 	ldw	r2,-20(fp)
 8003964:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003968:	e0bffc17 	ldw	r2,-16(fp)
 800396c:	10800104 	addi	r2,r2,4
 8003970:	1007883a 	mov	r3,r2
 8003974:	e0bffb17 	ldw	r2,-20(fp)
 8003978:	10800817 	ldw	r2,32(r2)
 800397c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003980:	e0bffc17 	ldw	r2,-16(fp)
 8003984:	10800104 	addi	r2,r2,4
 8003988:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800398c:	e0bffd17 	ldw	r2,-12(fp)
 8003990:	1080800c 	andi	r2,r2,512
 8003994:	10003126 	beq	r2,zero,8003a5c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003998:	e0bffd17 	ldw	r2,-12(fp)
 800399c:	1004d43a 	srli	r2,r2,16
 80039a0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80039a4:	00001406 	br	80039f8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80039a8:	e0bffc17 	ldw	r2,-16(fp)
 80039ac:	e0fffb17 	ldw	r3,-20(fp)
 80039b0:	18c00d17 	ldw	r3,52(r3)
 80039b4:	e13ffb17 	ldw	r4,-20(fp)
 80039b8:	20c7883a 	add	r3,r4,r3
 80039bc:	18c20e04 	addi	r3,r3,2104
 80039c0:	18c00003 	ldbu	r3,0(r3)
 80039c4:	18c03fcc 	andi	r3,r3,255
 80039c8:	18c0201c 	xori	r3,r3,128
 80039cc:	18ffe004 	addi	r3,r3,-128
 80039d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80039d4:	e0bffb17 	ldw	r2,-20(fp)
 80039d8:	10800d17 	ldw	r2,52(r2)
 80039dc:	10800044 	addi	r2,r2,1
 80039e0:	10c1ffcc 	andi	r3,r2,2047
 80039e4:	e0bffb17 	ldw	r2,-20(fp)
 80039e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80039ec:	e0bffa17 	ldw	r2,-24(fp)
 80039f0:	10bfffc4 	addi	r2,r2,-1
 80039f4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80039f8:	e0bffa17 	ldw	r2,-24(fp)
 80039fc:	10000526 	beq	r2,zero,8003a14 <altera_avalon_jtag_uart_irq+0x1a8>
 8003a00:	e0bffb17 	ldw	r2,-20(fp)
 8003a04:	10c00d17 	ldw	r3,52(r2)
 8003a08:	e0bffb17 	ldw	r2,-20(fp)
 8003a0c:	10800c17 	ldw	r2,48(r2)
 8003a10:	18bfe51e 	bne	r3,r2,80039a8 <__alt_data_end+0xfc0039a8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003a14:	e0bffa17 	ldw	r2,-24(fp)
 8003a18:	10001026 	beq	r2,zero,8003a5c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003a1c:	e0bffb17 	ldw	r2,-20(fp)
 8003a20:	10c00817 	ldw	r3,32(r2)
 8003a24:	00bfff44 	movi	r2,-3
 8003a28:	1886703a 	and	r3,r3,r2
 8003a2c:	e0bffb17 	ldw	r2,-20(fp)
 8003a30:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003a34:	e0bffb17 	ldw	r2,-20(fp)
 8003a38:	10800017 	ldw	r2,0(r2)
 8003a3c:	10800104 	addi	r2,r2,4
 8003a40:	1007883a 	mov	r3,r2
 8003a44:	e0bffb17 	ldw	r2,-20(fp)
 8003a48:	10800817 	ldw	r2,32(r2)
 8003a4c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003a50:	e0bffc17 	ldw	r2,-16(fp)
 8003a54:	10800104 	addi	r2,r2,4
 8003a58:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003a5c:	003f8c06 	br	8003890 <__alt_data_end+0xfc003890>
}
 8003a60:	e037883a 	mov	sp,fp
 8003a64:	df000017 	ldw	fp,0(sp)
 8003a68:	dec00104 	addi	sp,sp,4
 8003a6c:	f800283a 	ret

08003a70 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003a70:	defff804 	addi	sp,sp,-32
 8003a74:	df000715 	stw	fp,28(sp)
 8003a78:	df000704 	addi	fp,sp,28
 8003a7c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003a80:	e0bffb17 	ldw	r2,-20(fp)
 8003a84:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003a88:	e0bff917 	ldw	r2,-28(fp)
 8003a8c:	10800017 	ldw	r2,0(r2)
 8003a90:	10800104 	addi	r2,r2,4
 8003a94:	10800037 	ldwio	r2,0(r2)
 8003a98:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003a9c:	e0bffa17 	ldw	r2,-24(fp)
 8003aa0:	1081000c 	andi	r2,r2,1024
 8003aa4:	10000b26 	beq	r2,zero,8003ad4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003aa8:	e0bff917 	ldw	r2,-28(fp)
 8003aac:	10800017 	ldw	r2,0(r2)
 8003ab0:	10800104 	addi	r2,r2,4
 8003ab4:	1007883a 	mov	r3,r2
 8003ab8:	e0bff917 	ldw	r2,-28(fp)
 8003abc:	10800817 	ldw	r2,32(r2)
 8003ac0:	10810014 	ori	r2,r2,1024
 8003ac4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8003ac8:	e0bff917 	ldw	r2,-28(fp)
 8003acc:	10000915 	stw	zero,36(r2)
 8003ad0:	00000a06 	br	8003afc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003ad4:	e0bff917 	ldw	r2,-28(fp)
 8003ad8:	10c00917 	ldw	r3,36(r2)
 8003adc:	00a00034 	movhi	r2,32768
 8003ae0:	10bfff04 	addi	r2,r2,-4
 8003ae4:	10c00536 	bltu	r2,r3,8003afc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8003ae8:	e0bff917 	ldw	r2,-28(fp)
 8003aec:	10800917 	ldw	r2,36(r2)
 8003af0:	10c00044 	addi	r3,r2,1
 8003af4:	e0bff917 	ldw	r2,-28(fp)
 8003af8:	10c00915 	stw	r3,36(r2)
 8003afc:	00820074 	movhi	r2,2049
 8003b00:	10a16e04 	addi	r2,r2,-31304
 8003b04:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8003b08:	e037883a 	mov	sp,fp
 8003b0c:	df000017 	ldw	fp,0(sp)
 8003b10:	dec00104 	addi	sp,sp,4
 8003b14:	f800283a 	ret

08003b18 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8003b18:	defffd04 	addi	sp,sp,-12
 8003b1c:	df000215 	stw	fp,8(sp)
 8003b20:	df000204 	addi	fp,sp,8
 8003b24:	e13ffe15 	stw	r4,-8(fp)
 8003b28:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003b2c:	00000506 	br	8003b44 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8003b30:	e0bfff17 	ldw	r2,-4(fp)
 8003b34:	1090000c 	andi	r2,r2,16384
 8003b38:	10000226 	beq	r2,zero,8003b44 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8003b3c:	00bffd44 	movi	r2,-11
 8003b40:	00000b06 	br	8003b70 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003b44:	e0bffe17 	ldw	r2,-8(fp)
 8003b48:	10c00d17 	ldw	r3,52(r2)
 8003b4c:	e0bffe17 	ldw	r2,-8(fp)
 8003b50:	10800c17 	ldw	r2,48(r2)
 8003b54:	18800526 	beq	r3,r2,8003b6c <altera_avalon_jtag_uart_close+0x54>
 8003b58:	e0bffe17 	ldw	r2,-8(fp)
 8003b5c:	10c00917 	ldw	r3,36(r2)
 8003b60:	e0bffe17 	ldw	r2,-8(fp)
 8003b64:	10800117 	ldw	r2,4(r2)
 8003b68:	18bff136 	bltu	r3,r2,8003b30 <__alt_data_end+0xfc003b30>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8003b6c:	0005883a 	mov	r2,zero
}
 8003b70:	e037883a 	mov	sp,fp
 8003b74:	df000017 	ldw	fp,0(sp)
 8003b78:	dec00104 	addi	sp,sp,4
 8003b7c:	f800283a 	ret

08003b80 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8003b80:	defffa04 	addi	sp,sp,-24
 8003b84:	df000515 	stw	fp,20(sp)
 8003b88:	df000504 	addi	fp,sp,20
 8003b8c:	e13ffd15 	stw	r4,-12(fp)
 8003b90:	e17ffe15 	stw	r5,-8(fp)
 8003b94:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8003b98:	00bff9c4 	movi	r2,-25
 8003b9c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8003ba0:	e0bffe17 	ldw	r2,-8(fp)
 8003ba4:	10da8060 	cmpeqi	r3,r2,27137
 8003ba8:	1800031e 	bne	r3,zero,8003bb8 <altera_avalon_jtag_uart_ioctl+0x38>
 8003bac:	109a80a0 	cmpeqi	r2,r2,27138
 8003bb0:	1000191e 	bne	r2,zero,8003c18 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8003bb4:	00002806 	br	8003c58 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8003bb8:	e0bffd17 	ldw	r2,-12(fp)
 8003bbc:	10c00117 	ldw	r3,4(r2)
 8003bc0:	00a00034 	movhi	r2,32768
 8003bc4:	10bfffc4 	addi	r2,r2,-1
 8003bc8:	18801226 	beq	r3,r2,8003c14 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8003bcc:	e0bfff17 	ldw	r2,-4(fp)
 8003bd0:	10800017 	ldw	r2,0(r2)
 8003bd4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8003bd8:	e0bffc17 	ldw	r2,-16(fp)
 8003bdc:	10800090 	cmplti	r2,r2,2
 8003be0:	1000061e 	bne	r2,zero,8003bfc <altera_avalon_jtag_uart_ioctl+0x7c>
 8003be4:	e0fffc17 	ldw	r3,-16(fp)
 8003be8:	00a00034 	movhi	r2,32768
 8003bec:	10bfffc4 	addi	r2,r2,-1
 8003bf0:	18800226 	beq	r3,r2,8003bfc <altera_avalon_jtag_uart_ioctl+0x7c>
 8003bf4:	e0bffc17 	ldw	r2,-16(fp)
 8003bf8:	00000206 	br	8003c04 <altera_avalon_jtag_uart_ioctl+0x84>
 8003bfc:	00a00034 	movhi	r2,32768
 8003c00:	10bfff84 	addi	r2,r2,-2
 8003c04:	e0fffd17 	ldw	r3,-12(fp)
 8003c08:	18800115 	stw	r2,4(r3)
      rc = 0;
 8003c0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003c10:	00001106 	br	8003c58 <altera_avalon_jtag_uart_ioctl+0xd8>
 8003c14:	00001006 	br	8003c58 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8003c18:	e0bffd17 	ldw	r2,-12(fp)
 8003c1c:	10c00117 	ldw	r3,4(r2)
 8003c20:	00a00034 	movhi	r2,32768
 8003c24:	10bfffc4 	addi	r2,r2,-1
 8003c28:	18800a26 	beq	r3,r2,8003c54 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8003c2c:	e0bffd17 	ldw	r2,-12(fp)
 8003c30:	10c00917 	ldw	r3,36(r2)
 8003c34:	e0bffd17 	ldw	r2,-12(fp)
 8003c38:	10800117 	ldw	r2,4(r2)
 8003c3c:	1885803a 	cmpltu	r2,r3,r2
 8003c40:	10c03fcc 	andi	r3,r2,255
 8003c44:	e0bfff17 	ldw	r2,-4(fp)
 8003c48:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8003c4c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003c50:	00000006 	br	8003c54 <altera_avalon_jtag_uart_ioctl+0xd4>
 8003c54:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8003c58:	e0bffb17 	ldw	r2,-20(fp)
}
 8003c5c:	e037883a 	mov	sp,fp
 8003c60:	df000017 	ldw	fp,0(sp)
 8003c64:	dec00104 	addi	sp,sp,4
 8003c68:	f800283a 	ret

08003c6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8003c6c:	defff304 	addi	sp,sp,-52
 8003c70:	dfc00c15 	stw	ra,48(sp)
 8003c74:	df000b15 	stw	fp,44(sp)
 8003c78:	df000b04 	addi	fp,sp,44
 8003c7c:	e13ffc15 	stw	r4,-16(fp)
 8003c80:	e17ffd15 	stw	r5,-12(fp)
 8003c84:	e1bffe15 	stw	r6,-8(fp)
 8003c88:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8003c8c:	e0bffd17 	ldw	r2,-12(fp)
 8003c90:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003c94:	00004906 	br	8003dbc <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8003c98:	e0bffc17 	ldw	r2,-16(fp)
 8003c9c:	10800a17 	ldw	r2,40(r2)
 8003ca0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8003ca4:	e0bffc17 	ldw	r2,-16(fp)
 8003ca8:	10800b17 	ldw	r2,44(r2)
 8003cac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8003cb0:	e0fff717 	ldw	r3,-36(fp)
 8003cb4:	e0bff817 	ldw	r2,-32(fp)
 8003cb8:	18800536 	bltu	r3,r2,8003cd0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8003cbc:	e0fff717 	ldw	r3,-36(fp)
 8003cc0:	e0bff817 	ldw	r2,-32(fp)
 8003cc4:	1885c83a 	sub	r2,r3,r2
 8003cc8:	e0bff615 	stw	r2,-40(fp)
 8003ccc:	00000406 	br	8003ce0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8003cd0:	00c20004 	movi	r3,2048
 8003cd4:	e0bff817 	ldw	r2,-32(fp)
 8003cd8:	1885c83a 	sub	r2,r3,r2
 8003cdc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8003ce0:	e0bff617 	ldw	r2,-40(fp)
 8003ce4:	1000011e 	bne	r2,zero,8003cec <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8003ce8:	00001d06 	br	8003d60 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8003cec:	e0fffe17 	ldw	r3,-8(fp)
 8003cf0:	e0bff617 	ldw	r2,-40(fp)
 8003cf4:	1880022e 	bgeu	r3,r2,8003d00 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8003cf8:	e0bffe17 	ldw	r2,-8(fp)
 8003cfc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8003d00:	e0bff817 	ldw	r2,-32(fp)
 8003d04:	10800e04 	addi	r2,r2,56
 8003d08:	e0fffc17 	ldw	r3,-16(fp)
 8003d0c:	1885883a 	add	r2,r3,r2
 8003d10:	e13ff517 	ldw	r4,-44(fp)
 8003d14:	100b883a 	mov	r5,r2
 8003d18:	e1bff617 	ldw	r6,-40(fp)
 8003d1c:	80051ec0 	call	80051ec <memcpy>
      ptr   += n;
 8003d20:	e0fff517 	ldw	r3,-44(fp)
 8003d24:	e0bff617 	ldw	r2,-40(fp)
 8003d28:	1885883a 	add	r2,r3,r2
 8003d2c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8003d30:	e0fffe17 	ldw	r3,-8(fp)
 8003d34:	e0bff617 	ldw	r2,-40(fp)
 8003d38:	1885c83a 	sub	r2,r3,r2
 8003d3c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003d40:	e0fff817 	ldw	r3,-32(fp)
 8003d44:	e0bff617 	ldw	r2,-40(fp)
 8003d48:	1885883a 	add	r2,r3,r2
 8003d4c:	10c1ffcc 	andi	r3,r2,2047
 8003d50:	e0bffc17 	ldw	r2,-16(fp)
 8003d54:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8003d58:	e0bffe17 	ldw	r2,-8(fp)
 8003d5c:	00bfce16 	blt	zero,r2,8003c98 <__alt_data_end+0xfc003c98>

    /* If we read any data then return it */
    if (ptr != buffer)
 8003d60:	e0fff517 	ldw	r3,-44(fp)
 8003d64:	e0bffd17 	ldw	r2,-12(fp)
 8003d68:	18800126 	beq	r3,r2,8003d70 <altera_avalon_jtag_uart_read+0x104>
      break;
 8003d6c:	00001506 	br	8003dc4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8003d70:	e0bfff17 	ldw	r2,-4(fp)
 8003d74:	1090000c 	andi	r2,r2,16384
 8003d78:	10000126 	beq	r2,zero,8003d80 <altera_avalon_jtag_uart_read+0x114>
      break;
 8003d7c:	00001106 	br	8003dc4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8003d80:	0001883a 	nop
 8003d84:	e0bffc17 	ldw	r2,-16(fp)
 8003d88:	10c00a17 	ldw	r3,40(r2)
 8003d8c:	e0bff717 	ldw	r2,-36(fp)
 8003d90:	1880051e 	bne	r3,r2,8003da8 <altera_avalon_jtag_uart_read+0x13c>
 8003d94:	e0bffc17 	ldw	r2,-16(fp)
 8003d98:	10c00917 	ldw	r3,36(r2)
 8003d9c:	e0bffc17 	ldw	r2,-16(fp)
 8003da0:	10800117 	ldw	r2,4(r2)
 8003da4:	18bff736 	bltu	r3,r2,8003d84 <__alt_data_end+0xfc003d84>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8003da8:	e0bffc17 	ldw	r2,-16(fp)
 8003dac:	10c00a17 	ldw	r3,40(r2)
 8003db0:	e0bff717 	ldw	r2,-36(fp)
 8003db4:	1880011e 	bne	r3,r2,8003dbc <altera_avalon_jtag_uart_read+0x150>
      break;
 8003db8:	00000206 	br	8003dc4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003dbc:	e0bffe17 	ldw	r2,-8(fp)
 8003dc0:	00bfb516 	blt	zero,r2,8003c98 <__alt_data_end+0xfc003c98>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8003dc4:	e0fff517 	ldw	r3,-44(fp)
 8003dc8:	e0bffd17 	ldw	r2,-12(fp)
 8003dcc:	18801826 	beq	r3,r2,8003e30 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003dd0:	0005303a 	rdctl	r2,status
 8003dd4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003dd8:	e0fffa17 	ldw	r3,-24(fp)
 8003ddc:	00bfff84 	movi	r2,-2
 8003de0:	1884703a 	and	r2,r3,r2
 8003de4:	1001703a 	wrctl	status,r2
  
  return context;
 8003de8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8003dec:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003df0:	e0bffc17 	ldw	r2,-16(fp)
 8003df4:	10800817 	ldw	r2,32(r2)
 8003df8:	10c00054 	ori	r3,r2,1
 8003dfc:	e0bffc17 	ldw	r2,-16(fp)
 8003e00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003e04:	e0bffc17 	ldw	r2,-16(fp)
 8003e08:	10800017 	ldw	r2,0(r2)
 8003e0c:	10800104 	addi	r2,r2,4
 8003e10:	1007883a 	mov	r3,r2
 8003e14:	e0bffc17 	ldw	r2,-16(fp)
 8003e18:	10800817 	ldw	r2,32(r2)
 8003e1c:	18800035 	stwio	r2,0(r3)
 8003e20:	e0bff917 	ldw	r2,-28(fp)
 8003e24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003e28:	e0bffb17 	ldw	r2,-20(fp)
 8003e2c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8003e30:	e0fff517 	ldw	r3,-44(fp)
 8003e34:	e0bffd17 	ldw	r2,-12(fp)
 8003e38:	18800426 	beq	r3,r2,8003e4c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8003e3c:	e0fff517 	ldw	r3,-44(fp)
 8003e40:	e0bffd17 	ldw	r2,-12(fp)
 8003e44:	1885c83a 	sub	r2,r3,r2
 8003e48:	00000606 	br	8003e64 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8003e4c:	e0bfff17 	ldw	r2,-4(fp)
 8003e50:	1090000c 	andi	r2,r2,16384
 8003e54:	10000226 	beq	r2,zero,8003e60 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8003e58:	00bffd44 	movi	r2,-11
 8003e5c:	00000106 	br	8003e64 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8003e60:	00bffec4 	movi	r2,-5
}
 8003e64:	e037883a 	mov	sp,fp
 8003e68:	dfc00117 	ldw	ra,4(sp)
 8003e6c:	df000017 	ldw	fp,0(sp)
 8003e70:	dec00204 	addi	sp,sp,8
 8003e74:	f800283a 	ret

08003e78 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8003e78:	defff304 	addi	sp,sp,-52
 8003e7c:	dfc00c15 	stw	ra,48(sp)
 8003e80:	df000b15 	stw	fp,44(sp)
 8003e84:	df000b04 	addi	fp,sp,44
 8003e88:	e13ffc15 	stw	r4,-16(fp)
 8003e8c:	e17ffd15 	stw	r5,-12(fp)
 8003e90:	e1bffe15 	stw	r6,-8(fp)
 8003e94:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8003e98:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8003e9c:	e0bffd17 	ldw	r2,-12(fp)
 8003ea0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8003ea4:	00003806 	br	8003f88 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8003ea8:	e0bffc17 	ldw	r2,-16(fp)
 8003eac:	10800c17 	ldw	r2,48(r2)
 8003eb0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8003eb4:	e0bffc17 	ldw	r2,-16(fp)
 8003eb8:	10800d17 	ldw	r2,52(r2)
 8003ebc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8003ec0:	e0fff817 	ldw	r3,-32(fp)
 8003ec4:	e0bff517 	ldw	r2,-44(fp)
 8003ec8:	1880062e 	bgeu	r3,r2,8003ee4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8003ecc:	e0fff517 	ldw	r3,-44(fp)
 8003ed0:	e0bff817 	ldw	r2,-32(fp)
 8003ed4:	1885c83a 	sub	r2,r3,r2
 8003ed8:	10bfffc4 	addi	r2,r2,-1
 8003edc:	e0bff615 	stw	r2,-40(fp)
 8003ee0:	00000b06 	br	8003f10 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8003ee4:	e0bff517 	ldw	r2,-44(fp)
 8003ee8:	10000526 	beq	r2,zero,8003f00 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8003eec:	00c20004 	movi	r3,2048
 8003ef0:	e0bff817 	ldw	r2,-32(fp)
 8003ef4:	1885c83a 	sub	r2,r3,r2
 8003ef8:	e0bff615 	stw	r2,-40(fp)
 8003efc:	00000406 	br	8003f10 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8003f00:	00c1ffc4 	movi	r3,2047
 8003f04:	e0bff817 	ldw	r2,-32(fp)
 8003f08:	1885c83a 	sub	r2,r3,r2
 8003f0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8003f10:	e0bff617 	ldw	r2,-40(fp)
 8003f14:	1000011e 	bne	r2,zero,8003f1c <altera_avalon_jtag_uart_write+0xa4>
        break;
 8003f18:	00001d06 	br	8003f90 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8003f1c:	e0fffe17 	ldw	r3,-8(fp)
 8003f20:	e0bff617 	ldw	r2,-40(fp)
 8003f24:	1880022e 	bgeu	r3,r2,8003f30 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8003f28:	e0bffe17 	ldw	r2,-8(fp)
 8003f2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8003f30:	e0bff817 	ldw	r2,-32(fp)
 8003f34:	10820e04 	addi	r2,r2,2104
 8003f38:	e0fffc17 	ldw	r3,-16(fp)
 8003f3c:	1885883a 	add	r2,r3,r2
 8003f40:	1009883a 	mov	r4,r2
 8003f44:	e17ffd17 	ldw	r5,-12(fp)
 8003f48:	e1bff617 	ldw	r6,-40(fp)
 8003f4c:	80051ec0 	call	80051ec <memcpy>
      ptr   += n;
 8003f50:	e0fffd17 	ldw	r3,-12(fp)
 8003f54:	e0bff617 	ldw	r2,-40(fp)
 8003f58:	1885883a 	add	r2,r3,r2
 8003f5c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8003f60:	e0fffe17 	ldw	r3,-8(fp)
 8003f64:	e0bff617 	ldw	r2,-40(fp)
 8003f68:	1885c83a 	sub	r2,r3,r2
 8003f6c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003f70:	e0fff817 	ldw	r3,-32(fp)
 8003f74:	e0bff617 	ldw	r2,-40(fp)
 8003f78:	1885883a 	add	r2,r3,r2
 8003f7c:	10c1ffcc 	andi	r3,r2,2047
 8003f80:	e0bffc17 	ldw	r2,-16(fp)
 8003f84:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8003f88:	e0bffe17 	ldw	r2,-8(fp)
 8003f8c:	00bfc616 	blt	zero,r2,8003ea8 <__alt_data_end+0xfc003ea8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8003f90:	0005303a 	rdctl	r2,status
 8003f94:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003f98:	e0fffa17 	ldw	r3,-24(fp)
 8003f9c:	00bfff84 	movi	r2,-2
 8003fa0:	1884703a 	and	r2,r3,r2
 8003fa4:	1001703a 	wrctl	status,r2
  
  return context;
 8003fa8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8003fac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003fb0:	e0bffc17 	ldw	r2,-16(fp)
 8003fb4:	10800817 	ldw	r2,32(r2)
 8003fb8:	10c00094 	ori	r3,r2,2
 8003fbc:	e0bffc17 	ldw	r2,-16(fp)
 8003fc0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003fc4:	e0bffc17 	ldw	r2,-16(fp)
 8003fc8:	10800017 	ldw	r2,0(r2)
 8003fcc:	10800104 	addi	r2,r2,4
 8003fd0:	1007883a 	mov	r3,r2
 8003fd4:	e0bffc17 	ldw	r2,-16(fp)
 8003fd8:	10800817 	ldw	r2,32(r2)
 8003fdc:	18800035 	stwio	r2,0(r3)
 8003fe0:	e0bff917 	ldw	r2,-28(fp)
 8003fe4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003fe8:	e0bffb17 	ldw	r2,-20(fp)
 8003fec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8003ff0:	e0bffe17 	ldw	r2,-8(fp)
 8003ff4:	0080120e 	bge	zero,r2,8004040 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8003ff8:	e0bfff17 	ldw	r2,-4(fp)
 8003ffc:	1090000c 	andi	r2,r2,16384
 8004000:	10000126 	beq	r2,zero,8004008 <altera_avalon_jtag_uart_write+0x190>
        break;
 8004004:	00001006 	br	8004048 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8004008:	0001883a 	nop
 800400c:	e0bffc17 	ldw	r2,-16(fp)
 8004010:	10c00d17 	ldw	r3,52(r2)
 8004014:	e0bff517 	ldw	r2,-44(fp)
 8004018:	1880051e 	bne	r3,r2,8004030 <altera_avalon_jtag_uart_write+0x1b8>
 800401c:	e0bffc17 	ldw	r2,-16(fp)
 8004020:	10c00917 	ldw	r3,36(r2)
 8004024:	e0bffc17 	ldw	r2,-16(fp)
 8004028:	10800117 	ldw	r2,4(r2)
 800402c:	18bff736 	bltu	r3,r2,800400c <__alt_data_end+0xfc00400c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8004030:	e0bffc17 	ldw	r2,-16(fp)
 8004034:	10800917 	ldw	r2,36(r2)
 8004038:	10000126 	beq	r2,zero,8004040 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800403c:	00000206 	br	8004048 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8004040:	e0bffe17 	ldw	r2,-8(fp)
 8004044:	00bf9716 	blt	zero,r2,8003ea4 <__alt_data_end+0xfc003ea4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8004048:	e0fffd17 	ldw	r3,-12(fp)
 800404c:	e0bff717 	ldw	r2,-36(fp)
 8004050:	18800426 	beq	r3,r2,8004064 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8004054:	e0fffd17 	ldw	r3,-12(fp)
 8004058:	e0bff717 	ldw	r2,-36(fp)
 800405c:	1885c83a 	sub	r2,r3,r2
 8004060:	00000606 	br	800407c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8004064:	e0bfff17 	ldw	r2,-4(fp)
 8004068:	1090000c 	andi	r2,r2,16384
 800406c:	10000226 	beq	r2,zero,8004078 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8004070:	00bffd44 	movi	r2,-11
 8004074:	00000106 	br	800407c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8004078:	00bffec4 	movi	r2,-5
}
 800407c:	e037883a 	mov	sp,fp
 8004080:	dfc00117 	ldw	ra,4(sp)
 8004084:	df000017 	ldw	fp,0(sp)
 8004088:	dec00204 	addi	sp,sp,8
 800408c:	f800283a 	ret

08004090 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8004090:	defff504 	addi	sp,sp,-44
 8004094:	df000a15 	stw	fp,40(sp)
 8004098:	df000a04 	addi	fp,sp,40
 800409c:	e13ffc15 	stw	r4,-16(fp)
 80040a0:	e17ffd15 	stw	r5,-12(fp)
 80040a4:	e1bffe15 	stw	r6,-8(fp)
 80040a8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80040ac:	e03ff615 	stw	zero,-40(fp)
 80040b0:	00820074 	movhi	r2,2049
 80040b4:	10a16e04 	addi	r2,r2,-31304
 80040b8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80040bc:	10003f26 	beq	r2,zero,80041bc <alt_alarm_start+0x12c>
  {
    if (alarm)
 80040c0:	e0bffc17 	ldw	r2,-16(fp)
 80040c4:	10003b26 	beq	r2,zero,80041b4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80040c8:	e0bffc17 	ldw	r2,-16(fp)
 80040cc:	e0fffe17 	ldw	r3,-8(fp)
 80040d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80040d4:	e0bffc17 	ldw	r2,-16(fp)
 80040d8:	e0ffff17 	ldw	r3,-4(fp)
 80040dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80040e0:	0005303a 	rdctl	r2,status
 80040e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80040e8:	e0fff817 	ldw	r3,-32(fp)
 80040ec:	00bfff84 	movi	r2,-2
 80040f0:	1884703a 	and	r2,r3,r2
 80040f4:	1001703a 	wrctl	status,r2
  
  return context;
 80040f8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80040fc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004100:	00820074 	movhi	r2,2049
 8004104:	10a16f04 	addi	r2,r2,-31300
 8004108:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800410c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8004110:	e0fffd17 	ldw	r3,-12(fp)
 8004114:	e0bff617 	ldw	r2,-40(fp)
 8004118:	1885883a 	add	r2,r3,r2
 800411c:	10c00044 	addi	r3,r2,1
 8004120:	e0bffc17 	ldw	r2,-16(fp)
 8004124:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8004128:	e0bffc17 	ldw	r2,-16(fp)
 800412c:	10c00217 	ldw	r3,8(r2)
 8004130:	e0bff617 	ldw	r2,-40(fp)
 8004134:	1880042e 	bgeu	r3,r2,8004148 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8004138:	e0bffc17 	ldw	r2,-16(fp)
 800413c:	00c00044 	movi	r3,1
 8004140:	10c00405 	stb	r3,16(r2)
 8004144:	00000206 	br	8004150 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8004148:	e0bffc17 	ldw	r2,-16(fp)
 800414c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8004150:	e0fffc17 	ldw	r3,-16(fp)
 8004154:	00820034 	movhi	r2,2048
 8004158:	109ba004 	addi	r2,r2,28288
 800415c:	e0bff915 	stw	r2,-28(fp)
 8004160:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004164:	e0bffa17 	ldw	r2,-24(fp)
 8004168:	e0fff917 	ldw	r3,-28(fp)
 800416c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8004170:	e0bff917 	ldw	r2,-28(fp)
 8004174:	10c00017 	ldw	r3,0(r2)
 8004178:	e0bffa17 	ldw	r2,-24(fp)
 800417c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004180:	e0bff917 	ldw	r2,-28(fp)
 8004184:	10800017 	ldw	r2,0(r2)
 8004188:	e0fffa17 	ldw	r3,-24(fp)
 800418c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004190:	e0bff917 	ldw	r2,-28(fp)
 8004194:	e0fffa17 	ldw	r3,-24(fp)
 8004198:	10c00015 	stw	r3,0(r2)
 800419c:	e0bff717 	ldw	r2,-36(fp)
 80041a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80041a4:	e0bffb17 	ldw	r2,-20(fp)
 80041a8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80041ac:	0005883a 	mov	r2,zero
 80041b0:	00000306 	br	80041c0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 80041b4:	00bffa84 	movi	r2,-22
 80041b8:	00000106 	br	80041c0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 80041bc:	00bfde84 	movi	r2,-134
  }
}
 80041c0:	e037883a 	mov	sp,fp
 80041c4:	df000017 	ldw	fp,0(sp)
 80041c8:	dec00104 	addi	sp,sp,4
 80041cc:	f800283a 	ret

080041d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80041d0:	defffe04 	addi	sp,sp,-8
 80041d4:	dfc00115 	stw	ra,4(sp)
 80041d8:	df000015 	stw	fp,0(sp)
 80041dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80041e0:	00820034 	movhi	r2,2048
 80041e4:	109b9e04 	addi	r2,r2,28280
 80041e8:	10800017 	ldw	r2,0(r2)
 80041ec:	10000526 	beq	r2,zero,8004204 <alt_get_errno+0x34>
 80041f0:	00820034 	movhi	r2,2048
 80041f4:	109b9e04 	addi	r2,r2,28280
 80041f8:	10800017 	ldw	r2,0(r2)
 80041fc:	103ee83a 	callr	r2
 8004200:	00000206 	br	800420c <alt_get_errno+0x3c>
 8004204:	00820074 	movhi	r2,2049
 8004208:	10a17104 	addi	r2,r2,-31292
}
 800420c:	e037883a 	mov	sp,fp
 8004210:	dfc00117 	ldw	ra,4(sp)
 8004214:	df000017 	ldw	fp,0(sp)
 8004218:	dec00204 	addi	sp,sp,8
 800421c:	f800283a 	ret

08004220 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8004220:	defffb04 	addi	sp,sp,-20
 8004224:	dfc00415 	stw	ra,16(sp)
 8004228:	df000315 	stw	fp,12(sp)
 800422c:	df000304 	addi	fp,sp,12
 8004230:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8004234:	e0bfff17 	ldw	r2,-4(fp)
 8004238:	10000816 	blt	r2,zero,800425c <close+0x3c>
 800423c:	e13fff17 	ldw	r4,-4(fp)
 8004240:	01400304 	movi	r5,12
 8004244:	80032840 	call	8003284 <__mulsi3>
 8004248:	1007883a 	mov	r3,r2
 800424c:	00820034 	movhi	r2,2048
 8004250:	109b1f04 	addi	r2,r2,27772
 8004254:	1885883a 	add	r2,r3,r2
 8004258:	00000106 	br	8004260 <close+0x40>
 800425c:	0005883a 	mov	r2,zero
 8004260:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8004264:	e0bffd17 	ldw	r2,-12(fp)
 8004268:	10001926 	beq	r2,zero,80042d0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800426c:	e0bffd17 	ldw	r2,-12(fp)
 8004270:	10800017 	ldw	r2,0(r2)
 8004274:	10800417 	ldw	r2,16(r2)
 8004278:	10000626 	beq	r2,zero,8004294 <close+0x74>
 800427c:	e0bffd17 	ldw	r2,-12(fp)
 8004280:	10800017 	ldw	r2,0(r2)
 8004284:	10800417 	ldw	r2,16(r2)
 8004288:	e13ffd17 	ldw	r4,-12(fp)
 800428c:	103ee83a 	callr	r2
 8004290:	00000106 	br	8004298 <close+0x78>
 8004294:	0005883a 	mov	r2,zero
 8004298:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800429c:	e13fff17 	ldw	r4,-4(fp)
 80042a0:	8004bd40 	call	8004bd4 <alt_release_fd>
    if (rval < 0)
 80042a4:	e0bffe17 	ldw	r2,-8(fp)
 80042a8:	1000070e 	bge	r2,zero,80042c8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 80042ac:	80041d00 	call	80041d0 <alt_get_errno>
 80042b0:	1007883a 	mov	r3,r2
 80042b4:	e0bffe17 	ldw	r2,-8(fp)
 80042b8:	0085c83a 	sub	r2,zero,r2
 80042bc:	18800015 	stw	r2,0(r3)
      return -1;
 80042c0:	00bfffc4 	movi	r2,-1
 80042c4:	00000706 	br	80042e4 <close+0xc4>
    }
    return 0;
 80042c8:	0005883a 	mov	r2,zero
 80042cc:	00000506 	br	80042e4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80042d0:	80041d00 	call	80041d0 <alt_get_errno>
 80042d4:	1007883a 	mov	r3,r2
 80042d8:	00801444 	movi	r2,81
 80042dc:	18800015 	stw	r2,0(r3)
    return -1;
 80042e0:	00bfffc4 	movi	r2,-1
  }
}
 80042e4:	e037883a 	mov	sp,fp
 80042e8:	dfc00117 	ldw	ra,4(sp)
 80042ec:	df000017 	ldw	fp,0(sp)
 80042f0:	dec00204 	addi	sp,sp,8
 80042f4:	f800283a 	ret

080042f8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80042f8:	deffff04 	addi	sp,sp,-4
 80042fc:	df000015 	stw	fp,0(sp)
 8004300:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004304:	e037883a 	mov	sp,fp
 8004308:	df000017 	ldw	fp,0(sp)
 800430c:	dec00104 	addi	sp,sp,4
 8004310:	f800283a 	ret

08004314 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8004314:	defffc04 	addi	sp,sp,-16
 8004318:	df000315 	stw	fp,12(sp)
 800431c:	df000304 	addi	fp,sp,12
 8004320:	e13ffd15 	stw	r4,-12(fp)
 8004324:	e17ffe15 	stw	r5,-8(fp)
 8004328:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800432c:	e0bfff17 	ldw	r2,-4(fp)
}
 8004330:	e037883a 	mov	sp,fp
 8004334:	df000017 	ldw	fp,0(sp)
 8004338:	dec00104 	addi	sp,sp,4
 800433c:	f800283a 	ret

08004340 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004340:	defffe04 	addi	sp,sp,-8
 8004344:	dfc00115 	stw	ra,4(sp)
 8004348:	df000015 	stw	fp,0(sp)
 800434c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004350:	00820034 	movhi	r2,2048
 8004354:	109b9e04 	addi	r2,r2,28280
 8004358:	10800017 	ldw	r2,0(r2)
 800435c:	10000526 	beq	r2,zero,8004374 <alt_get_errno+0x34>
 8004360:	00820034 	movhi	r2,2048
 8004364:	109b9e04 	addi	r2,r2,28280
 8004368:	10800017 	ldw	r2,0(r2)
 800436c:	103ee83a 	callr	r2
 8004370:	00000206 	br	800437c <alt_get_errno+0x3c>
 8004374:	00820074 	movhi	r2,2049
 8004378:	10a17104 	addi	r2,r2,-31292
}
 800437c:	e037883a 	mov	sp,fp
 8004380:	dfc00117 	ldw	ra,4(sp)
 8004384:	df000017 	ldw	fp,0(sp)
 8004388:	dec00204 	addi	sp,sp,8
 800438c:	f800283a 	ret

08004390 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8004390:	defffa04 	addi	sp,sp,-24
 8004394:	dfc00515 	stw	ra,20(sp)
 8004398:	df000415 	stw	fp,16(sp)
 800439c:	df000404 	addi	fp,sp,16
 80043a0:	e13ffe15 	stw	r4,-8(fp)
 80043a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80043a8:	e0bffe17 	ldw	r2,-8(fp)
 80043ac:	10000326 	beq	r2,zero,80043bc <alt_dev_llist_insert+0x2c>
 80043b0:	e0bffe17 	ldw	r2,-8(fp)
 80043b4:	10800217 	ldw	r2,8(r2)
 80043b8:	1000061e 	bne	r2,zero,80043d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80043bc:	80043400 	call	8004340 <alt_get_errno>
 80043c0:	1007883a 	mov	r3,r2
 80043c4:	00800584 	movi	r2,22
 80043c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80043cc:	00bffa84 	movi	r2,-22
 80043d0:	00001306 	br	8004420 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80043d4:	e0bffe17 	ldw	r2,-8(fp)
 80043d8:	e0ffff17 	ldw	r3,-4(fp)
 80043dc:	e0fffc15 	stw	r3,-16(fp)
 80043e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80043e4:	e0bffd17 	ldw	r2,-12(fp)
 80043e8:	e0fffc17 	ldw	r3,-16(fp)
 80043ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80043f0:	e0bffc17 	ldw	r2,-16(fp)
 80043f4:	10c00017 	ldw	r3,0(r2)
 80043f8:	e0bffd17 	ldw	r2,-12(fp)
 80043fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004400:	e0bffc17 	ldw	r2,-16(fp)
 8004404:	10800017 	ldw	r2,0(r2)
 8004408:	e0fffd17 	ldw	r3,-12(fp)
 800440c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004410:	e0bffc17 	ldw	r2,-16(fp)
 8004414:	e0fffd17 	ldw	r3,-12(fp)
 8004418:	10c00015 	stw	r3,0(r2)

  return 0;  
 800441c:	0005883a 	mov	r2,zero
}
 8004420:	e037883a 	mov	sp,fp
 8004424:	dfc00117 	ldw	ra,4(sp)
 8004428:	df000017 	ldw	fp,0(sp)
 800442c:	dec00204 	addi	sp,sp,8
 8004430:	f800283a 	ret

08004434 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8004434:	defffd04 	addi	sp,sp,-12
 8004438:	dfc00215 	stw	ra,8(sp)
 800443c:	df000115 	stw	fp,4(sp)
 8004440:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004444:	00820034 	movhi	r2,2048
 8004448:	1095a504 	addi	r2,r2,22164
 800444c:	e0bfff15 	stw	r2,-4(fp)
 8004450:	00000606 	br	800446c <_do_ctors+0x38>
        (*ctor) (); 
 8004454:	e0bfff17 	ldw	r2,-4(fp)
 8004458:	10800017 	ldw	r2,0(r2)
 800445c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004460:	e0bfff17 	ldw	r2,-4(fp)
 8004464:	10bfff04 	addi	r2,r2,-4
 8004468:	e0bfff15 	stw	r2,-4(fp)
 800446c:	e0ffff17 	ldw	r3,-4(fp)
 8004470:	00820034 	movhi	r2,2048
 8004474:	1095a604 	addi	r2,r2,22168
 8004478:	18bff62e 	bgeu	r3,r2,8004454 <__alt_data_end+0xfc004454>
        (*ctor) (); 
}
 800447c:	e037883a 	mov	sp,fp
 8004480:	dfc00117 	ldw	ra,4(sp)
 8004484:	df000017 	ldw	fp,0(sp)
 8004488:	dec00204 	addi	sp,sp,8
 800448c:	f800283a 	ret

08004490 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004490:	defffd04 	addi	sp,sp,-12
 8004494:	dfc00215 	stw	ra,8(sp)
 8004498:	df000115 	stw	fp,4(sp)
 800449c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80044a0:	00820034 	movhi	r2,2048
 80044a4:	1095a504 	addi	r2,r2,22164
 80044a8:	e0bfff15 	stw	r2,-4(fp)
 80044ac:	00000606 	br	80044c8 <_do_dtors+0x38>
        (*dtor) (); 
 80044b0:	e0bfff17 	ldw	r2,-4(fp)
 80044b4:	10800017 	ldw	r2,0(r2)
 80044b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80044bc:	e0bfff17 	ldw	r2,-4(fp)
 80044c0:	10bfff04 	addi	r2,r2,-4
 80044c4:	e0bfff15 	stw	r2,-4(fp)
 80044c8:	e0ffff17 	ldw	r3,-4(fp)
 80044cc:	00820034 	movhi	r2,2048
 80044d0:	1095a604 	addi	r2,r2,22168
 80044d4:	18bff62e 	bgeu	r3,r2,80044b0 <__alt_data_end+0xfc0044b0>
        (*dtor) (); 
}
 80044d8:	e037883a 	mov	sp,fp
 80044dc:	dfc00117 	ldw	ra,4(sp)
 80044e0:	df000017 	ldw	fp,0(sp)
 80044e4:	dec00204 	addi	sp,sp,8
 80044e8:	f800283a 	ret

080044ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80044ec:	deffff04 	addi	sp,sp,-4
 80044f0:	df000015 	stw	fp,0(sp)
 80044f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80044f8:	e037883a 	mov	sp,fp
 80044fc:	df000017 	ldw	fp,0(sp)
 8004500:	dec00104 	addi	sp,sp,4
 8004504:	f800283a 	ret

08004508 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004508:	defff904 	addi	sp,sp,-28
 800450c:	dfc00615 	stw	ra,24(sp)
 8004510:	df000515 	stw	fp,20(sp)
 8004514:	df000504 	addi	fp,sp,20
 8004518:	e13ffc15 	stw	r4,-16(fp)
 800451c:	e17ffd15 	stw	r5,-12(fp)
 8004520:	e1bffe15 	stw	r6,-8(fp)
 8004524:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8004528:	e0800217 	ldw	r2,8(fp)
 800452c:	d8800015 	stw	r2,0(sp)
 8004530:	e13ffc17 	ldw	r4,-16(fp)
 8004534:	e17ffd17 	ldw	r5,-12(fp)
 8004538:	e1bffe17 	ldw	r6,-8(fp)
 800453c:	e1ffff17 	ldw	r7,-4(fp)
 8004540:	80046e80 	call	80046e8 <alt_iic_isr_register>
}  
 8004544:	e037883a 	mov	sp,fp
 8004548:	dfc00117 	ldw	ra,4(sp)
 800454c:	df000017 	ldw	fp,0(sp)
 8004550:	dec00204 	addi	sp,sp,8
 8004554:	f800283a 	ret

08004558 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8004558:	defff904 	addi	sp,sp,-28
 800455c:	df000615 	stw	fp,24(sp)
 8004560:	df000604 	addi	fp,sp,24
 8004564:	e13ffe15 	stw	r4,-8(fp)
 8004568:	e17fff15 	stw	r5,-4(fp)
 800456c:	e0bfff17 	ldw	r2,-4(fp)
 8004570:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004574:	0005303a 	rdctl	r2,status
 8004578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800457c:	e0fffb17 	ldw	r3,-20(fp)
 8004580:	00bfff84 	movi	r2,-2
 8004584:	1884703a 	and	r2,r3,r2
 8004588:	1001703a 	wrctl	status,r2
  
  return context;
 800458c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004590:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8004594:	e0bffa17 	ldw	r2,-24(fp)
 8004598:	00c00044 	movi	r3,1
 800459c:	1884983a 	sll	r2,r3,r2
 80045a0:	1007883a 	mov	r3,r2
 80045a4:	00820074 	movhi	r2,2049
 80045a8:	10a16d04 	addi	r2,r2,-31308
 80045ac:	10800017 	ldw	r2,0(r2)
 80045b0:	1886b03a 	or	r3,r3,r2
 80045b4:	00820074 	movhi	r2,2049
 80045b8:	10a16d04 	addi	r2,r2,-31308
 80045bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80045c0:	00820074 	movhi	r2,2049
 80045c4:	10a16d04 	addi	r2,r2,-31308
 80045c8:	10800017 	ldw	r2,0(r2)
 80045cc:	100170fa 	wrctl	ienable,r2
 80045d0:	e0bffc17 	ldw	r2,-16(fp)
 80045d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80045d8:	e0bffd17 	ldw	r2,-12(fp)
 80045dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80045e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80045e4:	0001883a 	nop
}
 80045e8:	e037883a 	mov	sp,fp
 80045ec:	df000017 	ldw	fp,0(sp)
 80045f0:	dec00104 	addi	sp,sp,4
 80045f4:	f800283a 	ret

080045f8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80045f8:	defff904 	addi	sp,sp,-28
 80045fc:	df000615 	stw	fp,24(sp)
 8004600:	df000604 	addi	fp,sp,24
 8004604:	e13ffe15 	stw	r4,-8(fp)
 8004608:	e17fff15 	stw	r5,-4(fp)
 800460c:	e0bfff17 	ldw	r2,-4(fp)
 8004610:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004614:	0005303a 	rdctl	r2,status
 8004618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800461c:	e0fffb17 	ldw	r3,-20(fp)
 8004620:	00bfff84 	movi	r2,-2
 8004624:	1884703a 	and	r2,r3,r2
 8004628:	1001703a 	wrctl	status,r2
  
  return context;
 800462c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004630:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8004634:	e0bffa17 	ldw	r2,-24(fp)
 8004638:	00c00044 	movi	r3,1
 800463c:	1884983a 	sll	r2,r3,r2
 8004640:	0084303a 	nor	r2,zero,r2
 8004644:	1007883a 	mov	r3,r2
 8004648:	00820074 	movhi	r2,2049
 800464c:	10a16d04 	addi	r2,r2,-31308
 8004650:	10800017 	ldw	r2,0(r2)
 8004654:	1886703a 	and	r3,r3,r2
 8004658:	00820074 	movhi	r2,2049
 800465c:	10a16d04 	addi	r2,r2,-31308
 8004660:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004664:	00820074 	movhi	r2,2049
 8004668:	10a16d04 	addi	r2,r2,-31308
 800466c:	10800017 	ldw	r2,0(r2)
 8004670:	100170fa 	wrctl	ienable,r2
 8004674:	e0bffc17 	ldw	r2,-16(fp)
 8004678:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800467c:	e0bffd17 	ldw	r2,-12(fp)
 8004680:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004684:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8004688:	0001883a 	nop
}
 800468c:	e037883a 	mov	sp,fp
 8004690:	df000017 	ldw	fp,0(sp)
 8004694:	dec00104 	addi	sp,sp,4
 8004698:	f800283a 	ret

0800469c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800469c:	defffc04 	addi	sp,sp,-16
 80046a0:	df000315 	stw	fp,12(sp)
 80046a4:	df000304 	addi	fp,sp,12
 80046a8:	e13ffe15 	stw	r4,-8(fp)
 80046ac:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80046b0:	000530fa 	rdctl	r2,ienable
 80046b4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80046b8:	e0bfff17 	ldw	r2,-4(fp)
 80046bc:	00c00044 	movi	r3,1
 80046c0:	1884983a 	sll	r2,r3,r2
 80046c4:	1007883a 	mov	r3,r2
 80046c8:	e0bffd17 	ldw	r2,-12(fp)
 80046cc:	1884703a 	and	r2,r3,r2
 80046d0:	1004c03a 	cmpne	r2,r2,zero
 80046d4:	10803fcc 	andi	r2,r2,255
}
 80046d8:	e037883a 	mov	sp,fp
 80046dc:	df000017 	ldw	fp,0(sp)
 80046e0:	dec00104 	addi	sp,sp,4
 80046e4:	f800283a 	ret

080046e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80046e8:	defff504 	addi	sp,sp,-44
 80046ec:	dfc00a15 	stw	ra,40(sp)
 80046f0:	df000915 	stw	fp,36(sp)
 80046f4:	df000904 	addi	fp,sp,36
 80046f8:	e13ffc15 	stw	r4,-16(fp)
 80046fc:	e17ffd15 	stw	r5,-12(fp)
 8004700:	e1bffe15 	stw	r6,-8(fp)
 8004704:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8004708:	00bffa84 	movi	r2,-22
 800470c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8004710:	e0bffd17 	ldw	r2,-12(fp)
 8004714:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8004718:	e0bff817 	ldw	r2,-32(fp)
 800471c:	10800808 	cmpgei	r2,r2,32
 8004720:	1000271e 	bne	r2,zero,80047c0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004724:	0005303a 	rdctl	r2,status
 8004728:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800472c:	e0fffa17 	ldw	r3,-24(fp)
 8004730:	00bfff84 	movi	r2,-2
 8004734:	1884703a 	and	r2,r3,r2
 8004738:	1001703a 	wrctl	status,r2
  
  return context;
 800473c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8004740:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8004744:	00820074 	movhi	r2,2049
 8004748:	10a17204 	addi	r2,r2,-31288
 800474c:	e0fff817 	ldw	r3,-32(fp)
 8004750:	180690fa 	slli	r3,r3,3
 8004754:	10c5883a 	add	r2,r2,r3
 8004758:	e0fffe17 	ldw	r3,-8(fp)
 800475c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8004760:	00820074 	movhi	r2,2049
 8004764:	10a17204 	addi	r2,r2,-31288
 8004768:	e0fff817 	ldw	r3,-32(fp)
 800476c:	180690fa 	slli	r3,r3,3
 8004770:	10c5883a 	add	r2,r2,r3
 8004774:	10800104 	addi	r2,r2,4
 8004778:	e0ffff17 	ldw	r3,-4(fp)
 800477c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8004780:	e0bffe17 	ldw	r2,-8(fp)
 8004784:	10000526 	beq	r2,zero,800479c <alt_iic_isr_register+0xb4>
 8004788:	e0bff817 	ldw	r2,-32(fp)
 800478c:	e13ffc17 	ldw	r4,-16(fp)
 8004790:	100b883a 	mov	r5,r2
 8004794:	80045580 	call	8004558 <alt_ic_irq_enable>
 8004798:	00000406 	br	80047ac <alt_iic_isr_register+0xc4>
 800479c:	e0bff817 	ldw	r2,-32(fp)
 80047a0:	e13ffc17 	ldw	r4,-16(fp)
 80047a4:	100b883a 	mov	r5,r2
 80047a8:	80045f80 	call	80045f8 <alt_ic_irq_disable>
 80047ac:	e0bff715 	stw	r2,-36(fp)
 80047b0:	e0bff917 	ldw	r2,-28(fp)
 80047b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80047b8:	e0bffb17 	ldw	r2,-20(fp)
 80047bc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80047c0:	e0bff717 	ldw	r2,-36(fp)
}
 80047c4:	e037883a 	mov	sp,fp
 80047c8:	dfc00117 	ldw	ra,4(sp)
 80047cc:	df000017 	ldw	fp,0(sp)
 80047d0:	dec00204 	addi	sp,sp,8
 80047d4:	f800283a 	ret

080047d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80047d8:	defff804 	addi	sp,sp,-32
 80047dc:	dfc00715 	stw	ra,28(sp)
 80047e0:	df000615 	stw	fp,24(sp)
 80047e4:	dc000515 	stw	r16,20(sp)
 80047e8:	df000604 	addi	fp,sp,24
 80047ec:	e13ffb15 	stw	r4,-20(fp)
 80047f0:	e17ffc15 	stw	r5,-16(fp)
 80047f4:	e1bffd15 	stw	r6,-12(fp)
 80047f8:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80047fc:	e13ffc17 	ldw	r4,-16(fp)
 8004800:	e17ffd17 	ldw	r5,-12(fp)
 8004804:	e1bffe17 	ldw	r6,-8(fp)
 8004808:	8004a740 	call	8004a74 <open>
 800480c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8004810:	e0bffa17 	ldw	r2,-24(fp)
 8004814:	10002216 	blt	r2,zero,80048a0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8004818:	04020034 	movhi	r16,2048
 800481c:	841b1f04 	addi	r16,r16,27772
 8004820:	e0bffa17 	ldw	r2,-24(fp)
 8004824:	1009883a 	mov	r4,r2
 8004828:	01400304 	movi	r5,12
 800482c:	80032840 	call	8003284 <__mulsi3>
 8004830:	8085883a 	add	r2,r16,r2
 8004834:	10c00017 	ldw	r3,0(r2)
 8004838:	e0bffb17 	ldw	r2,-20(fp)
 800483c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8004840:	04020034 	movhi	r16,2048
 8004844:	841b1f04 	addi	r16,r16,27772
 8004848:	e0bffa17 	ldw	r2,-24(fp)
 800484c:	1009883a 	mov	r4,r2
 8004850:	01400304 	movi	r5,12
 8004854:	80032840 	call	8003284 <__mulsi3>
 8004858:	8085883a 	add	r2,r16,r2
 800485c:	10800104 	addi	r2,r2,4
 8004860:	10c00017 	ldw	r3,0(r2)
 8004864:	e0bffb17 	ldw	r2,-20(fp)
 8004868:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800486c:	04020034 	movhi	r16,2048
 8004870:	841b1f04 	addi	r16,r16,27772
 8004874:	e0bffa17 	ldw	r2,-24(fp)
 8004878:	1009883a 	mov	r4,r2
 800487c:	01400304 	movi	r5,12
 8004880:	80032840 	call	8003284 <__mulsi3>
 8004884:	8085883a 	add	r2,r16,r2
 8004888:	10800204 	addi	r2,r2,8
 800488c:	10c00017 	ldw	r3,0(r2)
 8004890:	e0bffb17 	ldw	r2,-20(fp)
 8004894:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8004898:	e13ffa17 	ldw	r4,-24(fp)
 800489c:	8004bd40 	call	8004bd4 <alt_release_fd>
  }
} 
 80048a0:	e6ffff04 	addi	sp,fp,-4
 80048a4:	dfc00217 	ldw	ra,8(sp)
 80048a8:	df000117 	ldw	fp,4(sp)
 80048ac:	dc000017 	ldw	r16,0(sp)
 80048b0:	dec00304 	addi	sp,sp,12
 80048b4:	f800283a 	ret

080048b8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80048b8:	defffb04 	addi	sp,sp,-20
 80048bc:	dfc00415 	stw	ra,16(sp)
 80048c0:	df000315 	stw	fp,12(sp)
 80048c4:	df000304 	addi	fp,sp,12
 80048c8:	e13ffd15 	stw	r4,-12(fp)
 80048cc:	e17ffe15 	stw	r5,-8(fp)
 80048d0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80048d4:	01020034 	movhi	r4,2048
 80048d8:	211b2204 	addi	r4,r4,27784
 80048dc:	e17ffd17 	ldw	r5,-12(fp)
 80048e0:	01800044 	movi	r6,1
 80048e4:	01c07fc4 	movi	r7,511
 80048e8:	80047d80 	call	80047d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80048ec:	01020034 	movhi	r4,2048
 80048f0:	211b1f04 	addi	r4,r4,27772
 80048f4:	e17ffe17 	ldw	r5,-8(fp)
 80048f8:	000d883a 	mov	r6,zero
 80048fc:	01c07fc4 	movi	r7,511
 8004900:	80047d80 	call	80047d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8004904:	01020034 	movhi	r4,2048
 8004908:	211b2504 	addi	r4,r4,27796
 800490c:	e17fff17 	ldw	r5,-4(fp)
 8004910:	01800044 	movi	r6,1
 8004914:	01c07fc4 	movi	r7,511
 8004918:	80047d80 	call	80047d8 <alt_open_fd>
}  
 800491c:	e037883a 	mov	sp,fp
 8004920:	dfc00117 	ldw	ra,4(sp)
 8004924:	df000017 	ldw	fp,0(sp)
 8004928:	dec00204 	addi	sp,sp,8
 800492c:	f800283a 	ret

08004930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004930:	defffe04 	addi	sp,sp,-8
 8004934:	dfc00115 	stw	ra,4(sp)
 8004938:	df000015 	stw	fp,0(sp)
 800493c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004940:	00820034 	movhi	r2,2048
 8004944:	109b9e04 	addi	r2,r2,28280
 8004948:	10800017 	ldw	r2,0(r2)
 800494c:	10000526 	beq	r2,zero,8004964 <alt_get_errno+0x34>
 8004950:	00820034 	movhi	r2,2048
 8004954:	109b9e04 	addi	r2,r2,28280
 8004958:	10800017 	ldw	r2,0(r2)
 800495c:	103ee83a 	callr	r2
 8004960:	00000206 	br	800496c <alt_get_errno+0x3c>
 8004964:	00820074 	movhi	r2,2049
 8004968:	10a17104 	addi	r2,r2,-31292
}
 800496c:	e037883a 	mov	sp,fp
 8004970:	dfc00117 	ldw	ra,4(sp)
 8004974:	df000017 	ldw	fp,0(sp)
 8004978:	dec00204 	addi	sp,sp,8
 800497c:	f800283a 	ret

08004980 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8004980:	defffb04 	addi	sp,sp,-20
 8004984:	dfc00415 	stw	ra,16(sp)
 8004988:	df000315 	stw	fp,12(sp)
 800498c:	dc000215 	stw	r16,8(sp)
 8004990:	df000304 	addi	fp,sp,12
 8004994:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8004998:	e0bffe17 	ldw	r2,-8(fp)
 800499c:	10800217 	ldw	r2,8(r2)
 80049a0:	10d00034 	orhi	r3,r2,16384
 80049a4:	e0bffe17 	ldw	r2,-8(fp)
 80049a8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80049ac:	e03ffd15 	stw	zero,-12(fp)
 80049b0:	00002306 	br	8004a40 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80049b4:	04020034 	movhi	r16,2048
 80049b8:	841b1f04 	addi	r16,r16,27772
 80049bc:	e0bffd17 	ldw	r2,-12(fp)
 80049c0:	1009883a 	mov	r4,r2
 80049c4:	01400304 	movi	r5,12
 80049c8:	80032840 	call	8003284 <__mulsi3>
 80049cc:	8085883a 	add	r2,r16,r2
 80049d0:	10c00017 	ldw	r3,0(r2)
 80049d4:	e0bffe17 	ldw	r2,-8(fp)
 80049d8:	10800017 	ldw	r2,0(r2)
 80049dc:	1880151e 	bne	r3,r2,8004a34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80049e0:	04020034 	movhi	r16,2048
 80049e4:	841b1f04 	addi	r16,r16,27772
 80049e8:	e0bffd17 	ldw	r2,-12(fp)
 80049ec:	1009883a 	mov	r4,r2
 80049f0:	01400304 	movi	r5,12
 80049f4:	80032840 	call	8003284 <__mulsi3>
 80049f8:	8085883a 	add	r2,r16,r2
 80049fc:	10800204 	addi	r2,r2,8
 8004a00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8004a04:	10000b0e 	bge	r2,zero,8004a34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8004a08:	e13ffd17 	ldw	r4,-12(fp)
 8004a0c:	01400304 	movi	r5,12
 8004a10:	80032840 	call	8003284 <__mulsi3>
 8004a14:	1007883a 	mov	r3,r2
 8004a18:	00820034 	movhi	r2,2048
 8004a1c:	109b1f04 	addi	r2,r2,27772
 8004a20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8004a24:	e0bffe17 	ldw	r2,-8(fp)
 8004a28:	18800226 	beq	r3,r2,8004a34 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8004a2c:	00bffcc4 	movi	r2,-13
 8004a30:	00000a06 	br	8004a5c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8004a34:	e0bffd17 	ldw	r2,-12(fp)
 8004a38:	10800044 	addi	r2,r2,1
 8004a3c:	e0bffd15 	stw	r2,-12(fp)
 8004a40:	00820034 	movhi	r2,2048
 8004a44:	109b9d04 	addi	r2,r2,28276
 8004a48:	10800017 	ldw	r2,0(r2)
 8004a4c:	1007883a 	mov	r3,r2
 8004a50:	e0bffd17 	ldw	r2,-12(fp)
 8004a54:	18bfd72e 	bgeu	r3,r2,80049b4 <__alt_data_end+0xfc0049b4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8004a58:	0005883a 	mov	r2,zero
}
 8004a5c:	e6ffff04 	addi	sp,fp,-4
 8004a60:	dfc00217 	ldw	ra,8(sp)
 8004a64:	df000117 	ldw	fp,4(sp)
 8004a68:	dc000017 	ldw	r16,0(sp)
 8004a6c:	dec00304 	addi	sp,sp,12
 8004a70:	f800283a 	ret

08004a74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8004a74:	defff604 	addi	sp,sp,-40
 8004a78:	dfc00915 	stw	ra,36(sp)
 8004a7c:	df000815 	stw	fp,32(sp)
 8004a80:	df000804 	addi	fp,sp,32
 8004a84:	e13ffd15 	stw	r4,-12(fp)
 8004a88:	e17ffe15 	stw	r5,-8(fp)
 8004a8c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8004a90:	00bfffc4 	movi	r2,-1
 8004a94:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8004a98:	00bffb44 	movi	r2,-19
 8004a9c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8004aa0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8004aa4:	e13ffd17 	ldw	r4,-12(fp)
 8004aa8:	01420034 	movhi	r5,2048
 8004aac:	295b9b04 	addi	r5,r5,28268
 8004ab0:	8004e100 	call	8004e10 <alt_find_dev>
 8004ab4:	e0bff815 	stw	r2,-32(fp)
 8004ab8:	e0bff817 	ldw	r2,-32(fp)
 8004abc:	1000051e 	bne	r2,zero,8004ad4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8004ac0:	e13ffd17 	ldw	r4,-12(fp)
 8004ac4:	8004ea00 	call	8004ea0 <alt_find_file>
 8004ac8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8004acc:	00800044 	movi	r2,1
 8004ad0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8004ad4:	e0bff817 	ldw	r2,-32(fp)
 8004ad8:	10002b26 	beq	r2,zero,8004b88 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8004adc:	e13ff817 	ldw	r4,-32(fp)
 8004ae0:	8004fb40 	call	8004fb4 <alt_get_fd>
 8004ae4:	e0bff915 	stw	r2,-28(fp)
 8004ae8:	e0bff917 	ldw	r2,-28(fp)
 8004aec:	1000030e 	bge	r2,zero,8004afc <open+0x88>
    {
      status = index;
 8004af0:	e0bff917 	ldw	r2,-28(fp)
 8004af4:	e0bffa15 	stw	r2,-24(fp)
 8004af8:	00002506 	br	8004b90 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8004afc:	e13ff917 	ldw	r4,-28(fp)
 8004b00:	01400304 	movi	r5,12
 8004b04:	80032840 	call	8003284 <__mulsi3>
 8004b08:	1007883a 	mov	r3,r2
 8004b0c:	00820034 	movhi	r2,2048
 8004b10:	109b1f04 	addi	r2,r2,27772
 8004b14:	1885883a 	add	r2,r3,r2
 8004b18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8004b1c:	e0fffe17 	ldw	r3,-8(fp)
 8004b20:	00900034 	movhi	r2,16384
 8004b24:	10bfffc4 	addi	r2,r2,-1
 8004b28:	1886703a 	and	r3,r3,r2
 8004b2c:	e0bffc17 	ldw	r2,-16(fp)
 8004b30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8004b34:	e0bffb17 	ldw	r2,-20(fp)
 8004b38:	1000051e 	bne	r2,zero,8004b50 <open+0xdc>
 8004b3c:	e13ffc17 	ldw	r4,-16(fp)
 8004b40:	80049800 	call	8004980 <alt_file_locked>
 8004b44:	e0bffa15 	stw	r2,-24(fp)
 8004b48:	e0bffa17 	ldw	r2,-24(fp)
 8004b4c:	10001016 	blt	r2,zero,8004b90 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8004b50:	e0bff817 	ldw	r2,-32(fp)
 8004b54:	10800317 	ldw	r2,12(r2)
 8004b58:	10000826 	beq	r2,zero,8004b7c <open+0x108>
 8004b5c:	e0bff817 	ldw	r2,-32(fp)
 8004b60:	10800317 	ldw	r2,12(r2)
 8004b64:	e13ffc17 	ldw	r4,-16(fp)
 8004b68:	e17ffd17 	ldw	r5,-12(fp)
 8004b6c:	e1bffe17 	ldw	r6,-8(fp)
 8004b70:	e1ffff17 	ldw	r7,-4(fp)
 8004b74:	103ee83a 	callr	r2
 8004b78:	00000106 	br	8004b80 <open+0x10c>
 8004b7c:	0005883a 	mov	r2,zero
 8004b80:	e0bffa15 	stw	r2,-24(fp)
 8004b84:	00000206 	br	8004b90 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8004b88:	00bffb44 	movi	r2,-19
 8004b8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8004b90:	e0bffa17 	ldw	r2,-24(fp)
 8004b94:	1000090e 	bge	r2,zero,8004bbc <open+0x148>
  {
    alt_release_fd (index);  
 8004b98:	e13ff917 	ldw	r4,-28(fp)
 8004b9c:	8004bd40 	call	8004bd4 <alt_release_fd>
    ALT_ERRNO = -status;
 8004ba0:	80049300 	call	8004930 <alt_get_errno>
 8004ba4:	1007883a 	mov	r3,r2
 8004ba8:	e0bffa17 	ldw	r2,-24(fp)
 8004bac:	0085c83a 	sub	r2,zero,r2
 8004bb0:	18800015 	stw	r2,0(r3)
    return -1;
 8004bb4:	00bfffc4 	movi	r2,-1
 8004bb8:	00000106 	br	8004bc0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8004bbc:	e0bff917 	ldw	r2,-28(fp)
}
 8004bc0:	e037883a 	mov	sp,fp
 8004bc4:	dfc00117 	ldw	ra,4(sp)
 8004bc8:	df000017 	ldw	fp,0(sp)
 8004bcc:	dec00204 	addi	sp,sp,8
 8004bd0:	f800283a 	ret

08004bd4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8004bd4:	defffc04 	addi	sp,sp,-16
 8004bd8:	dfc00315 	stw	ra,12(sp)
 8004bdc:	df000215 	stw	fp,8(sp)
 8004be0:	dc000115 	stw	r16,4(sp)
 8004be4:	df000204 	addi	fp,sp,8
 8004be8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 8004bec:	e0bffe17 	ldw	r2,-8(fp)
 8004bf0:	108000d0 	cmplti	r2,r2,3
 8004bf4:	1000111e 	bne	r2,zero,8004c3c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 8004bf8:	04020034 	movhi	r16,2048
 8004bfc:	841b1f04 	addi	r16,r16,27772
 8004c00:	e0bffe17 	ldw	r2,-8(fp)
 8004c04:	1009883a 	mov	r4,r2
 8004c08:	01400304 	movi	r5,12
 8004c0c:	80032840 	call	8003284 <__mulsi3>
 8004c10:	8085883a 	add	r2,r16,r2
 8004c14:	10800204 	addi	r2,r2,8
 8004c18:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8004c1c:	04020034 	movhi	r16,2048
 8004c20:	841b1f04 	addi	r16,r16,27772
 8004c24:	e0bffe17 	ldw	r2,-8(fp)
 8004c28:	1009883a 	mov	r4,r2
 8004c2c:	01400304 	movi	r5,12
 8004c30:	80032840 	call	8003284 <__mulsi3>
 8004c34:	8085883a 	add	r2,r16,r2
 8004c38:	10000015 	stw	zero,0(r2)
  }
}
 8004c3c:	e6ffff04 	addi	sp,fp,-4
 8004c40:	dfc00217 	ldw	ra,8(sp)
 8004c44:	df000117 	ldw	fp,4(sp)
 8004c48:	dc000017 	ldw	r16,0(sp)
 8004c4c:	dec00304 	addi	sp,sp,12
 8004c50:	f800283a 	ret

08004c54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8004c54:	defffa04 	addi	sp,sp,-24
 8004c58:	df000515 	stw	fp,20(sp)
 8004c5c:	df000504 	addi	fp,sp,20
 8004c60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c64:	0005303a 	rdctl	r2,status
 8004c68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c6c:	e0fffc17 	ldw	r3,-16(fp)
 8004c70:	00bfff84 	movi	r2,-2
 8004c74:	1884703a 	and	r2,r3,r2
 8004c78:	1001703a 	wrctl	status,r2
  
  return context;
 8004c7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8004c80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8004c84:	e0bfff17 	ldw	r2,-4(fp)
 8004c88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8004c8c:	e0bffd17 	ldw	r2,-12(fp)
 8004c90:	10800017 	ldw	r2,0(r2)
 8004c94:	e0fffd17 	ldw	r3,-12(fp)
 8004c98:	18c00117 	ldw	r3,4(r3)
 8004c9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8004ca0:	e0bffd17 	ldw	r2,-12(fp)
 8004ca4:	10800117 	ldw	r2,4(r2)
 8004ca8:	e0fffd17 	ldw	r3,-12(fp)
 8004cac:	18c00017 	ldw	r3,0(r3)
 8004cb0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8004cb4:	e0bffd17 	ldw	r2,-12(fp)
 8004cb8:	e0fffd17 	ldw	r3,-12(fp)
 8004cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8004cc0:	e0bffd17 	ldw	r2,-12(fp)
 8004cc4:	e0fffd17 	ldw	r3,-12(fp)
 8004cc8:	10c00015 	stw	r3,0(r2)
 8004ccc:	e0bffb17 	ldw	r2,-20(fp)
 8004cd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004cd4:	e0bffe17 	ldw	r2,-8(fp)
 8004cd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8004cdc:	e037883a 	mov	sp,fp
 8004ce0:	df000017 	ldw	fp,0(sp)
 8004ce4:	dec00104 	addi	sp,sp,4
 8004ce8:	f800283a 	ret

08004cec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8004cec:	defffb04 	addi	sp,sp,-20
 8004cf0:	dfc00415 	stw	ra,16(sp)
 8004cf4:	df000315 	stw	fp,12(sp)
 8004cf8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8004cfc:	d0a02117 	ldw	r2,-32636(gp)
 8004d00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8004d04:	d0a5f017 	ldw	r2,-26688(gp)
 8004d08:	10800044 	addi	r2,r2,1
 8004d0c:	d0a5f015 	stw	r2,-26688(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8004d10:	00002e06 	br	8004dcc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8004d14:	e0bffd17 	ldw	r2,-12(fp)
 8004d18:	10800017 	ldw	r2,0(r2)
 8004d1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8004d20:	e0bffd17 	ldw	r2,-12(fp)
 8004d24:	10800403 	ldbu	r2,16(r2)
 8004d28:	10803fcc 	andi	r2,r2,255
 8004d2c:	10000426 	beq	r2,zero,8004d40 <alt_tick+0x54>
 8004d30:	d0a5f017 	ldw	r2,-26688(gp)
 8004d34:	1000021e 	bne	r2,zero,8004d40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8004d38:	e0bffd17 	ldw	r2,-12(fp)
 8004d3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8004d40:	e0bffd17 	ldw	r2,-12(fp)
 8004d44:	10800217 	ldw	r2,8(r2)
 8004d48:	d0e5f017 	ldw	r3,-26688(gp)
 8004d4c:	18801d36 	bltu	r3,r2,8004dc4 <alt_tick+0xd8>
 8004d50:	e0bffd17 	ldw	r2,-12(fp)
 8004d54:	10800403 	ldbu	r2,16(r2)
 8004d58:	10803fcc 	andi	r2,r2,255
 8004d5c:	1000191e 	bne	r2,zero,8004dc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8004d60:	e0bffd17 	ldw	r2,-12(fp)
 8004d64:	10800317 	ldw	r2,12(r2)
 8004d68:	e0fffd17 	ldw	r3,-12(fp)
 8004d6c:	18c00517 	ldw	r3,20(r3)
 8004d70:	1809883a 	mov	r4,r3
 8004d74:	103ee83a 	callr	r2
 8004d78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8004d7c:	e0bfff17 	ldw	r2,-4(fp)
 8004d80:	1000031e 	bne	r2,zero,8004d90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8004d84:	e13ffd17 	ldw	r4,-12(fp)
 8004d88:	8004c540 	call	8004c54 <alt_alarm_stop>
 8004d8c:	00000d06 	br	8004dc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8004d90:	e0bffd17 	ldw	r2,-12(fp)
 8004d94:	10c00217 	ldw	r3,8(r2)
 8004d98:	e0bfff17 	ldw	r2,-4(fp)
 8004d9c:	1887883a 	add	r3,r3,r2
 8004da0:	e0bffd17 	ldw	r2,-12(fp)
 8004da4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8004da8:	e0bffd17 	ldw	r2,-12(fp)
 8004dac:	10c00217 	ldw	r3,8(r2)
 8004db0:	d0a5f017 	ldw	r2,-26688(gp)
 8004db4:	1880032e 	bgeu	r3,r2,8004dc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8004db8:	e0bffd17 	ldw	r2,-12(fp)
 8004dbc:	00c00044 	movi	r3,1
 8004dc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8004dc4:	e0bffe17 	ldw	r2,-8(fp)
 8004dc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8004dcc:	e0fffd17 	ldw	r3,-12(fp)
 8004dd0:	d0a02104 	addi	r2,gp,-32636
 8004dd4:	18bfcf1e 	bne	r3,r2,8004d14 <__alt_data_end+0xfc004d14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8004dd8:	0001883a 	nop
}
 8004ddc:	e037883a 	mov	sp,fp
 8004de0:	dfc00117 	ldw	ra,4(sp)
 8004de4:	df000017 	ldw	fp,0(sp)
 8004de8:	dec00204 	addi	sp,sp,8
 8004dec:	f800283a 	ret

08004df0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8004df0:	deffff04 	addi	sp,sp,-4
 8004df4:	df000015 	stw	fp,0(sp)
 8004df8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8004dfc:	000170fa 	wrctl	ienable,zero
}
 8004e00:	e037883a 	mov	sp,fp
 8004e04:	df000017 	ldw	fp,0(sp)
 8004e08:	dec00104 	addi	sp,sp,4
 8004e0c:	f800283a 	ret

08004e10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004e10:	defffa04 	addi	sp,sp,-24
 8004e14:	dfc00515 	stw	ra,20(sp)
 8004e18:	df000415 	stw	fp,16(sp)
 8004e1c:	df000404 	addi	fp,sp,16
 8004e20:	e13ffe15 	stw	r4,-8(fp)
 8004e24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004e28:	e0bfff17 	ldw	r2,-4(fp)
 8004e2c:	10800017 	ldw	r2,0(r2)
 8004e30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004e34:	e13ffe17 	ldw	r4,-8(fp)
 8004e38:	80053240 	call	8005324 <strlen>
 8004e3c:	10800044 	addi	r2,r2,1
 8004e40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004e44:	00000d06 	br	8004e7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004e48:	e0bffc17 	ldw	r2,-16(fp)
 8004e4c:	10c00217 	ldw	r3,8(r2)
 8004e50:	e0bffd17 	ldw	r2,-12(fp)
 8004e54:	1809883a 	mov	r4,r3
 8004e58:	e17ffe17 	ldw	r5,-8(fp)
 8004e5c:	100d883a 	mov	r6,r2
 8004e60:	80051700 	call	8005170 <memcmp>
 8004e64:	1000021e 	bne	r2,zero,8004e70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004e68:	e0bffc17 	ldw	r2,-16(fp)
 8004e6c:	00000706 	br	8004e8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004e70:	e0bffc17 	ldw	r2,-16(fp)
 8004e74:	10800017 	ldw	r2,0(r2)
 8004e78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004e7c:	e0fffc17 	ldw	r3,-16(fp)
 8004e80:	e0bfff17 	ldw	r2,-4(fp)
 8004e84:	18bff01e 	bne	r3,r2,8004e48 <__alt_data_end+0xfc004e48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004e88:	0005883a 	mov	r2,zero
}
 8004e8c:	e037883a 	mov	sp,fp
 8004e90:	dfc00117 	ldw	ra,4(sp)
 8004e94:	df000017 	ldw	fp,0(sp)
 8004e98:	dec00204 	addi	sp,sp,8
 8004e9c:	f800283a 	ret

08004ea0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8004ea0:	defffb04 	addi	sp,sp,-20
 8004ea4:	dfc00415 	stw	ra,16(sp)
 8004ea8:	df000315 	stw	fp,12(sp)
 8004eac:	df000304 	addi	fp,sp,12
 8004eb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8004eb4:	00820034 	movhi	r2,2048
 8004eb8:	109b9904 	addi	r2,r2,28260
 8004ebc:	10800017 	ldw	r2,0(r2)
 8004ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8004ec4:	00003106 	br	8004f8c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8004ec8:	e0bffd17 	ldw	r2,-12(fp)
 8004ecc:	10800217 	ldw	r2,8(r2)
 8004ed0:	1009883a 	mov	r4,r2
 8004ed4:	80053240 	call	8005324 <strlen>
 8004ed8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8004edc:	e0bffd17 	ldw	r2,-12(fp)
 8004ee0:	10c00217 	ldw	r3,8(r2)
 8004ee4:	e0bffe17 	ldw	r2,-8(fp)
 8004ee8:	10bfffc4 	addi	r2,r2,-1
 8004eec:	1885883a 	add	r2,r3,r2
 8004ef0:	10800003 	ldbu	r2,0(r2)
 8004ef4:	10803fcc 	andi	r2,r2,255
 8004ef8:	1080201c 	xori	r2,r2,128
 8004efc:	10bfe004 	addi	r2,r2,-128
 8004f00:	10800bd8 	cmpnei	r2,r2,47
 8004f04:	1000031e 	bne	r2,zero,8004f14 <alt_find_file+0x74>
    {
      len -= 1;
 8004f08:	e0bffe17 	ldw	r2,-8(fp)
 8004f0c:	10bfffc4 	addi	r2,r2,-1
 8004f10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8004f14:	e0bffe17 	ldw	r2,-8(fp)
 8004f18:	e0ffff17 	ldw	r3,-4(fp)
 8004f1c:	1885883a 	add	r2,r3,r2
 8004f20:	10800003 	ldbu	r2,0(r2)
 8004f24:	10803fcc 	andi	r2,r2,255
 8004f28:	1080201c 	xori	r2,r2,128
 8004f2c:	10bfe004 	addi	r2,r2,-128
 8004f30:	10800be0 	cmpeqi	r2,r2,47
 8004f34:	1000081e 	bne	r2,zero,8004f58 <alt_find_file+0xb8>
 8004f38:	e0bffe17 	ldw	r2,-8(fp)
 8004f3c:	e0ffff17 	ldw	r3,-4(fp)
 8004f40:	1885883a 	add	r2,r3,r2
 8004f44:	10800003 	ldbu	r2,0(r2)
 8004f48:	10803fcc 	andi	r2,r2,255
 8004f4c:	1080201c 	xori	r2,r2,128
 8004f50:	10bfe004 	addi	r2,r2,-128
 8004f54:	10000a1e 	bne	r2,zero,8004f80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8004f58:	e0bffd17 	ldw	r2,-12(fp)
 8004f5c:	10c00217 	ldw	r3,8(r2)
 8004f60:	e0bffe17 	ldw	r2,-8(fp)
 8004f64:	1809883a 	mov	r4,r3
 8004f68:	e17fff17 	ldw	r5,-4(fp)
 8004f6c:	100d883a 	mov	r6,r2
 8004f70:	80051700 	call	8005170 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8004f74:	1000021e 	bne	r2,zero,8004f80 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8004f78:	e0bffd17 	ldw	r2,-12(fp)
 8004f7c:	00000806 	br	8004fa0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8004f80:	e0bffd17 	ldw	r2,-12(fp)
 8004f84:	10800017 	ldw	r2,0(r2)
 8004f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8004f8c:	e0fffd17 	ldw	r3,-12(fp)
 8004f90:	00820034 	movhi	r2,2048
 8004f94:	109b9904 	addi	r2,r2,28260
 8004f98:	18bfcb1e 	bne	r3,r2,8004ec8 <__alt_data_end+0xfc004ec8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8004f9c:	0005883a 	mov	r2,zero
}
 8004fa0:	e037883a 	mov	sp,fp
 8004fa4:	dfc00117 	ldw	ra,4(sp)
 8004fa8:	df000017 	ldw	fp,0(sp)
 8004fac:	dec00204 	addi	sp,sp,8
 8004fb0:	f800283a 	ret

08004fb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8004fb4:	defffa04 	addi	sp,sp,-24
 8004fb8:	dfc00515 	stw	ra,20(sp)
 8004fbc:	df000415 	stw	fp,16(sp)
 8004fc0:	dc000315 	stw	r16,12(sp)
 8004fc4:	df000404 	addi	fp,sp,16
 8004fc8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8004fcc:	00bffa04 	movi	r2,-24
 8004fd0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8004fd4:	e03ffc15 	stw	zero,-16(fp)
 8004fd8:	00002106 	br	8005060 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8004fdc:	04020034 	movhi	r16,2048
 8004fe0:	841b1f04 	addi	r16,r16,27772
 8004fe4:	e0bffc17 	ldw	r2,-16(fp)
 8004fe8:	1009883a 	mov	r4,r2
 8004fec:	01400304 	movi	r5,12
 8004ff0:	80032840 	call	8003284 <__mulsi3>
 8004ff4:	8085883a 	add	r2,r16,r2
 8004ff8:	10800017 	ldw	r2,0(r2)
 8004ffc:	1000151e 	bne	r2,zero,8005054 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8005000:	04020034 	movhi	r16,2048
 8005004:	841b1f04 	addi	r16,r16,27772
 8005008:	e0bffc17 	ldw	r2,-16(fp)
 800500c:	1009883a 	mov	r4,r2
 8005010:	01400304 	movi	r5,12
 8005014:	80032840 	call	8003284 <__mulsi3>
 8005018:	8085883a 	add	r2,r16,r2
 800501c:	e0fffe17 	ldw	r3,-8(fp)
 8005020:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8005024:	00820034 	movhi	r2,2048
 8005028:	109b9d04 	addi	r2,r2,28276
 800502c:	10c00017 	ldw	r3,0(r2)
 8005030:	e0bffc17 	ldw	r2,-16(fp)
 8005034:	1880040e 	bge	r3,r2,8005048 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8005038:	00820034 	movhi	r2,2048
 800503c:	109b9d04 	addi	r2,r2,28276
 8005040:	e0fffc17 	ldw	r3,-16(fp)
 8005044:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8005048:	e0bffc17 	ldw	r2,-16(fp)
 800504c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8005050:	00000606 	br	800506c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005054:	e0bffc17 	ldw	r2,-16(fp)
 8005058:	10800044 	addi	r2,r2,1
 800505c:	e0bffc15 	stw	r2,-16(fp)
 8005060:	e0bffc17 	ldw	r2,-16(fp)
 8005064:	10800810 	cmplti	r2,r2,32
 8005068:	103fdc1e 	bne	r2,zero,8004fdc <__alt_data_end+0xfc004fdc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800506c:	e0bffd17 	ldw	r2,-12(fp)
}
 8005070:	e6ffff04 	addi	sp,fp,-4
 8005074:	dfc00217 	ldw	ra,8(sp)
 8005078:	df000117 	ldw	fp,4(sp)
 800507c:	dc000017 	ldw	r16,0(sp)
 8005080:	dec00304 	addi	sp,sp,12
 8005084:	f800283a 	ret

08005088 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8005088:	defffe04 	addi	sp,sp,-8
 800508c:	df000115 	stw	fp,4(sp)
 8005090:	df000104 	addi	fp,sp,4
 8005094:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8005098:	e0bfff17 	ldw	r2,-4(fp)
 800509c:	10bffe84 	addi	r2,r2,-6
 80050a0:	10c00428 	cmpgeui	r3,r2,16
 80050a4:	18001a1e 	bne	r3,zero,8005110 <alt_exception_cause_generated_bad_addr+0x88>
 80050a8:	100690ba 	slli	r3,r2,2
 80050ac:	00820034 	movhi	r2,2048
 80050b0:	10943004 	addi	r2,r2,20672
 80050b4:	1885883a 	add	r2,r3,r2
 80050b8:	10800017 	ldw	r2,0(r2)
 80050bc:	1000683a 	jmp	r2
 80050c0:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
 80050c4:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
 80050c8:	08005110 	cmplti	zero,at,324
 80050cc:	08005110 	cmplti	zero,at,324
 80050d0:	08005110 	cmplti	zero,at,324
 80050d4:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
 80050d8:	08005108 	cmpgei	zero,at,324
 80050dc:	08005110 	cmplti	zero,at,324
 80050e0:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
 80050e4:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
 80050e8:	08005110 	cmplti	zero,at,324
 80050ec:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
 80050f0:	08005108 	cmpgei	zero,at,324
 80050f4:	08005110 	cmplti	zero,at,324
 80050f8:	08005110 	cmplti	zero,at,324
 80050fc:	08005100 	call	800510 <__alt_mem_onchip_memory2_0+0x800510>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8005100:	00800044 	movi	r2,1
 8005104:	00000306 	br	8005114 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8005108:	0005883a 	mov	r2,zero
 800510c:	00000106 	br	8005114 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8005110:	0005883a 	mov	r2,zero
  }
}
 8005114:	e037883a 	mov	sp,fp
 8005118:	df000017 	ldw	fp,0(sp)
 800511c:	dec00104 	addi	sp,sp,4
 8005120:	f800283a 	ret

08005124 <atexit>:
 8005124:	200b883a 	mov	r5,r4
 8005128:	000d883a 	mov	r6,zero
 800512c:	0009883a 	mov	r4,zero
 8005130:	000f883a 	mov	r7,zero
 8005134:	80053bc1 	jmpi	80053bc <__register_exitproc>

08005138 <exit>:
 8005138:	defffe04 	addi	sp,sp,-8
 800513c:	000b883a 	mov	r5,zero
 8005140:	dc000015 	stw	r16,0(sp)
 8005144:	dfc00115 	stw	ra,4(sp)
 8005148:	2021883a 	mov	r16,r4
 800514c:	80054d00 	call	80054d0 <__call_exitprocs>
 8005150:	00820034 	movhi	r2,2048
 8005154:	109b9704 	addi	r2,r2,28252
 8005158:	11000017 	ldw	r4,0(r2)
 800515c:	20800f17 	ldw	r2,60(r4)
 8005160:	10000126 	beq	r2,zero,8005168 <exit+0x30>
 8005164:	103ee83a 	callr	r2
 8005168:	8009883a 	mov	r4,r16
 800516c:	80056640 	call	8005664 <_exit>

08005170 <memcmp>:
 8005170:	01c000c4 	movi	r7,3
 8005174:	3980192e 	bgeu	r7,r6,80051dc <memcmp+0x6c>
 8005178:	2144b03a 	or	r2,r4,r5
 800517c:	11c4703a 	and	r2,r2,r7
 8005180:	10000f26 	beq	r2,zero,80051c0 <memcmp+0x50>
 8005184:	20800003 	ldbu	r2,0(r4)
 8005188:	28c00003 	ldbu	r3,0(r5)
 800518c:	10c0151e 	bne	r2,r3,80051e4 <memcmp+0x74>
 8005190:	31bfff84 	addi	r6,r6,-2
 8005194:	01ffffc4 	movi	r7,-1
 8005198:	00000406 	br	80051ac <memcmp+0x3c>
 800519c:	20800003 	ldbu	r2,0(r4)
 80051a0:	28c00003 	ldbu	r3,0(r5)
 80051a4:	31bfffc4 	addi	r6,r6,-1
 80051a8:	10c00e1e 	bne	r2,r3,80051e4 <memcmp+0x74>
 80051ac:	21000044 	addi	r4,r4,1
 80051b0:	29400044 	addi	r5,r5,1
 80051b4:	31fff91e 	bne	r6,r7,800519c <__alt_data_end+0xfc00519c>
 80051b8:	0005883a 	mov	r2,zero
 80051bc:	f800283a 	ret
 80051c0:	20c00017 	ldw	r3,0(r4)
 80051c4:	28800017 	ldw	r2,0(r5)
 80051c8:	1880041e 	bne	r3,r2,80051dc <memcmp+0x6c>
 80051cc:	31bfff04 	addi	r6,r6,-4
 80051d0:	21000104 	addi	r4,r4,4
 80051d4:	29400104 	addi	r5,r5,4
 80051d8:	39bff936 	bltu	r7,r6,80051c0 <__alt_data_end+0xfc0051c0>
 80051dc:	303fe91e 	bne	r6,zero,8005184 <__alt_data_end+0xfc005184>
 80051e0:	003ff506 	br	80051b8 <__alt_data_end+0xfc0051b8>
 80051e4:	10c5c83a 	sub	r2,r2,r3
 80051e8:	f800283a 	ret

080051ec <memcpy>:
 80051ec:	deffff04 	addi	sp,sp,-4
 80051f0:	dc000015 	stw	r16,0(sp)
 80051f4:	00c003c4 	movi	r3,15
 80051f8:	2005883a 	mov	r2,r4
 80051fc:	1980432e 	bgeu	r3,r6,800530c <memcpy+0x120>
 8005200:	2146b03a 	or	r3,r4,r5
 8005204:	18c000cc 	andi	r3,r3,3
 8005208:	1800421e 	bne	r3,zero,8005314 <memcpy+0x128>
 800520c:	343ffc04 	addi	r16,r6,-16
 8005210:	8020d13a 	srli	r16,r16,4
 8005214:	28c00104 	addi	r3,r5,4
 8005218:	23400104 	addi	r13,r4,4
 800521c:	801e913a 	slli	r15,r16,4
 8005220:	2b000204 	addi	r12,r5,8
 8005224:	22c00204 	addi	r11,r4,8
 8005228:	7bc00504 	addi	r15,r15,20
 800522c:	2a800304 	addi	r10,r5,12
 8005230:	22400304 	addi	r9,r4,12
 8005234:	2bdf883a 	add	r15,r5,r15
 8005238:	2811883a 	mov	r8,r5
 800523c:	200f883a 	mov	r7,r4
 8005240:	41000017 	ldw	r4,0(r8)
 8005244:	39c00404 	addi	r7,r7,16
 8005248:	18c00404 	addi	r3,r3,16
 800524c:	393ffc15 	stw	r4,-16(r7)
 8005250:	1bbffc17 	ldw	r14,-16(r3)
 8005254:	6b400404 	addi	r13,r13,16
 8005258:	5ac00404 	addi	r11,r11,16
 800525c:	6bbffc15 	stw	r14,-16(r13)
 8005260:	63800017 	ldw	r14,0(r12)
 8005264:	4a400404 	addi	r9,r9,16
 8005268:	42000404 	addi	r8,r8,16
 800526c:	5bbffc15 	stw	r14,-16(r11)
 8005270:	53800017 	ldw	r14,0(r10)
 8005274:	63000404 	addi	r12,r12,16
 8005278:	52800404 	addi	r10,r10,16
 800527c:	4bbffc15 	stw	r14,-16(r9)
 8005280:	1bffef1e 	bne	r3,r15,8005240 <__alt_data_end+0xfc005240>
 8005284:	81c00044 	addi	r7,r16,1
 8005288:	380e913a 	slli	r7,r7,4
 800528c:	310003cc 	andi	r4,r6,15
 8005290:	02c000c4 	movi	r11,3
 8005294:	11c7883a 	add	r3,r2,r7
 8005298:	29cb883a 	add	r5,r5,r7
 800529c:	59001f2e 	bgeu	r11,r4,800531c <memcpy+0x130>
 80052a0:	1813883a 	mov	r9,r3
 80052a4:	2811883a 	mov	r8,r5
 80052a8:	200f883a 	mov	r7,r4
 80052ac:	42800017 	ldw	r10,0(r8)
 80052b0:	4a400104 	addi	r9,r9,4
 80052b4:	39ffff04 	addi	r7,r7,-4
 80052b8:	4abfff15 	stw	r10,-4(r9)
 80052bc:	42000104 	addi	r8,r8,4
 80052c0:	59fffa36 	bltu	r11,r7,80052ac <__alt_data_end+0xfc0052ac>
 80052c4:	213fff04 	addi	r4,r4,-4
 80052c8:	2008d0ba 	srli	r4,r4,2
 80052cc:	318000cc 	andi	r6,r6,3
 80052d0:	21000044 	addi	r4,r4,1
 80052d4:	2109883a 	add	r4,r4,r4
 80052d8:	2109883a 	add	r4,r4,r4
 80052dc:	1907883a 	add	r3,r3,r4
 80052e0:	290b883a 	add	r5,r5,r4
 80052e4:	30000626 	beq	r6,zero,8005300 <memcpy+0x114>
 80052e8:	198d883a 	add	r6,r3,r6
 80052ec:	29c00003 	ldbu	r7,0(r5)
 80052f0:	18c00044 	addi	r3,r3,1
 80052f4:	29400044 	addi	r5,r5,1
 80052f8:	19ffffc5 	stb	r7,-1(r3)
 80052fc:	19bffb1e 	bne	r3,r6,80052ec <__alt_data_end+0xfc0052ec>
 8005300:	dc000017 	ldw	r16,0(sp)
 8005304:	dec00104 	addi	sp,sp,4
 8005308:	f800283a 	ret
 800530c:	2007883a 	mov	r3,r4
 8005310:	003ff406 	br	80052e4 <__alt_data_end+0xfc0052e4>
 8005314:	2007883a 	mov	r3,r4
 8005318:	003ff306 	br	80052e8 <__alt_data_end+0xfc0052e8>
 800531c:	200d883a 	mov	r6,r4
 8005320:	003ff006 	br	80052e4 <__alt_data_end+0xfc0052e4>

08005324 <strlen>:
 8005324:	208000cc 	andi	r2,r4,3
 8005328:	10002026 	beq	r2,zero,80053ac <strlen+0x88>
 800532c:	20800007 	ldb	r2,0(r4)
 8005330:	10002026 	beq	r2,zero,80053b4 <strlen+0x90>
 8005334:	2005883a 	mov	r2,r4
 8005338:	00000206 	br	8005344 <strlen+0x20>
 800533c:	10c00007 	ldb	r3,0(r2)
 8005340:	18001826 	beq	r3,zero,80053a4 <strlen+0x80>
 8005344:	10800044 	addi	r2,r2,1
 8005348:	10c000cc 	andi	r3,r2,3
 800534c:	183ffb1e 	bne	r3,zero,800533c <__alt_data_end+0xfc00533c>
 8005350:	10c00017 	ldw	r3,0(r2)
 8005354:	01ffbff4 	movhi	r7,65279
 8005358:	39ffbfc4 	addi	r7,r7,-257
 800535c:	00ca303a 	nor	r5,zero,r3
 8005360:	01a02074 	movhi	r6,32897
 8005364:	19c7883a 	add	r3,r3,r7
 8005368:	31a02004 	addi	r6,r6,-32640
 800536c:	1946703a 	and	r3,r3,r5
 8005370:	1986703a 	and	r3,r3,r6
 8005374:	1800091e 	bne	r3,zero,800539c <strlen+0x78>
 8005378:	10800104 	addi	r2,r2,4
 800537c:	10c00017 	ldw	r3,0(r2)
 8005380:	19cb883a 	add	r5,r3,r7
 8005384:	00c6303a 	nor	r3,zero,r3
 8005388:	28c6703a 	and	r3,r5,r3
 800538c:	1986703a 	and	r3,r3,r6
 8005390:	183ff926 	beq	r3,zero,8005378 <__alt_data_end+0xfc005378>
 8005394:	00000106 	br	800539c <strlen+0x78>
 8005398:	10800044 	addi	r2,r2,1
 800539c:	10c00007 	ldb	r3,0(r2)
 80053a0:	183ffd1e 	bne	r3,zero,8005398 <__alt_data_end+0xfc005398>
 80053a4:	1105c83a 	sub	r2,r2,r4
 80053a8:	f800283a 	ret
 80053ac:	2005883a 	mov	r2,r4
 80053b0:	003fe706 	br	8005350 <__alt_data_end+0xfc005350>
 80053b4:	0005883a 	mov	r2,zero
 80053b8:	f800283a 	ret

080053bc <__register_exitproc>:
 80053bc:	00820034 	movhi	r2,2048
 80053c0:	defffa04 	addi	sp,sp,-24
 80053c4:	109b9704 	addi	r2,r2,28252
 80053c8:	dc000315 	stw	r16,12(sp)
 80053cc:	14000017 	ldw	r16,0(r2)
 80053d0:	dc400415 	stw	r17,16(sp)
 80053d4:	dfc00515 	stw	ra,20(sp)
 80053d8:	80805217 	ldw	r2,328(r16)
 80053dc:	2023883a 	mov	r17,r4
 80053e0:	10003626 	beq	r2,zero,80054bc <__register_exitproc+0x100>
 80053e4:	10c00117 	ldw	r3,4(r2)
 80053e8:	010007c4 	movi	r4,31
 80053ec:	20c00e16 	blt	r4,r3,8005428 <__register_exitproc+0x6c>
 80053f0:	1a400044 	addi	r9,r3,1
 80053f4:	8800211e 	bne	r17,zero,800547c <__register_exitproc+0xc0>
 80053f8:	18c00084 	addi	r3,r3,2
 80053fc:	18c7883a 	add	r3,r3,r3
 8005400:	18c7883a 	add	r3,r3,r3
 8005404:	12400115 	stw	r9,4(r2)
 8005408:	10c7883a 	add	r3,r2,r3
 800540c:	19400015 	stw	r5,0(r3)
 8005410:	0005883a 	mov	r2,zero
 8005414:	dfc00517 	ldw	ra,20(sp)
 8005418:	dc400417 	ldw	r17,16(sp)
 800541c:	dc000317 	ldw	r16,12(sp)
 8005420:	dec00604 	addi	sp,sp,24
 8005424:	f800283a 	ret
 8005428:	00800034 	movhi	r2,0
 800542c:	10800004 	addi	r2,r2,0
 8005430:	10002526 	beq	r2,zero,80054c8 <__register_exitproc+0x10c>
 8005434:	01006404 	movi	r4,400
 8005438:	d9400015 	stw	r5,0(sp)
 800543c:	d9800115 	stw	r6,4(sp)
 8005440:	d9c00215 	stw	r7,8(sp)
 8005444:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8005448:	d9400017 	ldw	r5,0(sp)
 800544c:	d9800117 	ldw	r6,4(sp)
 8005450:	d9c00217 	ldw	r7,8(sp)
 8005454:	10001c26 	beq	r2,zero,80054c8 <__register_exitproc+0x10c>
 8005458:	80c05217 	ldw	r3,328(r16)
 800545c:	10000115 	stw	zero,4(r2)
 8005460:	02400044 	movi	r9,1
 8005464:	10c00015 	stw	r3,0(r2)
 8005468:	80805215 	stw	r2,328(r16)
 800546c:	10006215 	stw	zero,392(r2)
 8005470:	10006315 	stw	zero,396(r2)
 8005474:	0007883a 	mov	r3,zero
 8005478:	883fdf26 	beq	r17,zero,80053f8 <__alt_data_end+0xfc0053f8>
 800547c:	18d1883a 	add	r8,r3,r3
 8005480:	4211883a 	add	r8,r8,r8
 8005484:	1211883a 	add	r8,r2,r8
 8005488:	41802215 	stw	r6,136(r8)
 800548c:	01000044 	movi	r4,1
 8005490:	11806217 	ldw	r6,392(r2)
 8005494:	20c8983a 	sll	r4,r4,r3
 8005498:	310cb03a 	or	r6,r6,r4
 800549c:	11806215 	stw	r6,392(r2)
 80054a0:	41c04215 	stw	r7,264(r8)
 80054a4:	01800084 	movi	r6,2
 80054a8:	89bfd31e 	bne	r17,r6,80053f8 <__alt_data_end+0xfc0053f8>
 80054ac:	11806317 	ldw	r6,396(r2)
 80054b0:	3108b03a 	or	r4,r6,r4
 80054b4:	11006315 	stw	r4,396(r2)
 80054b8:	003fcf06 	br	80053f8 <__alt_data_end+0xfc0053f8>
 80054bc:	80805304 	addi	r2,r16,332
 80054c0:	80805215 	stw	r2,328(r16)
 80054c4:	003fc706 	br	80053e4 <__alt_data_end+0xfc0053e4>
 80054c8:	00bfffc4 	movi	r2,-1
 80054cc:	003fd106 	br	8005414 <__alt_data_end+0xfc005414>

080054d0 <__call_exitprocs>:
 80054d0:	00820034 	movhi	r2,2048
 80054d4:	109b9704 	addi	r2,r2,28252
 80054d8:	10800017 	ldw	r2,0(r2)
 80054dc:	defff404 	addi	sp,sp,-48
 80054e0:	dd800815 	stw	r22,32(sp)
 80054e4:	d8800015 	stw	r2,0(sp)
 80054e8:	10805204 	addi	r2,r2,328
 80054ec:	dd000615 	stw	r20,24(sp)
 80054f0:	dc800415 	stw	r18,16(sp)
 80054f4:	dfc00b15 	stw	ra,44(sp)
 80054f8:	df000a15 	stw	fp,40(sp)
 80054fc:	ddc00915 	stw	r23,36(sp)
 8005500:	dd400715 	stw	r21,28(sp)
 8005504:	dcc00515 	stw	r19,20(sp)
 8005508:	dc400315 	stw	r17,12(sp)
 800550c:	dc000215 	stw	r16,8(sp)
 8005510:	2025883a 	mov	r18,r4
 8005514:	2829883a 	mov	r20,r5
 8005518:	d8800115 	stw	r2,4(sp)
 800551c:	05bfffc4 	movi	r22,-1
 8005520:	d8800017 	ldw	r2,0(sp)
 8005524:	14c05217 	ldw	r19,328(r2)
 8005528:	98001d26 	beq	r19,zero,80055a0 <__call_exitprocs+0xd0>
 800552c:	dd400117 	ldw	r21,4(sp)
 8005530:	98800117 	ldw	r2,4(r19)
 8005534:	173fffc4 	addi	fp,r2,-1
 8005538:	e0000d16 	blt	fp,zero,8005570 <__call_exitprocs+0xa0>
 800553c:	14000044 	addi	r16,r2,1
 8005540:	8421883a 	add	r16,r16,r16
 8005544:	8421883a 	add	r16,r16,r16
 8005548:	84402004 	addi	r17,r16,128
 800554c:	9c63883a 	add	r17,r19,r17
 8005550:	9c21883a 	add	r16,r19,r16
 8005554:	a0001e26 	beq	r20,zero,80055d0 <__call_exitprocs+0x100>
 8005558:	80804017 	ldw	r2,256(r16)
 800555c:	15001c26 	beq	r2,r20,80055d0 <__call_exitprocs+0x100>
 8005560:	e73fffc4 	addi	fp,fp,-1
 8005564:	843fff04 	addi	r16,r16,-4
 8005568:	8c7fff04 	addi	r17,r17,-4
 800556c:	e5bff91e 	bne	fp,r22,8005554 <__alt_data_end+0xfc005554>
 8005570:	00800034 	movhi	r2,0
 8005574:	10800004 	addi	r2,r2,0
 8005578:	10000926 	beq	r2,zero,80055a0 <__call_exitprocs+0xd0>
 800557c:	98800117 	ldw	r2,4(r19)
 8005580:	1000311e 	bne	r2,zero,8005648 <__call_exitprocs+0x178>
 8005584:	98800017 	ldw	r2,0(r19)
 8005588:	10003426 	beq	r2,zero,800565c <__call_exitprocs+0x18c>
 800558c:	9809883a 	mov	r4,r19
 8005590:	a8800015 	stw	r2,0(r21)
 8005594:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8005598:	acc00017 	ldw	r19,0(r21)
 800559c:	983fe41e 	bne	r19,zero,8005530 <__alt_data_end+0xfc005530>
 80055a0:	dfc00b17 	ldw	ra,44(sp)
 80055a4:	df000a17 	ldw	fp,40(sp)
 80055a8:	ddc00917 	ldw	r23,36(sp)
 80055ac:	dd800817 	ldw	r22,32(sp)
 80055b0:	dd400717 	ldw	r21,28(sp)
 80055b4:	dd000617 	ldw	r20,24(sp)
 80055b8:	dcc00517 	ldw	r19,20(sp)
 80055bc:	dc800417 	ldw	r18,16(sp)
 80055c0:	dc400317 	ldw	r17,12(sp)
 80055c4:	dc000217 	ldw	r16,8(sp)
 80055c8:	dec00c04 	addi	sp,sp,48
 80055cc:	f800283a 	ret
 80055d0:	98800117 	ldw	r2,4(r19)
 80055d4:	80c00017 	ldw	r3,0(r16)
 80055d8:	10bfffc4 	addi	r2,r2,-1
 80055dc:	17001526 	beq	r2,fp,8005634 <__call_exitprocs+0x164>
 80055e0:	80000015 	stw	zero,0(r16)
 80055e4:	183fde26 	beq	r3,zero,8005560 <__alt_data_end+0xfc005560>
 80055e8:	00800044 	movi	r2,1
 80055ec:	1708983a 	sll	r4,r2,fp
 80055f0:	98806217 	ldw	r2,392(r19)
 80055f4:	9dc00117 	ldw	r23,4(r19)
 80055f8:	2084703a 	and	r2,r4,r2
 80055fc:	1000061e 	bne	r2,zero,8005618 <__call_exitprocs+0x148>
 8005600:	183ee83a 	callr	r3
 8005604:	98800117 	ldw	r2,4(r19)
 8005608:	15ffc51e 	bne	r2,r23,8005520 <__alt_data_end+0xfc005520>
 800560c:	a8800017 	ldw	r2,0(r21)
 8005610:	14ffd326 	beq	r2,r19,8005560 <__alt_data_end+0xfc005560>
 8005614:	003fc206 	br	8005520 <__alt_data_end+0xfc005520>
 8005618:	98806317 	ldw	r2,396(r19)
 800561c:	2084703a 	and	r2,r4,r2
 8005620:	1000061e 	bne	r2,zero,800563c <__call_exitprocs+0x16c>
 8005624:	89400017 	ldw	r5,0(r17)
 8005628:	9009883a 	mov	r4,r18
 800562c:	183ee83a 	callr	r3
 8005630:	003ff406 	br	8005604 <__alt_data_end+0xfc005604>
 8005634:	9f000115 	stw	fp,4(r19)
 8005638:	003fea06 	br	80055e4 <__alt_data_end+0xfc0055e4>
 800563c:	89000017 	ldw	r4,0(r17)
 8005640:	183ee83a 	callr	r3
 8005644:	003fef06 	br	8005604 <__alt_data_end+0xfc005604>
 8005648:	98800017 	ldw	r2,0(r19)
 800564c:	982b883a 	mov	r21,r19
 8005650:	1027883a 	mov	r19,r2
 8005654:	983fb61e 	bne	r19,zero,8005530 <__alt_data_end+0xfc005530>
 8005658:	003fd106 	br	80055a0 <__alt_data_end+0xfc0055a0>
 800565c:	0005883a 	mov	r2,zero
 8005660:	003ffa06 	br	800564c <__alt_data_end+0xfc00564c>

08005664 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8005664:	defffd04 	addi	sp,sp,-12
 8005668:	df000215 	stw	fp,8(sp)
 800566c:	df000204 	addi	fp,sp,8
 8005670:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8005674:	0001883a 	nop
 8005678:	e0bfff17 	ldw	r2,-4(fp)
 800567c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8005680:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8005684:	10000226 	beq	r2,zero,8005690 <_exit+0x2c>
    ALT_SIM_FAIL();
 8005688:	002af070 	cmpltui	zero,zero,43969
 800568c:	00000106 	br	8005694 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8005690:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8005694:	003fff06 	br	8005694 <__alt_data_end+0xfc005694>
